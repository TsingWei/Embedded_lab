
Lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e58  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800403c  0800403c  0001403c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040d4  080040d4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080040d4  080040d4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040d4  080040d4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040d4  080040d4  000140d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040d8  080040d8  000140d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080040dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000074  08004150  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08004150  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf1f  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002079  00000000  00000000  0002cfbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cd0  00000000  00000000  0002f038  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bb8  00000000  00000000  0002fd08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000179dd  00000000  00000000  000308c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a3ee  00000000  00000000  0004829d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000810dd  00000000  00000000  0005268b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d3768  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000399c  00000000  00000000  000d37e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000074 	.word	0x20000074
 8000200:	00000000 	.word	0x00000000
 8000204:	08004024 	.word	0x08004024

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000078 	.word	0x20000078
 8000220:	08004024 	.word	0x08004024

08000224 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000228:	4b08      	ldr	r3, [pc, #32]	; (800024c <HAL_Init+0x28>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a07      	ldr	r2, [pc, #28]	; (800024c <HAL_Init+0x28>)
 800022e:	f043 0310 	orr.w	r3, r3, #16
 8000232:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000234:	2003      	movs	r0, #3
 8000236:	f000 f945 	bl	80004c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f808 	bl	8000250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000240:	f002 fe2e 	bl	8002ea0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000244:	2300      	movs	r3, #0
}
 8000246:	4618      	mov	r0, r3
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40022000 	.word	0x40022000

08000250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000258:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <HAL_InitTick+0x54>)
 800025a:	681a      	ldr	r2, [r3, #0]
 800025c:	4b12      	ldr	r3, [pc, #72]	; (80002a8 <HAL_InitTick+0x58>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	4619      	mov	r1, r3
 8000262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000266:	fbb3 f3f1 	udiv	r3, r3, r1
 800026a:	fbb2 f3f3 	udiv	r3, r2, r3
 800026e:	4618      	mov	r0, r3
 8000270:	f000 f95d 	bl	800052e <HAL_SYSTICK_Config>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800027a:	2301      	movs	r3, #1
 800027c:	e00e      	b.n	800029c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	2b0f      	cmp	r3, #15
 8000282:	d80a      	bhi.n	800029a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000284:	2200      	movs	r2, #0
 8000286:	6879      	ldr	r1, [r7, #4]
 8000288:	f04f 30ff 	mov.w	r0, #4294967295
 800028c:	f000 f925 	bl	80004da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000290:	4a06      	ldr	r2, [pc, #24]	; (80002ac <HAL_InitTick+0x5c>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000296:	2300      	movs	r3, #0
 8000298:	e000      	b.n	800029c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800029a:	2301      	movs	r3, #1
}
 800029c:	4618      	mov	r0, r3
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	2000000c 	.word	0x2000000c
 80002a8:	20000004 	.word	0x20000004
 80002ac:	20000000 	.word	0x20000000

080002b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002b4:	4b05      	ldr	r3, [pc, #20]	; (80002cc <HAL_IncTick+0x1c>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	461a      	mov	r2, r3
 80002ba:	4b05      	ldr	r3, [pc, #20]	; (80002d0 <HAL_IncTick+0x20>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4413      	add	r3, r2
 80002c0:	4a03      	ldr	r2, [pc, #12]	; (80002d0 <HAL_IncTick+0x20>)
 80002c2:	6013      	str	r3, [r2, #0]
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr
 80002cc:	20000004 	.word	0x20000004
 80002d0:	200000a0 	.word	0x200000a0

080002d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
  return uwTick;
 80002d8:	4b02      	ldr	r3, [pc, #8]	; (80002e4 <HAL_GetTick+0x10>)
 80002da:	681b      	ldr	r3, [r3, #0]
}
 80002dc:	4618      	mov	r0, r3
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	200000a0 	.word	0x200000a0

080002e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b084      	sub	sp, #16
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002f0:	f7ff fff0 	bl	80002d4 <HAL_GetTick>
 80002f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000300:	d005      	beq.n	800030e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000302:	4b09      	ldr	r3, [pc, #36]	; (8000328 <HAL_Delay+0x40>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	461a      	mov	r2, r3
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	4413      	add	r3, r2
 800030c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800030e:	bf00      	nop
 8000310:	f7ff ffe0 	bl	80002d4 <HAL_GetTick>
 8000314:	4602      	mov	r2, r0
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	1ad3      	subs	r3, r2, r3
 800031a:	68fa      	ldr	r2, [r7, #12]
 800031c:	429a      	cmp	r2, r3
 800031e:	d8f7      	bhi.n	8000310 <HAL_Delay+0x28>
  {
  }
}
 8000320:	bf00      	nop
 8000322:	3710      	adds	r7, #16
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	20000004 	.word	0x20000004

0800032c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	f003 0307 	and.w	r3, r3, #7
 800033a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800033c:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <__NVIC_SetPriorityGrouping+0x44>)
 800033e:	68db      	ldr	r3, [r3, #12]
 8000340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000342:	68ba      	ldr	r2, [r7, #8]
 8000344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000348:	4013      	ands	r3, r2
 800034a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800035c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800035e:	4a04      	ldr	r2, [pc, #16]	; (8000370 <__NVIC_SetPriorityGrouping+0x44>)
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	60d3      	str	r3, [r2, #12]
}
 8000364:	bf00      	nop
 8000366:	3714      	adds	r7, #20
 8000368:	46bd      	mov	sp, r7
 800036a:	bc80      	pop	{r7}
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	e000ed00 	.word	0xe000ed00

08000374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000378:	4b04      	ldr	r3, [pc, #16]	; (800038c <__NVIC_GetPriorityGrouping+0x18>)
 800037a:	68db      	ldr	r3, [r3, #12]
 800037c:	0a1b      	lsrs	r3, r3, #8
 800037e:	f003 0307 	and.w	r3, r3, #7
}
 8000382:	4618      	mov	r0, r3
 8000384:	46bd      	mov	sp, r7
 8000386:	bc80      	pop	{r7}
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	e000ed00 	.word	0xe000ed00

08000390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800039a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	db0b      	blt.n	80003ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	f003 021f 	and.w	r2, r3, #31
 80003a8:	4906      	ldr	r1, [pc, #24]	; (80003c4 <__NVIC_EnableIRQ+0x34>)
 80003aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ae:	095b      	lsrs	r3, r3, #5
 80003b0:	2001      	movs	r0, #1
 80003b2:	fa00 f202 	lsl.w	r2, r0, r2
 80003b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	bc80      	pop	{r7}
 80003c2:	4770      	bx	lr
 80003c4:	e000e100 	.word	0xe000e100

080003c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	4603      	mov	r3, r0
 80003d0:	6039      	str	r1, [r7, #0]
 80003d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db0a      	blt.n	80003f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	b2da      	uxtb	r2, r3
 80003e0:	490c      	ldr	r1, [pc, #48]	; (8000414 <__NVIC_SetPriority+0x4c>)
 80003e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003e6:	0112      	lsls	r2, r2, #4
 80003e8:	b2d2      	uxtb	r2, r2
 80003ea:	440b      	add	r3, r1
 80003ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003f0:	e00a      	b.n	8000408 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	b2da      	uxtb	r2, r3
 80003f6:	4908      	ldr	r1, [pc, #32]	; (8000418 <__NVIC_SetPriority+0x50>)
 80003f8:	79fb      	ldrb	r3, [r7, #7]
 80003fa:	f003 030f 	and.w	r3, r3, #15
 80003fe:	3b04      	subs	r3, #4
 8000400:	0112      	lsls	r2, r2, #4
 8000402:	b2d2      	uxtb	r2, r2
 8000404:	440b      	add	r3, r1
 8000406:	761a      	strb	r2, [r3, #24]
}
 8000408:	bf00      	nop
 800040a:	370c      	adds	r7, #12
 800040c:	46bd      	mov	sp, r7
 800040e:	bc80      	pop	{r7}
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	e000e100 	.word	0xe000e100
 8000418:	e000ed00 	.word	0xe000ed00

0800041c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800041c:	b480      	push	{r7}
 800041e:	b089      	sub	sp, #36	; 0x24
 8000420:	af00      	add	r7, sp, #0
 8000422:	60f8      	str	r0, [r7, #12]
 8000424:	60b9      	str	r1, [r7, #8]
 8000426:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	f003 0307 	and.w	r3, r3, #7
 800042e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000430:	69fb      	ldr	r3, [r7, #28]
 8000432:	f1c3 0307 	rsb	r3, r3, #7
 8000436:	2b04      	cmp	r3, #4
 8000438:	bf28      	it	cs
 800043a:	2304      	movcs	r3, #4
 800043c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800043e:	69fb      	ldr	r3, [r7, #28]
 8000440:	3304      	adds	r3, #4
 8000442:	2b06      	cmp	r3, #6
 8000444:	d902      	bls.n	800044c <NVIC_EncodePriority+0x30>
 8000446:	69fb      	ldr	r3, [r7, #28]
 8000448:	3b03      	subs	r3, #3
 800044a:	e000      	b.n	800044e <NVIC_EncodePriority+0x32>
 800044c:	2300      	movs	r3, #0
 800044e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000450:	f04f 32ff 	mov.w	r2, #4294967295
 8000454:	69bb      	ldr	r3, [r7, #24]
 8000456:	fa02 f303 	lsl.w	r3, r2, r3
 800045a:	43da      	mvns	r2, r3
 800045c:	68bb      	ldr	r3, [r7, #8]
 800045e:	401a      	ands	r2, r3
 8000460:	697b      	ldr	r3, [r7, #20]
 8000462:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000464:	f04f 31ff 	mov.w	r1, #4294967295
 8000468:	697b      	ldr	r3, [r7, #20]
 800046a:	fa01 f303 	lsl.w	r3, r1, r3
 800046e:	43d9      	mvns	r1, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000474:	4313      	orrs	r3, r2
         );
}
 8000476:	4618      	mov	r0, r3
 8000478:	3724      	adds	r7, #36	; 0x24
 800047a:	46bd      	mov	sp, r7
 800047c:	bc80      	pop	{r7}
 800047e:	4770      	bx	lr

08000480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	3b01      	subs	r3, #1
 800048c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000490:	d301      	bcc.n	8000496 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000492:	2301      	movs	r3, #1
 8000494:	e00f      	b.n	80004b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000496:	4a0a      	ldr	r2, [pc, #40]	; (80004c0 <SysTick_Config+0x40>)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	3b01      	subs	r3, #1
 800049c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800049e:	210f      	movs	r1, #15
 80004a0:	f04f 30ff 	mov.w	r0, #4294967295
 80004a4:	f7ff ff90 	bl	80003c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004a8:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <SysTick_Config+0x40>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004ae:	4b04      	ldr	r3, [pc, #16]	; (80004c0 <SysTick_Config+0x40>)
 80004b0:	2207      	movs	r2, #7
 80004b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004b4:	2300      	movs	r3, #0
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	3708      	adds	r7, #8
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	e000e010 	.word	0xe000e010

080004c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80004cc:	6878      	ldr	r0, [r7, #4]
 80004ce:	f7ff ff2d 	bl	800032c <__NVIC_SetPriorityGrouping>
}
 80004d2:	bf00      	nop
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}

080004da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004da:	b580      	push	{r7, lr}
 80004dc:	b086      	sub	sp, #24
 80004de:	af00      	add	r7, sp, #0
 80004e0:	4603      	mov	r3, r0
 80004e2:	60b9      	str	r1, [r7, #8]
 80004e4:	607a      	str	r2, [r7, #4]
 80004e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80004e8:	2300      	movs	r3, #0
 80004ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80004ec:	f7ff ff42 	bl	8000374 <__NVIC_GetPriorityGrouping>
 80004f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004f2:	687a      	ldr	r2, [r7, #4]
 80004f4:	68b9      	ldr	r1, [r7, #8]
 80004f6:	6978      	ldr	r0, [r7, #20]
 80004f8:	f7ff ff90 	bl	800041c <NVIC_EncodePriority>
 80004fc:	4602      	mov	r2, r0
 80004fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000502:	4611      	mov	r1, r2
 8000504:	4618      	mov	r0, r3
 8000506:	f7ff ff5f 	bl	80003c8 <__NVIC_SetPriority>
}
 800050a:	bf00      	nop
 800050c:	3718      	adds	r7, #24
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}

08000512 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000512:	b580      	push	{r7, lr}
 8000514:	b082      	sub	sp, #8
 8000516:	af00      	add	r7, sp, #0
 8000518:	4603      	mov	r3, r0
 800051a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800051c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000520:	4618      	mov	r0, r3
 8000522:	f7ff ff35 	bl	8000390 <__NVIC_EnableIRQ>
}
 8000526:	bf00      	nop
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}

0800052e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800052e:	b580      	push	{r7, lr}
 8000530:	b082      	sub	sp, #8
 8000532:	af00      	add	r7, sp, #0
 8000534:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000536:	6878      	ldr	r0, [r7, #4]
 8000538:	f7ff ffa2 	bl	8000480 <SysTick_Config>
 800053c:	4603      	mov	r3, r0
}
 800053e:	4618      	mov	r0, r3
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
	...

08000548 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000550:	2300      	movs	r3, #0
 8000552:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800055a:	2b02      	cmp	r3, #2
 800055c:	d005      	beq.n	800056a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	2204      	movs	r2, #4
 8000562:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000564:	2301      	movs	r3, #1
 8000566:	73fb      	strb	r3, [r7, #15]
 8000568:	e0d6      	b.n	8000718 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f022 020e 	bic.w	r2, r2, #14
 8000578:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	681a      	ldr	r2, [r3, #0]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f022 0201 	bic.w	r2, r2, #1
 8000588:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	461a      	mov	r2, r3
 8000590:	4b64      	ldr	r3, [pc, #400]	; (8000724 <HAL_DMA_Abort_IT+0x1dc>)
 8000592:	429a      	cmp	r2, r3
 8000594:	d958      	bls.n	8000648 <HAL_DMA_Abort_IT+0x100>
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a63      	ldr	r2, [pc, #396]	; (8000728 <HAL_DMA_Abort_IT+0x1e0>)
 800059c:	4293      	cmp	r3, r2
 800059e:	d04f      	beq.n	8000640 <HAL_DMA_Abort_IT+0xf8>
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a61      	ldr	r2, [pc, #388]	; (800072c <HAL_DMA_Abort_IT+0x1e4>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d048      	beq.n	800063c <HAL_DMA_Abort_IT+0xf4>
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a60      	ldr	r2, [pc, #384]	; (8000730 <HAL_DMA_Abort_IT+0x1e8>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d040      	beq.n	8000636 <HAL_DMA_Abort_IT+0xee>
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a5e      	ldr	r2, [pc, #376]	; (8000734 <HAL_DMA_Abort_IT+0x1ec>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d038      	beq.n	8000630 <HAL_DMA_Abort_IT+0xe8>
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a5d      	ldr	r2, [pc, #372]	; (8000738 <HAL_DMA_Abort_IT+0x1f0>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d030      	beq.n	800062a <HAL_DMA_Abort_IT+0xe2>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a5b      	ldr	r2, [pc, #364]	; (800073c <HAL_DMA_Abort_IT+0x1f4>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d028      	beq.n	8000624 <HAL_DMA_Abort_IT+0xdc>
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a53      	ldr	r2, [pc, #332]	; (8000724 <HAL_DMA_Abort_IT+0x1dc>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d020      	beq.n	800061e <HAL_DMA_Abort_IT+0xd6>
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a57      	ldr	r2, [pc, #348]	; (8000740 <HAL_DMA_Abort_IT+0x1f8>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d019      	beq.n	800061a <HAL_DMA_Abort_IT+0xd2>
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a56      	ldr	r2, [pc, #344]	; (8000744 <HAL_DMA_Abort_IT+0x1fc>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d012      	beq.n	8000616 <HAL_DMA_Abort_IT+0xce>
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a54      	ldr	r2, [pc, #336]	; (8000748 <HAL_DMA_Abort_IT+0x200>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d00a      	beq.n	8000610 <HAL_DMA_Abort_IT+0xc8>
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a53      	ldr	r2, [pc, #332]	; (800074c <HAL_DMA_Abort_IT+0x204>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d102      	bne.n	800060a <HAL_DMA_Abort_IT+0xc2>
 8000604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000608:	e01b      	b.n	8000642 <HAL_DMA_Abort_IT+0xfa>
 800060a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800060e:	e018      	b.n	8000642 <HAL_DMA_Abort_IT+0xfa>
 8000610:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000614:	e015      	b.n	8000642 <HAL_DMA_Abort_IT+0xfa>
 8000616:	2310      	movs	r3, #16
 8000618:	e013      	b.n	8000642 <HAL_DMA_Abort_IT+0xfa>
 800061a:	2301      	movs	r3, #1
 800061c:	e011      	b.n	8000642 <HAL_DMA_Abort_IT+0xfa>
 800061e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000622:	e00e      	b.n	8000642 <HAL_DMA_Abort_IT+0xfa>
 8000624:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000628:	e00b      	b.n	8000642 <HAL_DMA_Abort_IT+0xfa>
 800062a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800062e:	e008      	b.n	8000642 <HAL_DMA_Abort_IT+0xfa>
 8000630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000634:	e005      	b.n	8000642 <HAL_DMA_Abort_IT+0xfa>
 8000636:	f44f 7380 	mov.w	r3, #256	; 0x100
 800063a:	e002      	b.n	8000642 <HAL_DMA_Abort_IT+0xfa>
 800063c:	2310      	movs	r3, #16
 800063e:	e000      	b.n	8000642 <HAL_DMA_Abort_IT+0xfa>
 8000640:	2301      	movs	r3, #1
 8000642:	4a43      	ldr	r2, [pc, #268]	; (8000750 <HAL_DMA_Abort_IT+0x208>)
 8000644:	6053      	str	r3, [r2, #4]
 8000646:	e057      	b.n	80006f8 <HAL_DMA_Abort_IT+0x1b0>
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a36      	ldr	r2, [pc, #216]	; (8000728 <HAL_DMA_Abort_IT+0x1e0>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d04f      	beq.n	80006f2 <HAL_DMA_Abort_IT+0x1aa>
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a35      	ldr	r2, [pc, #212]	; (800072c <HAL_DMA_Abort_IT+0x1e4>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d048      	beq.n	80006ee <HAL_DMA_Abort_IT+0x1a6>
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a33      	ldr	r2, [pc, #204]	; (8000730 <HAL_DMA_Abort_IT+0x1e8>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d040      	beq.n	80006e8 <HAL_DMA_Abort_IT+0x1a0>
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a32      	ldr	r2, [pc, #200]	; (8000734 <HAL_DMA_Abort_IT+0x1ec>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d038      	beq.n	80006e2 <HAL_DMA_Abort_IT+0x19a>
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a30      	ldr	r2, [pc, #192]	; (8000738 <HAL_DMA_Abort_IT+0x1f0>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d030      	beq.n	80006dc <HAL_DMA_Abort_IT+0x194>
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a2f      	ldr	r2, [pc, #188]	; (800073c <HAL_DMA_Abort_IT+0x1f4>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d028      	beq.n	80006d6 <HAL_DMA_Abort_IT+0x18e>
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a26      	ldr	r2, [pc, #152]	; (8000724 <HAL_DMA_Abort_IT+0x1dc>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d020      	beq.n	80006d0 <HAL_DMA_Abort_IT+0x188>
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a2b      	ldr	r2, [pc, #172]	; (8000740 <HAL_DMA_Abort_IT+0x1f8>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d019      	beq.n	80006cc <HAL_DMA_Abort_IT+0x184>
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a29      	ldr	r2, [pc, #164]	; (8000744 <HAL_DMA_Abort_IT+0x1fc>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d012      	beq.n	80006c8 <HAL_DMA_Abort_IT+0x180>
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a28      	ldr	r2, [pc, #160]	; (8000748 <HAL_DMA_Abort_IT+0x200>)
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d00a      	beq.n	80006c2 <HAL_DMA_Abort_IT+0x17a>
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a26      	ldr	r2, [pc, #152]	; (800074c <HAL_DMA_Abort_IT+0x204>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d102      	bne.n	80006bc <HAL_DMA_Abort_IT+0x174>
 80006b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ba:	e01b      	b.n	80006f4 <HAL_DMA_Abort_IT+0x1ac>
 80006bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c0:	e018      	b.n	80006f4 <HAL_DMA_Abort_IT+0x1ac>
 80006c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006c6:	e015      	b.n	80006f4 <HAL_DMA_Abort_IT+0x1ac>
 80006c8:	2310      	movs	r3, #16
 80006ca:	e013      	b.n	80006f4 <HAL_DMA_Abort_IT+0x1ac>
 80006cc:	2301      	movs	r3, #1
 80006ce:	e011      	b.n	80006f4 <HAL_DMA_Abort_IT+0x1ac>
 80006d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80006d4:	e00e      	b.n	80006f4 <HAL_DMA_Abort_IT+0x1ac>
 80006d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80006da:	e00b      	b.n	80006f4 <HAL_DMA_Abort_IT+0x1ac>
 80006dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e0:	e008      	b.n	80006f4 <HAL_DMA_Abort_IT+0x1ac>
 80006e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e6:	e005      	b.n	80006f4 <HAL_DMA_Abort_IT+0x1ac>
 80006e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006ec:	e002      	b.n	80006f4 <HAL_DMA_Abort_IT+0x1ac>
 80006ee:	2310      	movs	r3, #16
 80006f0:	e000      	b.n	80006f4 <HAL_DMA_Abort_IT+0x1ac>
 80006f2:	2301      	movs	r3, #1
 80006f4:	4a17      	ldr	r2, [pc, #92]	; (8000754 <HAL_DMA_Abort_IT+0x20c>)
 80006f6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2201      	movs	r2, #1
 80006fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2200      	movs	r2, #0
 8000704:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800070c:	2b00      	cmp	r3, #0
 800070e:	d003      	beq.n	8000718 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	4798      	blx	r3
    } 
  }
  return status;
 8000718:	7bfb      	ldrb	r3, [r7, #15]
}
 800071a:	4618      	mov	r0, r3
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40020080 	.word	0x40020080
 8000728:	40020008 	.word	0x40020008
 800072c:	4002001c 	.word	0x4002001c
 8000730:	40020030 	.word	0x40020030
 8000734:	40020044 	.word	0x40020044
 8000738:	40020058 	.word	0x40020058
 800073c:	4002006c 	.word	0x4002006c
 8000740:	40020408 	.word	0x40020408
 8000744:	4002041c 	.word	0x4002041c
 8000748:	40020430 	.word	0x40020430
 800074c:	40020444 	.word	0x40020444
 8000750:	40020400 	.word	0x40020400
 8000754:	40020000 	.word	0x40020000

08000758 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000758:	b480      	push	{r7}
 800075a:	b08b      	sub	sp, #44	; 0x2c
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000762:	2300      	movs	r3, #0
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000766:	2300      	movs	r3, #0
 8000768:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800076a:	e133      	b.n	80009d4 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800076c:	2201      	movs	r2, #1
 800076e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000770:	fa02 f303 	lsl.w	r3, r2, r3
 8000774:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	69fa      	ldr	r2, [r7, #28]
 800077c:	4013      	ands	r3, r2
 800077e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000780:	69ba      	ldr	r2, [r7, #24]
 8000782:	69fb      	ldr	r3, [r7, #28]
 8000784:	429a      	cmp	r2, r3
 8000786:	f040 8122 	bne.w	80009ce <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	685b      	ldr	r3, [r3, #4]
 800078e:	2b12      	cmp	r3, #18
 8000790:	d034      	beq.n	80007fc <HAL_GPIO_Init+0xa4>
 8000792:	2b12      	cmp	r3, #18
 8000794:	d80d      	bhi.n	80007b2 <HAL_GPIO_Init+0x5a>
 8000796:	2b02      	cmp	r3, #2
 8000798:	d02b      	beq.n	80007f2 <HAL_GPIO_Init+0x9a>
 800079a:	2b02      	cmp	r3, #2
 800079c:	d804      	bhi.n	80007a8 <HAL_GPIO_Init+0x50>
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d031      	beq.n	8000806 <HAL_GPIO_Init+0xae>
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d01c      	beq.n	80007e0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80007a6:	e048      	b.n	800083a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80007a8:	2b03      	cmp	r3, #3
 80007aa:	d043      	beq.n	8000834 <HAL_GPIO_Init+0xdc>
 80007ac:	2b11      	cmp	r3, #17
 80007ae:	d01b      	beq.n	80007e8 <HAL_GPIO_Init+0x90>
          break;
 80007b0:	e043      	b.n	800083a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80007b2:	4a8f      	ldr	r2, [pc, #572]	; (80009f0 <HAL_GPIO_Init+0x298>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d026      	beq.n	8000806 <HAL_GPIO_Init+0xae>
 80007b8:	4a8d      	ldr	r2, [pc, #564]	; (80009f0 <HAL_GPIO_Init+0x298>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d806      	bhi.n	80007cc <HAL_GPIO_Init+0x74>
 80007be:	4a8d      	ldr	r2, [pc, #564]	; (80009f4 <HAL_GPIO_Init+0x29c>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d020      	beq.n	8000806 <HAL_GPIO_Init+0xae>
 80007c4:	4a8c      	ldr	r2, [pc, #560]	; (80009f8 <HAL_GPIO_Init+0x2a0>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d01d      	beq.n	8000806 <HAL_GPIO_Init+0xae>
          break;
 80007ca:	e036      	b.n	800083a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80007cc:	4a8b      	ldr	r2, [pc, #556]	; (80009fc <HAL_GPIO_Init+0x2a4>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d019      	beq.n	8000806 <HAL_GPIO_Init+0xae>
 80007d2:	4a8b      	ldr	r2, [pc, #556]	; (8000a00 <HAL_GPIO_Init+0x2a8>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d016      	beq.n	8000806 <HAL_GPIO_Init+0xae>
 80007d8:	4a8a      	ldr	r2, [pc, #552]	; (8000a04 <HAL_GPIO_Init+0x2ac>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d013      	beq.n	8000806 <HAL_GPIO_Init+0xae>
          break;
 80007de:	e02c      	b.n	800083a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	68db      	ldr	r3, [r3, #12]
 80007e4:	623b      	str	r3, [r7, #32]
          break;
 80007e6:	e028      	b.n	800083a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	3304      	adds	r3, #4
 80007ee:	623b      	str	r3, [r7, #32]
          break;
 80007f0:	e023      	b.n	800083a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	68db      	ldr	r3, [r3, #12]
 80007f6:	3308      	adds	r3, #8
 80007f8:	623b      	str	r3, [r7, #32]
          break;
 80007fa:	e01e      	b.n	800083a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	330c      	adds	r3, #12
 8000802:	623b      	str	r3, [r7, #32]
          break;
 8000804:	e019      	b.n	800083a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	689b      	ldr	r3, [r3, #8]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d102      	bne.n	8000814 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800080e:	2304      	movs	r3, #4
 8000810:	623b      	str	r3, [r7, #32]
          break;
 8000812:	e012      	b.n	800083a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	689b      	ldr	r3, [r3, #8]
 8000818:	2b01      	cmp	r3, #1
 800081a:	d105      	bne.n	8000828 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800081c:	2308      	movs	r3, #8
 800081e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	69fa      	ldr	r2, [r7, #28]
 8000824:	611a      	str	r2, [r3, #16]
          break;
 8000826:	e008      	b.n	800083a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000828:	2308      	movs	r3, #8
 800082a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	69fa      	ldr	r2, [r7, #28]
 8000830:	615a      	str	r2, [r3, #20]
          break;
 8000832:	e002      	b.n	800083a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000834:	2300      	movs	r3, #0
 8000836:	623b      	str	r3, [r7, #32]
          break;
 8000838:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800083a:	69bb      	ldr	r3, [r7, #24]
 800083c:	2bff      	cmp	r3, #255	; 0xff
 800083e:	d801      	bhi.n	8000844 <HAL_GPIO_Init+0xec>
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	e001      	b.n	8000848 <HAL_GPIO_Init+0xf0>
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3304      	adds	r3, #4
 8000848:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800084a:	69bb      	ldr	r3, [r7, #24]
 800084c:	2bff      	cmp	r3, #255	; 0xff
 800084e:	d802      	bhi.n	8000856 <HAL_GPIO_Init+0xfe>
 8000850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	e002      	b.n	800085c <HAL_GPIO_Init+0x104>
 8000856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000858:	3b08      	subs	r3, #8
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	210f      	movs	r1, #15
 8000864:	693b      	ldr	r3, [r7, #16]
 8000866:	fa01 f303 	lsl.w	r3, r1, r3
 800086a:	43db      	mvns	r3, r3
 800086c:	401a      	ands	r2, r3
 800086e:	6a39      	ldr	r1, [r7, #32]
 8000870:	693b      	ldr	r3, [r7, #16]
 8000872:	fa01 f303 	lsl.w	r3, r1, r3
 8000876:	431a      	orrs	r2, r3
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000884:	2b00      	cmp	r3, #0
 8000886:	f000 80a2 	beq.w	80009ce <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800088a:	4b5f      	ldr	r3, [pc, #380]	; (8000a08 <HAL_GPIO_Init+0x2b0>)
 800088c:	699b      	ldr	r3, [r3, #24]
 800088e:	4a5e      	ldr	r2, [pc, #376]	; (8000a08 <HAL_GPIO_Init+0x2b0>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6193      	str	r3, [r2, #24]
 8000896:	4b5c      	ldr	r3, [pc, #368]	; (8000a08 <HAL_GPIO_Init+0x2b0>)
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80008a2:	4a5a      	ldr	r2, [pc, #360]	; (8000a0c <HAL_GPIO_Init+0x2b4>)
 80008a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a6:	089b      	lsrs	r3, r3, #2
 80008a8:	3302      	adds	r3, #2
 80008aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ae:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80008b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b2:	f003 0303 	and.w	r3, r3, #3
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	220f      	movs	r2, #15
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	43db      	mvns	r3, r3
 80008c0:	68fa      	ldr	r2, [r7, #12]
 80008c2:	4013      	ands	r3, r2
 80008c4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4a51      	ldr	r2, [pc, #324]	; (8000a10 <HAL_GPIO_Init+0x2b8>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d01f      	beq.n	800090e <HAL_GPIO_Init+0x1b6>
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4a50      	ldr	r2, [pc, #320]	; (8000a14 <HAL_GPIO_Init+0x2bc>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d019      	beq.n	800090a <HAL_GPIO_Init+0x1b2>
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4a4f      	ldr	r2, [pc, #316]	; (8000a18 <HAL_GPIO_Init+0x2c0>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d013      	beq.n	8000906 <HAL_GPIO_Init+0x1ae>
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4a4e      	ldr	r2, [pc, #312]	; (8000a1c <HAL_GPIO_Init+0x2c4>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d00d      	beq.n	8000902 <HAL_GPIO_Init+0x1aa>
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4a4d      	ldr	r2, [pc, #308]	; (8000a20 <HAL_GPIO_Init+0x2c8>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d007      	beq.n	80008fe <HAL_GPIO_Init+0x1a6>
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4a4c      	ldr	r2, [pc, #304]	; (8000a24 <HAL_GPIO_Init+0x2cc>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d101      	bne.n	80008fa <HAL_GPIO_Init+0x1a2>
 80008f6:	2305      	movs	r3, #5
 80008f8:	e00a      	b.n	8000910 <HAL_GPIO_Init+0x1b8>
 80008fa:	2306      	movs	r3, #6
 80008fc:	e008      	b.n	8000910 <HAL_GPIO_Init+0x1b8>
 80008fe:	2304      	movs	r3, #4
 8000900:	e006      	b.n	8000910 <HAL_GPIO_Init+0x1b8>
 8000902:	2303      	movs	r3, #3
 8000904:	e004      	b.n	8000910 <HAL_GPIO_Init+0x1b8>
 8000906:	2302      	movs	r3, #2
 8000908:	e002      	b.n	8000910 <HAL_GPIO_Init+0x1b8>
 800090a:	2301      	movs	r3, #1
 800090c:	e000      	b.n	8000910 <HAL_GPIO_Init+0x1b8>
 800090e:	2300      	movs	r3, #0
 8000910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000912:	f002 0203 	and.w	r2, r2, #3
 8000916:	0092      	lsls	r2, r2, #2
 8000918:	4093      	lsls	r3, r2
 800091a:	68fa      	ldr	r2, [r7, #12]
 800091c:	4313      	orrs	r3, r2
 800091e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000920:	493a      	ldr	r1, [pc, #232]	; (8000a0c <HAL_GPIO_Init+0x2b4>)
 8000922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000924:	089b      	lsrs	r3, r3, #2
 8000926:	3302      	adds	r3, #2
 8000928:	68fa      	ldr	r2, [r7, #12]
 800092a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000936:	2b00      	cmp	r3, #0
 8000938:	d006      	beq.n	8000948 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800093a:	4b3b      	ldr	r3, [pc, #236]	; (8000a28 <HAL_GPIO_Init+0x2d0>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	493a      	ldr	r1, [pc, #232]	; (8000a28 <HAL_GPIO_Init+0x2d0>)
 8000940:	69bb      	ldr	r3, [r7, #24]
 8000942:	4313      	orrs	r3, r2
 8000944:	600b      	str	r3, [r1, #0]
 8000946:	e006      	b.n	8000956 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000948:	4b37      	ldr	r3, [pc, #220]	; (8000a28 <HAL_GPIO_Init+0x2d0>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	69bb      	ldr	r3, [r7, #24]
 800094e:	43db      	mvns	r3, r3
 8000950:	4935      	ldr	r1, [pc, #212]	; (8000a28 <HAL_GPIO_Init+0x2d0>)
 8000952:	4013      	ands	r3, r2
 8000954:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800095e:	2b00      	cmp	r3, #0
 8000960:	d006      	beq.n	8000970 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000962:	4b31      	ldr	r3, [pc, #196]	; (8000a28 <HAL_GPIO_Init+0x2d0>)
 8000964:	685a      	ldr	r2, [r3, #4]
 8000966:	4930      	ldr	r1, [pc, #192]	; (8000a28 <HAL_GPIO_Init+0x2d0>)
 8000968:	69bb      	ldr	r3, [r7, #24]
 800096a:	4313      	orrs	r3, r2
 800096c:	604b      	str	r3, [r1, #4]
 800096e:	e006      	b.n	800097e <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000970:	4b2d      	ldr	r3, [pc, #180]	; (8000a28 <HAL_GPIO_Init+0x2d0>)
 8000972:	685a      	ldr	r2, [r3, #4]
 8000974:	69bb      	ldr	r3, [r7, #24]
 8000976:	43db      	mvns	r3, r3
 8000978:	492b      	ldr	r1, [pc, #172]	; (8000a28 <HAL_GPIO_Init+0x2d0>)
 800097a:	4013      	ands	r3, r2
 800097c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000986:	2b00      	cmp	r3, #0
 8000988:	d006      	beq.n	8000998 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800098a:	4b27      	ldr	r3, [pc, #156]	; (8000a28 <HAL_GPIO_Init+0x2d0>)
 800098c:	689a      	ldr	r2, [r3, #8]
 800098e:	4926      	ldr	r1, [pc, #152]	; (8000a28 <HAL_GPIO_Init+0x2d0>)
 8000990:	69bb      	ldr	r3, [r7, #24]
 8000992:	4313      	orrs	r3, r2
 8000994:	608b      	str	r3, [r1, #8]
 8000996:	e006      	b.n	80009a6 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000998:	4b23      	ldr	r3, [pc, #140]	; (8000a28 <HAL_GPIO_Init+0x2d0>)
 800099a:	689a      	ldr	r2, [r3, #8]
 800099c:	69bb      	ldr	r3, [r7, #24]
 800099e:	43db      	mvns	r3, r3
 80009a0:	4921      	ldr	r1, [pc, #132]	; (8000a28 <HAL_GPIO_Init+0x2d0>)
 80009a2:	4013      	ands	r3, r2
 80009a4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d006      	beq.n	80009c0 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80009b2:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <HAL_GPIO_Init+0x2d0>)
 80009b4:	68da      	ldr	r2, [r3, #12]
 80009b6:	491c      	ldr	r1, [pc, #112]	; (8000a28 <HAL_GPIO_Init+0x2d0>)
 80009b8:	69bb      	ldr	r3, [r7, #24]
 80009ba:	4313      	orrs	r3, r2
 80009bc:	60cb      	str	r3, [r1, #12]
 80009be:	e006      	b.n	80009ce <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80009c0:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <HAL_GPIO_Init+0x2d0>)
 80009c2:	68da      	ldr	r2, [r3, #12]
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	43db      	mvns	r3, r3
 80009c8:	4917      	ldr	r1, [pc, #92]	; (8000a28 <HAL_GPIO_Init+0x2d0>)
 80009ca:	4013      	ands	r3, r2
 80009cc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80009ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d0:	3301      	adds	r3, #1
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009da:	fa22 f303 	lsr.w	r3, r2, r3
 80009de:	2b00      	cmp	r3, #0
 80009e0:	f47f aec4 	bne.w	800076c <HAL_GPIO_Init+0x14>
  }
}
 80009e4:	bf00      	nop
 80009e6:	372c      	adds	r7, #44	; 0x2c
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	10210000 	.word	0x10210000
 80009f4:	10110000 	.word	0x10110000
 80009f8:	10120000 	.word	0x10120000
 80009fc:	10310000 	.word	0x10310000
 8000a00:	10320000 	.word	0x10320000
 8000a04:	10220000 	.word	0x10220000
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	40010000 	.word	0x40010000
 8000a10:	40010800 	.word	0x40010800
 8000a14:	40010c00 	.word	0x40010c00
 8000a18:	40011000 	.word	0x40011000
 8000a1c:	40011400 	.word	0x40011400
 8000a20:	40011800 	.word	0x40011800
 8000a24:	40011c00 	.word	0x40011c00
 8000a28:	40010400 	.word	0x40010400

08000a2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	460b      	mov	r3, r1
 8000a36:	807b      	strh	r3, [r7, #2]
 8000a38:	4613      	mov	r3, r2
 8000a3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a3c:	787b      	ldrb	r3, [r7, #1]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d003      	beq.n	8000a4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a42:	887a      	ldrh	r2, [r7, #2]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000a48:	e003      	b.n	8000a52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a4a:	887b      	ldrh	r3, [r7, #2]
 8000a4c:	041a      	lsls	r2, r3, #16
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	611a      	str	r2, [r3, #16]
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr

08000a5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000a66:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000a68:	695a      	ldr	r2, [r3, #20]
 8000a6a:	88fb      	ldrh	r3, [r7, #6]
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d006      	beq.n	8000a80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000a72:	4a05      	ldr	r2, [pc, #20]	; (8000a88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000a74:	88fb      	ldrh	r3, [r7, #6]
 8000a76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000a78:	88fb      	ldrh	r3, [r7, #6]
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f002 f9b3 	bl	8002de6 <HAL_GPIO_EXTI_Callback>
  }
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40010400 	.word	0x40010400

08000a8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d101      	bne.n	8000a9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e26c      	b.n	8000f78 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	f000 8087 	beq.w	8000bba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000aac:	4b92      	ldr	r3, [pc, #584]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	f003 030c 	and.w	r3, r3, #12
 8000ab4:	2b04      	cmp	r3, #4
 8000ab6:	d00c      	beq.n	8000ad2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ab8:	4b8f      	ldr	r3, [pc, #572]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f003 030c 	and.w	r3, r3, #12
 8000ac0:	2b08      	cmp	r3, #8
 8000ac2:	d112      	bne.n	8000aea <HAL_RCC_OscConfig+0x5e>
 8000ac4:	4b8c      	ldr	r3, [pc, #560]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ad0:	d10b      	bne.n	8000aea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ad2:	4b89      	ldr	r3, [pc, #548]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d06c      	beq.n	8000bb8 <HAL_RCC_OscConfig+0x12c>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d168      	bne.n	8000bb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e246      	b.n	8000f78 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000af2:	d106      	bne.n	8000b02 <HAL_RCC_OscConfig+0x76>
 8000af4:	4b80      	ldr	r3, [pc, #512]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a7f      	ldr	r2, [pc, #508]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000afa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000afe:	6013      	str	r3, [r2, #0]
 8000b00:	e02e      	b.n	8000b60 <HAL_RCC_OscConfig+0xd4>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d10c      	bne.n	8000b24 <HAL_RCC_OscConfig+0x98>
 8000b0a:	4b7b      	ldr	r3, [pc, #492]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a7a      	ldr	r2, [pc, #488]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000b10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b14:	6013      	str	r3, [r2, #0]
 8000b16:	4b78      	ldr	r3, [pc, #480]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a77      	ldr	r2, [pc, #476]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000b1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b20:	6013      	str	r3, [r2, #0]
 8000b22:	e01d      	b.n	8000b60 <HAL_RCC_OscConfig+0xd4>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b2c:	d10c      	bne.n	8000b48 <HAL_RCC_OscConfig+0xbc>
 8000b2e:	4b72      	ldr	r3, [pc, #456]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a71      	ldr	r2, [pc, #452]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b38:	6013      	str	r3, [r2, #0]
 8000b3a:	4b6f      	ldr	r3, [pc, #444]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a6e      	ldr	r2, [pc, #440]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b44:	6013      	str	r3, [r2, #0]
 8000b46:	e00b      	b.n	8000b60 <HAL_RCC_OscConfig+0xd4>
 8000b48:	4b6b      	ldr	r3, [pc, #428]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a6a      	ldr	r2, [pc, #424]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b52:	6013      	str	r3, [r2, #0]
 8000b54:	4b68      	ldr	r3, [pc, #416]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a67      	ldr	r2, [pc, #412]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000b5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d013      	beq.n	8000b90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b68:	f7ff fbb4 	bl	80002d4 <HAL_GetTick>
 8000b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b6e:	e008      	b.n	8000b82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b70:	f7ff fbb0 	bl	80002d4 <HAL_GetTick>
 8000b74:	4602      	mov	r2, r0
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	2b64      	cmp	r3, #100	; 0x64
 8000b7c:	d901      	bls.n	8000b82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	e1fa      	b.n	8000f78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b82:	4b5d      	ldr	r3, [pc, #372]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d0f0      	beq.n	8000b70 <HAL_RCC_OscConfig+0xe4>
 8000b8e:	e014      	b.n	8000bba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b90:	f7ff fba0 	bl	80002d4 <HAL_GetTick>
 8000b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b96:	e008      	b.n	8000baa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b98:	f7ff fb9c 	bl	80002d4 <HAL_GetTick>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	2b64      	cmp	r3, #100	; 0x64
 8000ba4:	d901      	bls.n	8000baa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	e1e6      	b.n	8000f78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000baa:	4b53      	ldr	r3, [pc, #332]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d1f0      	bne.n	8000b98 <HAL_RCC_OscConfig+0x10c>
 8000bb6:	e000      	b.n	8000bba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d063      	beq.n	8000c8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000bc6:	4b4c      	ldr	r3, [pc, #304]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f003 030c 	and.w	r3, r3, #12
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d00b      	beq.n	8000bea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000bd2:	4b49      	ldr	r3, [pc, #292]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f003 030c 	and.w	r3, r3, #12
 8000bda:	2b08      	cmp	r3, #8
 8000bdc:	d11c      	bne.n	8000c18 <HAL_RCC_OscConfig+0x18c>
 8000bde:	4b46      	ldr	r3, [pc, #280]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d116      	bne.n	8000c18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bea:	4b43      	ldr	r3, [pc, #268]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f003 0302 	and.w	r3, r3, #2
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d005      	beq.n	8000c02 <HAL_RCC_OscConfig+0x176>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	691b      	ldr	r3, [r3, #16]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d001      	beq.n	8000c02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e1ba      	b.n	8000f78 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c02:	4b3d      	ldr	r3, [pc, #244]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	695b      	ldr	r3, [r3, #20]
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	4939      	ldr	r1, [pc, #228]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000c12:	4313      	orrs	r3, r2
 8000c14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c16:	e03a      	b.n	8000c8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	691b      	ldr	r3, [r3, #16]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d020      	beq.n	8000c62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c20:	4b36      	ldr	r3, [pc, #216]	; (8000cfc <HAL_RCC_OscConfig+0x270>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c26:	f7ff fb55 	bl	80002d4 <HAL_GetTick>
 8000c2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c2c:	e008      	b.n	8000c40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c2e:	f7ff fb51 	bl	80002d4 <HAL_GetTick>
 8000c32:	4602      	mov	r2, r0
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	1ad3      	subs	r3, r2, r3
 8000c38:	2b02      	cmp	r3, #2
 8000c3a:	d901      	bls.n	8000c40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	e19b      	b.n	8000f78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c40:	4b2d      	ldr	r3, [pc, #180]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f003 0302 	and.w	r3, r3, #2
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d0f0      	beq.n	8000c2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c4c:	4b2a      	ldr	r3, [pc, #168]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	695b      	ldr	r3, [r3, #20]
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	4927      	ldr	r1, [pc, #156]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	600b      	str	r3, [r1, #0]
 8000c60:	e015      	b.n	8000c8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c62:	4b26      	ldr	r3, [pc, #152]	; (8000cfc <HAL_RCC_OscConfig+0x270>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c68:	f7ff fb34 	bl	80002d4 <HAL_GetTick>
 8000c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c6e:	e008      	b.n	8000c82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c70:	f7ff fb30 	bl	80002d4 <HAL_GetTick>
 8000c74:	4602      	mov	r2, r0
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	2b02      	cmp	r3, #2
 8000c7c:	d901      	bls.n	8000c82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	e17a      	b.n	8000f78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c82:	4b1d      	ldr	r3, [pc, #116]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d1f0      	bne.n	8000c70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f003 0308 	and.w	r3, r3, #8
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d03a      	beq.n	8000d10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d019      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ca2:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <HAL_RCC_OscConfig+0x274>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ca8:	f7ff fb14 	bl	80002d4 <HAL_GetTick>
 8000cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cae:	e008      	b.n	8000cc2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cb0:	f7ff fb10 	bl	80002d4 <HAL_GetTick>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d901      	bls.n	8000cc2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	e15a      	b.n	8000f78 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d0f0      	beq.n	8000cb0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000cce:	2001      	movs	r0, #1
 8000cd0:	f000 fada 	bl	8001288 <RCC_Delay>
 8000cd4:	e01c      	b.n	8000d10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <HAL_RCC_OscConfig+0x274>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cdc:	f7ff fafa 	bl	80002d4 <HAL_GetTick>
 8000ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ce2:	e00f      	b.n	8000d04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ce4:	f7ff faf6 	bl	80002d4 <HAL_GetTick>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d908      	bls.n	8000d04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	e140      	b.n	8000f78 <HAL_RCC_OscConfig+0x4ec>
 8000cf6:	bf00      	nop
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	42420000 	.word	0x42420000
 8000d00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d04:	4b9e      	ldr	r3, [pc, #632]	; (8000f80 <HAL_RCC_OscConfig+0x4f4>)
 8000d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d08:	f003 0302 	and.w	r3, r3, #2
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d1e9      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f003 0304 	and.w	r3, r3, #4
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	f000 80a6 	beq.w	8000e6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d22:	4b97      	ldr	r3, [pc, #604]	; (8000f80 <HAL_RCC_OscConfig+0x4f4>)
 8000d24:	69db      	ldr	r3, [r3, #28]
 8000d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d10d      	bne.n	8000d4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d2e:	4b94      	ldr	r3, [pc, #592]	; (8000f80 <HAL_RCC_OscConfig+0x4f4>)
 8000d30:	69db      	ldr	r3, [r3, #28]
 8000d32:	4a93      	ldr	r2, [pc, #588]	; (8000f80 <HAL_RCC_OscConfig+0x4f4>)
 8000d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d38:	61d3      	str	r3, [r2, #28]
 8000d3a:	4b91      	ldr	r3, [pc, #580]	; (8000f80 <HAL_RCC_OscConfig+0x4f4>)
 8000d3c:	69db      	ldr	r3, [r3, #28]
 8000d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d46:	2301      	movs	r3, #1
 8000d48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d4a:	4b8e      	ldr	r3, [pc, #568]	; (8000f84 <HAL_RCC_OscConfig+0x4f8>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d118      	bne.n	8000d88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d56:	4b8b      	ldr	r3, [pc, #556]	; (8000f84 <HAL_RCC_OscConfig+0x4f8>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a8a      	ldr	r2, [pc, #552]	; (8000f84 <HAL_RCC_OscConfig+0x4f8>)
 8000d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d62:	f7ff fab7 	bl	80002d4 <HAL_GetTick>
 8000d66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d68:	e008      	b.n	8000d7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d6a:	f7ff fab3 	bl	80002d4 <HAL_GetTick>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	2b64      	cmp	r3, #100	; 0x64
 8000d76:	d901      	bls.n	8000d7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	e0fd      	b.n	8000f78 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d7c:	4b81      	ldr	r3, [pc, #516]	; (8000f84 <HAL_RCC_OscConfig+0x4f8>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d0f0      	beq.n	8000d6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d106      	bne.n	8000d9e <HAL_RCC_OscConfig+0x312>
 8000d90:	4b7b      	ldr	r3, [pc, #492]	; (8000f80 <HAL_RCC_OscConfig+0x4f4>)
 8000d92:	6a1b      	ldr	r3, [r3, #32]
 8000d94:	4a7a      	ldr	r2, [pc, #488]	; (8000f80 <HAL_RCC_OscConfig+0x4f4>)
 8000d96:	f043 0301 	orr.w	r3, r3, #1
 8000d9a:	6213      	str	r3, [r2, #32]
 8000d9c:	e02d      	b.n	8000dfa <HAL_RCC_OscConfig+0x36e>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d10c      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x334>
 8000da6:	4b76      	ldr	r3, [pc, #472]	; (8000f80 <HAL_RCC_OscConfig+0x4f4>)
 8000da8:	6a1b      	ldr	r3, [r3, #32]
 8000daa:	4a75      	ldr	r2, [pc, #468]	; (8000f80 <HAL_RCC_OscConfig+0x4f4>)
 8000dac:	f023 0301 	bic.w	r3, r3, #1
 8000db0:	6213      	str	r3, [r2, #32]
 8000db2:	4b73      	ldr	r3, [pc, #460]	; (8000f80 <HAL_RCC_OscConfig+0x4f4>)
 8000db4:	6a1b      	ldr	r3, [r3, #32]
 8000db6:	4a72      	ldr	r2, [pc, #456]	; (8000f80 <HAL_RCC_OscConfig+0x4f4>)
 8000db8:	f023 0304 	bic.w	r3, r3, #4
 8000dbc:	6213      	str	r3, [r2, #32]
 8000dbe:	e01c      	b.n	8000dfa <HAL_RCC_OscConfig+0x36e>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	2b05      	cmp	r3, #5
 8000dc6:	d10c      	bne.n	8000de2 <HAL_RCC_OscConfig+0x356>
 8000dc8:	4b6d      	ldr	r3, [pc, #436]	; (8000f80 <HAL_RCC_OscConfig+0x4f4>)
 8000dca:	6a1b      	ldr	r3, [r3, #32]
 8000dcc:	4a6c      	ldr	r2, [pc, #432]	; (8000f80 <HAL_RCC_OscConfig+0x4f4>)
 8000dce:	f043 0304 	orr.w	r3, r3, #4
 8000dd2:	6213      	str	r3, [r2, #32]
 8000dd4:	4b6a      	ldr	r3, [pc, #424]	; (8000f80 <HAL_RCC_OscConfig+0x4f4>)
 8000dd6:	6a1b      	ldr	r3, [r3, #32]
 8000dd8:	4a69      	ldr	r2, [pc, #420]	; (8000f80 <HAL_RCC_OscConfig+0x4f4>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	6213      	str	r3, [r2, #32]
 8000de0:	e00b      	b.n	8000dfa <HAL_RCC_OscConfig+0x36e>
 8000de2:	4b67      	ldr	r3, [pc, #412]	; (8000f80 <HAL_RCC_OscConfig+0x4f4>)
 8000de4:	6a1b      	ldr	r3, [r3, #32]
 8000de6:	4a66      	ldr	r2, [pc, #408]	; (8000f80 <HAL_RCC_OscConfig+0x4f4>)
 8000de8:	f023 0301 	bic.w	r3, r3, #1
 8000dec:	6213      	str	r3, [r2, #32]
 8000dee:	4b64      	ldr	r3, [pc, #400]	; (8000f80 <HAL_RCC_OscConfig+0x4f4>)
 8000df0:	6a1b      	ldr	r3, [r3, #32]
 8000df2:	4a63      	ldr	r2, [pc, #396]	; (8000f80 <HAL_RCC_OscConfig+0x4f4>)
 8000df4:	f023 0304 	bic.w	r3, r3, #4
 8000df8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	68db      	ldr	r3, [r3, #12]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d015      	beq.n	8000e2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e02:	f7ff fa67 	bl	80002d4 <HAL_GetTick>
 8000e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e08:	e00a      	b.n	8000e20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e0a:	f7ff fa63 	bl	80002d4 <HAL_GetTick>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d901      	bls.n	8000e20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	e0ab      	b.n	8000f78 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e20:	4b57      	ldr	r3, [pc, #348]	; (8000f80 <HAL_RCC_OscConfig+0x4f4>)
 8000e22:	6a1b      	ldr	r3, [r3, #32]
 8000e24:	f003 0302 	and.w	r3, r3, #2
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d0ee      	beq.n	8000e0a <HAL_RCC_OscConfig+0x37e>
 8000e2c:	e014      	b.n	8000e58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e2e:	f7ff fa51 	bl	80002d4 <HAL_GetTick>
 8000e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e34:	e00a      	b.n	8000e4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e36:	f7ff fa4d 	bl	80002d4 <HAL_GetTick>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	1ad3      	subs	r3, r2, r3
 8000e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d901      	bls.n	8000e4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	e095      	b.n	8000f78 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e4c:	4b4c      	ldr	r3, [pc, #304]	; (8000f80 <HAL_RCC_OscConfig+0x4f4>)
 8000e4e:	6a1b      	ldr	r3, [r3, #32]
 8000e50:	f003 0302 	and.w	r3, r3, #2
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d1ee      	bne.n	8000e36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000e58:	7dfb      	ldrb	r3, [r7, #23]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d105      	bne.n	8000e6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e5e:	4b48      	ldr	r3, [pc, #288]	; (8000f80 <HAL_RCC_OscConfig+0x4f4>)
 8000e60:	69db      	ldr	r3, [r3, #28]
 8000e62:	4a47      	ldr	r2, [pc, #284]	; (8000f80 <HAL_RCC_OscConfig+0x4f4>)
 8000e64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f000 8081 	beq.w	8000f76 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e74:	4b42      	ldr	r3, [pc, #264]	; (8000f80 <HAL_RCC_OscConfig+0x4f4>)
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 030c 	and.w	r3, r3, #12
 8000e7c:	2b08      	cmp	r3, #8
 8000e7e:	d061      	beq.n	8000f44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	69db      	ldr	r3, [r3, #28]
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d146      	bne.n	8000f16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e88:	4b3f      	ldr	r3, [pc, #252]	; (8000f88 <HAL_RCC_OscConfig+0x4fc>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e8e:	f7ff fa21 	bl	80002d4 <HAL_GetTick>
 8000e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e94:	e008      	b.n	8000ea8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e96:	f7ff fa1d 	bl	80002d4 <HAL_GetTick>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d901      	bls.n	8000ea8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	e067      	b.n	8000f78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ea8:	4b35      	ldr	r3, [pc, #212]	; (8000f80 <HAL_RCC_OscConfig+0x4f4>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d1f0      	bne.n	8000e96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6a1b      	ldr	r3, [r3, #32]
 8000eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ebc:	d108      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ebe:	4b30      	ldr	r3, [pc, #192]	; (8000f80 <HAL_RCC_OscConfig+0x4f4>)
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	492d      	ldr	r1, [pc, #180]	; (8000f80 <HAL_RCC_OscConfig+0x4f4>)
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ed0:	4b2b      	ldr	r3, [pc, #172]	; (8000f80 <HAL_RCC_OscConfig+0x4f4>)
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6a19      	ldr	r1, [r3, #32]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee0:	430b      	orrs	r3, r1
 8000ee2:	4927      	ldr	r1, [pc, #156]	; (8000f80 <HAL_RCC_OscConfig+0x4f4>)
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ee8:	4b27      	ldr	r3, [pc, #156]	; (8000f88 <HAL_RCC_OscConfig+0x4fc>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eee:	f7ff f9f1 	bl	80002d4 <HAL_GetTick>
 8000ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ef4:	e008      	b.n	8000f08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ef6:	f7ff f9ed 	bl	80002d4 <HAL_GetTick>
 8000efa:	4602      	mov	r2, r0
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d901      	bls.n	8000f08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000f04:	2303      	movs	r3, #3
 8000f06:	e037      	b.n	8000f78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f08:	4b1d      	ldr	r3, [pc, #116]	; (8000f80 <HAL_RCC_OscConfig+0x4f4>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d0f0      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x46a>
 8000f14:	e02f      	b.n	8000f76 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f16:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <HAL_RCC_OscConfig+0x4fc>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f1c:	f7ff f9da 	bl	80002d4 <HAL_GetTick>
 8000f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f22:	e008      	b.n	8000f36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f24:	f7ff f9d6 	bl	80002d4 <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d901      	bls.n	8000f36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000f32:	2303      	movs	r3, #3
 8000f34:	e020      	b.n	8000f78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f36:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <HAL_RCC_OscConfig+0x4f4>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d1f0      	bne.n	8000f24 <HAL_RCC_OscConfig+0x498>
 8000f42:	e018      	b.n	8000f76 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	69db      	ldr	r3, [r3, #28]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d101      	bne.n	8000f50 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e013      	b.n	8000f78 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000f50:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <HAL_RCC_OscConfig+0x4f4>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6a1b      	ldr	r3, [r3, #32]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d106      	bne.n	8000f72 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d001      	beq.n	8000f76 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e000      	b.n	8000f78 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000f76:	2300      	movs	r3, #0
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40021000 	.word	0x40021000
 8000f84:	40007000 	.word	0x40007000
 8000f88:	42420060 	.word	0x42420060

08000f8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d101      	bne.n	8000fa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e0d0      	b.n	8001142 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000fa0:	4b6a      	ldr	r3, [pc, #424]	; (800114c <HAL_RCC_ClockConfig+0x1c0>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 0307 	and.w	r3, r3, #7
 8000fa8:	683a      	ldr	r2, [r7, #0]
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d910      	bls.n	8000fd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fae:	4b67      	ldr	r3, [pc, #412]	; (800114c <HAL_RCC_ClockConfig+0x1c0>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f023 0207 	bic.w	r2, r3, #7
 8000fb6:	4965      	ldr	r1, [pc, #404]	; (800114c <HAL_RCC_ClockConfig+0x1c0>)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fbe:	4b63      	ldr	r3, [pc, #396]	; (800114c <HAL_RCC_ClockConfig+0x1c0>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	683a      	ldr	r2, [r7, #0]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d001      	beq.n	8000fd0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e0b8      	b.n	8001142 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d020      	beq.n	800101e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 0304 	and.w	r3, r3, #4
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d005      	beq.n	8000ff4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fe8:	4b59      	ldr	r3, [pc, #356]	; (8001150 <HAL_RCC_ClockConfig+0x1c4>)
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	4a58      	ldr	r2, [pc, #352]	; (8001150 <HAL_RCC_ClockConfig+0x1c4>)
 8000fee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000ff2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 0308 	and.w	r3, r3, #8
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d005      	beq.n	800100c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001000:	4b53      	ldr	r3, [pc, #332]	; (8001150 <HAL_RCC_ClockConfig+0x1c4>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	4a52      	ldr	r2, [pc, #328]	; (8001150 <HAL_RCC_ClockConfig+0x1c4>)
 8001006:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800100a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800100c:	4b50      	ldr	r3, [pc, #320]	; (8001150 <HAL_RCC_ClockConfig+0x1c4>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	494d      	ldr	r1, [pc, #308]	; (8001150 <HAL_RCC_ClockConfig+0x1c4>)
 800101a:	4313      	orrs	r3, r2
 800101c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	2b00      	cmp	r3, #0
 8001028:	d040      	beq.n	80010ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d107      	bne.n	8001042 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001032:	4b47      	ldr	r3, [pc, #284]	; (8001150 <HAL_RCC_ClockConfig+0x1c4>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d115      	bne.n	800106a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e07f      	b.n	8001142 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	2b02      	cmp	r3, #2
 8001048:	d107      	bne.n	800105a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800104a:	4b41      	ldr	r3, [pc, #260]	; (8001150 <HAL_RCC_ClockConfig+0x1c4>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d109      	bne.n	800106a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e073      	b.n	8001142 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800105a:	4b3d      	ldr	r3, [pc, #244]	; (8001150 <HAL_RCC_ClockConfig+0x1c4>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e06b      	b.n	8001142 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800106a:	4b39      	ldr	r3, [pc, #228]	; (8001150 <HAL_RCC_ClockConfig+0x1c4>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f023 0203 	bic.w	r2, r3, #3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	4936      	ldr	r1, [pc, #216]	; (8001150 <HAL_RCC_ClockConfig+0x1c4>)
 8001078:	4313      	orrs	r3, r2
 800107a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800107c:	f7ff f92a 	bl	80002d4 <HAL_GetTick>
 8001080:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001082:	e00a      	b.n	800109a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001084:	f7ff f926 	bl	80002d4 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001092:	4293      	cmp	r3, r2
 8001094:	d901      	bls.n	800109a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001096:	2303      	movs	r3, #3
 8001098:	e053      	b.n	8001142 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800109a:	4b2d      	ldr	r3, [pc, #180]	; (8001150 <HAL_RCC_ClockConfig+0x1c4>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f003 020c 	and.w	r2, r3, #12
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d1eb      	bne.n	8001084 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80010ac:	4b27      	ldr	r3, [pc, #156]	; (800114c <HAL_RCC_ClockConfig+0x1c0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0307 	and.w	r3, r3, #7
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d210      	bcs.n	80010dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ba:	4b24      	ldr	r3, [pc, #144]	; (800114c <HAL_RCC_ClockConfig+0x1c0>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f023 0207 	bic.w	r2, r3, #7
 80010c2:	4922      	ldr	r1, [pc, #136]	; (800114c <HAL_RCC_ClockConfig+0x1c0>)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ca:	4b20      	ldr	r3, [pc, #128]	; (800114c <HAL_RCC_ClockConfig+0x1c0>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	683a      	ldr	r2, [r7, #0]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d001      	beq.n	80010dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e032      	b.n	8001142 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 0304 	and.w	r3, r3, #4
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d008      	beq.n	80010fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010e8:	4b19      	ldr	r3, [pc, #100]	; (8001150 <HAL_RCC_ClockConfig+0x1c4>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	4916      	ldr	r1, [pc, #88]	; (8001150 <HAL_RCC_ClockConfig+0x1c4>)
 80010f6:	4313      	orrs	r3, r2
 80010f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0308 	and.w	r3, r3, #8
 8001102:	2b00      	cmp	r3, #0
 8001104:	d009      	beq.n	800111a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001106:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_RCC_ClockConfig+0x1c4>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	691b      	ldr	r3, [r3, #16]
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	490e      	ldr	r1, [pc, #56]	; (8001150 <HAL_RCC_ClockConfig+0x1c4>)
 8001116:	4313      	orrs	r3, r2
 8001118:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800111a:	f000 f821 	bl	8001160 <HAL_RCC_GetSysClockFreq>
 800111e:	4601      	mov	r1, r0
 8001120:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <HAL_RCC_ClockConfig+0x1c4>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	091b      	lsrs	r3, r3, #4
 8001126:	f003 030f 	and.w	r3, r3, #15
 800112a:	4a0a      	ldr	r2, [pc, #40]	; (8001154 <HAL_RCC_ClockConfig+0x1c8>)
 800112c:	5cd3      	ldrb	r3, [r2, r3]
 800112e:	fa21 f303 	lsr.w	r3, r1, r3
 8001132:	4a09      	ldr	r2, [pc, #36]	; (8001158 <HAL_RCC_ClockConfig+0x1cc>)
 8001134:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <HAL_RCC_ClockConfig+0x1d0>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff f888 	bl	8000250 <HAL_InitTick>

  return HAL_OK;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40022000 	.word	0x40022000
 8001150:	40021000 	.word	0x40021000
 8001154:	08004058 	.word	0x08004058
 8001158:	2000000c 	.word	0x2000000c
 800115c:	20000000 	.word	0x20000000

08001160 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001160:	b490      	push	{r4, r7}
 8001162:	b08a      	sub	sp, #40	; 0x28
 8001164:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001166:	4b2a      	ldr	r3, [pc, #168]	; (8001210 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001168:	1d3c      	adds	r4, r7, #4
 800116a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800116c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001170:	4b28      	ldr	r3, [pc, #160]	; (8001214 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
 800117a:	2300      	movs	r3, #0
 800117c:	61bb      	str	r3, [r7, #24]
 800117e:	2300      	movs	r3, #0
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001186:	2300      	movs	r3, #0
 8001188:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800118a:	4b23      	ldr	r3, [pc, #140]	; (8001218 <HAL_RCC_GetSysClockFreq+0xb8>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f003 030c 	and.w	r3, r3, #12
 8001196:	2b04      	cmp	r3, #4
 8001198:	d002      	beq.n	80011a0 <HAL_RCC_GetSysClockFreq+0x40>
 800119a:	2b08      	cmp	r3, #8
 800119c:	d003      	beq.n	80011a6 <HAL_RCC_GetSysClockFreq+0x46>
 800119e:	e02d      	b.n	80011fc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80011a0:	4b1e      	ldr	r3, [pc, #120]	; (800121c <HAL_RCC_GetSysClockFreq+0xbc>)
 80011a2:	623b      	str	r3, [r7, #32]
      break;
 80011a4:	e02d      	b.n	8001202 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	0c9b      	lsrs	r3, r3, #18
 80011aa:	f003 030f 	and.w	r3, r3, #15
 80011ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80011b2:	4413      	add	r3, r2
 80011b4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80011b8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d013      	beq.n	80011ec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011c4:	4b14      	ldr	r3, [pc, #80]	; (8001218 <HAL_RCC_GetSysClockFreq+0xb8>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	0c5b      	lsrs	r3, r3, #17
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80011d2:	4413      	add	r3, r2
 80011d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80011d8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	4a0f      	ldr	r2, [pc, #60]	; (800121c <HAL_RCC_GetSysClockFreq+0xbc>)
 80011de:	fb02 f203 	mul.w	r2, r2, r3
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
 80011ea:	e004      	b.n	80011f6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	4a0c      	ldr	r2, [pc, #48]	; (8001220 <HAL_RCC_GetSysClockFreq+0xc0>)
 80011f0:	fb02 f303 	mul.w	r3, r2, r3
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80011f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f8:	623b      	str	r3, [r7, #32]
      break;
 80011fa:	e002      	b.n	8001202 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80011fc:	4b07      	ldr	r3, [pc, #28]	; (800121c <HAL_RCC_GetSysClockFreq+0xbc>)
 80011fe:	623b      	str	r3, [r7, #32]
      break;
 8001200:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001202:	6a3b      	ldr	r3, [r7, #32]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3728      	adds	r7, #40	; 0x28
 8001208:	46bd      	mov	sp, r7
 800120a:	bc90      	pop	{r4, r7}
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	0800403c 	.word	0x0800403c
 8001214:	0800404c 	.word	0x0800404c
 8001218:	40021000 	.word	0x40021000
 800121c:	007a1200 	.word	0x007a1200
 8001220:	003d0900 	.word	0x003d0900

08001224 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001228:	4b02      	ldr	r3, [pc, #8]	; (8001234 <HAL_RCC_GetHCLKFreq+0x10>)
 800122a:	681b      	ldr	r3, [r3, #0]
}
 800122c:	4618      	mov	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr
 8001234:	2000000c 	.word	0x2000000c

08001238 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800123c:	f7ff fff2 	bl	8001224 <HAL_RCC_GetHCLKFreq>
 8001240:	4601      	mov	r1, r0
 8001242:	4b05      	ldr	r3, [pc, #20]	; (8001258 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	0a1b      	lsrs	r3, r3, #8
 8001248:	f003 0307 	and.w	r3, r3, #7
 800124c:	4a03      	ldr	r2, [pc, #12]	; (800125c <HAL_RCC_GetPCLK1Freq+0x24>)
 800124e:	5cd3      	ldrb	r3, [r2, r3]
 8001250:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001254:	4618      	mov	r0, r3
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40021000 	.word	0x40021000
 800125c:	08004068 	.word	0x08004068

08001260 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001264:	f7ff ffde 	bl	8001224 <HAL_RCC_GetHCLKFreq>
 8001268:	4601      	mov	r1, r0
 800126a:	4b05      	ldr	r3, [pc, #20]	; (8001280 <HAL_RCC_GetPCLK2Freq+0x20>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	0adb      	lsrs	r3, r3, #11
 8001270:	f003 0307 	and.w	r3, r3, #7
 8001274:	4a03      	ldr	r2, [pc, #12]	; (8001284 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001276:	5cd3      	ldrb	r3, [r2, r3]
 8001278:	fa21 f303 	lsr.w	r3, r1, r3
}
 800127c:	4618      	mov	r0, r3
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40021000 	.word	0x40021000
 8001284:	08004068 	.word	0x08004068

08001288 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001290:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <RCC_Delay+0x34>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <RCC_Delay+0x38>)
 8001296:	fba2 2303 	umull	r2, r3, r2, r3
 800129a:	0a5b      	lsrs	r3, r3, #9
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	fb02 f303 	mul.w	r3, r2, r3
 80012a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80012a4:	bf00      	nop
  }
  while (Delay --);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	1e5a      	subs	r2, r3, #1
 80012aa:	60fa      	str	r2, [r7, #12]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1f9      	bne.n	80012a4 <RCC_Delay+0x1c>
}
 80012b0:	bf00      	nop
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	2000000c 	.word	0x2000000c
 80012c0:	10624dd3 	.word	0x10624dd3

080012c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d101      	bne.n	80012d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e01d      	b.n	8001312 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d106      	bne.n	80012f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f002 f882 	bl	80033f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2202      	movs	r2, #2
 80012f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3304      	adds	r3, #4
 8001300:	4619      	mov	r1, r3
 8001302:	4610      	mov	r0, r2
 8001304:	f000 fc56 	bl	8001bb4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2201      	movs	r2, #1
 800130c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800131a:	b480      	push	{r7}
 800131c:	b085      	sub	sp, #20
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	68da      	ldr	r2, [r3, #12]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f042 0201 	orr.w	r2, r2, #1
 8001330:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f003 0307 	and.w	r3, r3, #7
 800133c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2b06      	cmp	r3, #6
 8001342:	d007      	beq.n	8001354 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f042 0201 	orr.w	r2, r2, #1
 8001352:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3714      	adds	r7, #20
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr

08001360 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e01d      	b.n	80013ae <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	d106      	bne.n	800138c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f000 f815 	bl	80013b6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2202      	movs	r2, #2
 8001390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3304      	adds	r3, #4
 800139c:	4619      	mov	r1, r3
 800139e:	4610      	mov	r0, r2
 80013a0:	f000 fc08 	bl	8001bb4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2201      	movs	r2, #1
 80013a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b083      	sub	sp, #12
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr

080013c8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	2b0c      	cmp	r3, #12
 80013d6:	d841      	bhi.n	800145c <HAL_TIM_OC_Start_IT+0x94>
 80013d8:	a201      	add	r2, pc, #4	; (adr r2, 80013e0 <HAL_TIM_OC_Start_IT+0x18>)
 80013da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013de:	bf00      	nop
 80013e0:	08001415 	.word	0x08001415
 80013e4:	0800145d 	.word	0x0800145d
 80013e8:	0800145d 	.word	0x0800145d
 80013ec:	0800145d 	.word	0x0800145d
 80013f0:	08001427 	.word	0x08001427
 80013f4:	0800145d 	.word	0x0800145d
 80013f8:	0800145d 	.word	0x0800145d
 80013fc:	0800145d 	.word	0x0800145d
 8001400:	08001439 	.word	0x08001439
 8001404:	0800145d 	.word	0x0800145d
 8001408:	0800145d 	.word	0x0800145d
 800140c:	0800145d 	.word	0x0800145d
 8001410:	0800144b 	.word	0x0800144b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	68da      	ldr	r2, [r3, #12]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f042 0202 	orr.w	r2, r2, #2
 8001422:	60da      	str	r2, [r3, #12]
      break;
 8001424:	e01b      	b.n	800145e <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	68da      	ldr	r2, [r3, #12]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f042 0204 	orr.w	r2, r2, #4
 8001434:	60da      	str	r2, [r3, #12]
      break;
 8001436:	e012      	b.n	800145e <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	68da      	ldr	r2, [r3, #12]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f042 0208 	orr.w	r2, r2, #8
 8001446:	60da      	str	r2, [r3, #12]
      break;
 8001448:	e009      	b.n	800145e <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	68da      	ldr	r2, [r3, #12]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f042 0210 	orr.w	r2, r2, #16
 8001458:	60da      	str	r2, [r3, #12]
      break;
 800145a:	e000      	b.n	800145e <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 800145c:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2201      	movs	r2, #1
 8001464:	6839      	ldr	r1, [r7, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f000 fe60 	bl	800212c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a15      	ldr	r2, [pc, #84]	; (80014c8 <HAL_TIM_OC_Start_IT+0x100>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d004      	beq.n	8001480 <HAL_TIM_OC_Start_IT+0xb8>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a14      	ldr	r2, [pc, #80]	; (80014cc <HAL_TIM_OC_Start_IT+0x104>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d101      	bne.n	8001484 <HAL_TIM_OC_Start_IT+0xbc>
 8001480:	2301      	movs	r3, #1
 8001482:	e000      	b.n	8001486 <HAL_TIM_OC_Start_IT+0xbe>
 8001484:	2300      	movs	r3, #0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d007      	beq.n	800149a <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001498:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f003 0307 	and.w	r3, r3, #7
 80014a4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2b06      	cmp	r3, #6
 80014aa:	d007      	beq.n	80014bc <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f042 0201 	orr.w	r2, r2, #1
 80014ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40012c00 	.word	0x40012c00
 80014cc:	40013400 	.word	0x40013400

080014d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d101      	bne.n	80014e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e01d      	b.n	800151e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d106      	bne.n	80014fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 f815 	bl	8001526 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2202      	movs	r2, #2
 8001500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3304      	adds	r3, #4
 800150c:	4619      	mov	r1, r3
 800150e:	4610      	mov	r0, r2
 8001510:	f000 fb50 	bl	8001bb4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2201      	movs	r2, #1
 8001518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001526:	b480      	push	{r7}
 8001528:	b083      	sub	sp, #12
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr

08001538 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2201      	movs	r2, #1
 8001548:	6839      	ldr	r1, [r7, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f000 fdee 	bl	800212c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a15      	ldr	r2, [pc, #84]	; (80015ac <HAL_TIM_PWM_Start+0x74>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d004      	beq.n	8001564 <HAL_TIM_PWM_Start+0x2c>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a14      	ldr	r2, [pc, #80]	; (80015b0 <HAL_TIM_PWM_Start+0x78>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d101      	bne.n	8001568 <HAL_TIM_PWM_Start+0x30>
 8001564:	2301      	movs	r3, #1
 8001566:	e000      	b.n	800156a <HAL_TIM_PWM_Start+0x32>
 8001568:	2300      	movs	r3, #0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d007      	beq.n	800157e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800157c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f003 0307 	and.w	r3, r3, #7
 8001588:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2b06      	cmp	r3, #6
 800158e:	d007      	beq.n	80015a0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f042 0201 	orr.w	r2, r2, #1
 800159e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40012c00 	.word	0x40012c00
 80015b0:	40013400 	.word	0x40013400

080015b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d122      	bne.n	8001610 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d11b      	bne.n	8001610 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f06f 0202 	mvn.w	r2, #2
 80015e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2201      	movs	r2, #1
 80015e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	f003 0303 	and.w	r3, r3, #3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 fac1 	bl	8001b7e <HAL_TIM_IC_CaptureCallback>
 80015fc:	e005      	b.n	800160a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f001 fc04 	bl	8002e0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f000 fac3 	bl	8001b90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	f003 0304 	and.w	r3, r3, #4
 800161a:	2b04      	cmp	r3, #4
 800161c:	d122      	bne.n	8001664 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	2b04      	cmp	r3, #4
 800162a:	d11b      	bne.n	8001664 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f06f 0204 	mvn.w	r2, #4
 8001634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2202      	movs	r2, #2
 800163a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f000 fa97 	bl	8001b7e <HAL_TIM_IC_CaptureCallback>
 8001650:	e005      	b.n	800165e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f001 fbda 	bl	8002e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 fa99 	bl	8001b90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	f003 0308 	and.w	r3, r3, #8
 800166e:	2b08      	cmp	r3, #8
 8001670:	d122      	bne.n	80016b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	f003 0308 	and.w	r3, r3, #8
 800167c:	2b08      	cmp	r3, #8
 800167e:	d11b      	bne.n	80016b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f06f 0208 	mvn.w	r2, #8
 8001688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2204      	movs	r2, #4
 800168e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	f003 0303 	and.w	r3, r3, #3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 fa6d 	bl	8001b7e <HAL_TIM_IC_CaptureCallback>
 80016a4:	e005      	b.n	80016b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f001 fbb0 	bl	8002e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f000 fa6f 	bl	8001b90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	f003 0310 	and.w	r3, r3, #16
 80016c2:	2b10      	cmp	r3, #16
 80016c4:	d122      	bne.n	800170c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	f003 0310 	and.w	r3, r3, #16
 80016d0:	2b10      	cmp	r3, #16
 80016d2:	d11b      	bne.n	800170c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f06f 0210 	mvn.w	r2, #16
 80016dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2208      	movs	r2, #8
 80016e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 fa43 	bl	8001b7e <HAL_TIM_IC_CaptureCallback>
 80016f8:	e005      	b.n	8001706 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f001 fb86 	bl	8002e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 fa45 	bl	8001b90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b01      	cmp	r3, #1
 8001718:	d10e      	bne.n	8001738 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	2b01      	cmp	r3, #1
 8001726:	d107      	bne.n	8001738 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f06f 0201 	mvn.w	r2, #1
 8001730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f001 fb61 	bl	8002dfa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001742:	2b80      	cmp	r3, #128	; 0x80
 8001744:	d10e      	bne.n	8001764 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001750:	2b80      	cmp	r3, #128	; 0x80
 8001752:	d107      	bne.n	8001764 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800175c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 fda6 	bl	80022b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800176e:	2b40      	cmp	r3, #64	; 0x40
 8001770:	d10e      	bne.n	8001790 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800177c:	2b40      	cmp	r3, #64	; 0x40
 800177e:	d107      	bne.n	8001790 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 fa09 	bl	8001ba2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	f003 0320 	and.w	r3, r3, #32
 800179a:	2b20      	cmp	r3, #32
 800179c:	d10e      	bne.n	80017bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	f003 0320 	and.w	r3, r3, #32
 80017a8:	2b20      	cmp	r3, #32
 80017aa:	d107      	bne.n	80017bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f06f 0220 	mvn.w	r2, #32
 80017b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 fd71 	bl	800229e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d101      	bne.n	80017de <HAL_TIM_OC_ConfigChannel+0x1a>
 80017da:	2302      	movs	r3, #2
 80017dc:	e04e      	b.n	800187c <HAL_TIM_OC_ConfigChannel+0xb8>
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2201      	movs	r2, #1
 80017e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2202      	movs	r2, #2
 80017ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b0c      	cmp	r3, #12
 80017f2:	d839      	bhi.n	8001868 <HAL_TIM_OC_ConfigChannel+0xa4>
 80017f4:	a201      	add	r2, pc, #4	; (adr r2, 80017fc <HAL_TIM_OC_ConfigChannel+0x38>)
 80017f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017fa:	bf00      	nop
 80017fc:	08001831 	.word	0x08001831
 8001800:	08001869 	.word	0x08001869
 8001804:	08001869 	.word	0x08001869
 8001808:	08001869 	.word	0x08001869
 800180c:	0800183f 	.word	0x0800183f
 8001810:	08001869 	.word	0x08001869
 8001814:	08001869 	.word	0x08001869
 8001818:	08001869 	.word	0x08001869
 800181c:	0800184d 	.word	0x0800184d
 8001820:	08001869 	.word	0x08001869
 8001824:	08001869 	.word	0x08001869
 8001828:	08001869 	.word	0x08001869
 800182c:	0800185b 	.word	0x0800185b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68b9      	ldr	r1, [r7, #8]
 8001836:	4618      	mov	r0, r3
 8001838:	f000 fa36 	bl	8001ca8 <TIM_OC1_SetConfig>
      break;
 800183c:	e015      	b.n	800186a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	68b9      	ldr	r1, [r7, #8]
 8001844:	4618      	mov	r0, r3
 8001846:	f000 fa9f 	bl	8001d88 <TIM_OC2_SetConfig>
      break;
 800184a:	e00e      	b.n	800186a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	68b9      	ldr	r1, [r7, #8]
 8001852:	4618      	mov	r0, r3
 8001854:	f000 fb0c 	bl	8001e70 <TIM_OC3_SetConfig>
      break;
 8001858:	e007      	b.n	800186a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68b9      	ldr	r1, [r7, #8]
 8001860:	4618      	mov	r0, r3
 8001862:	f000 fb79 	bl	8001f58 <TIM_OC4_SetConfig>
      break;
 8001866:	e000      	b.n	800186a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8001868:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2201      	movs	r2, #1
 800186e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001896:	2b01      	cmp	r3, #1
 8001898:	d101      	bne.n	800189e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800189a:	2302      	movs	r3, #2
 800189c:	e0b4      	b.n	8001a08 <HAL_TIM_PWM_ConfigChannel+0x184>
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2201      	movs	r2, #1
 80018a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2202      	movs	r2, #2
 80018aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b0c      	cmp	r3, #12
 80018b2:	f200 809f 	bhi.w	80019f4 <HAL_TIM_PWM_ConfigChannel+0x170>
 80018b6:	a201      	add	r2, pc, #4	; (adr r2, 80018bc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80018b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018bc:	080018f1 	.word	0x080018f1
 80018c0:	080019f5 	.word	0x080019f5
 80018c4:	080019f5 	.word	0x080019f5
 80018c8:	080019f5 	.word	0x080019f5
 80018cc:	08001931 	.word	0x08001931
 80018d0:	080019f5 	.word	0x080019f5
 80018d4:	080019f5 	.word	0x080019f5
 80018d8:	080019f5 	.word	0x080019f5
 80018dc:	08001973 	.word	0x08001973
 80018e0:	080019f5 	.word	0x080019f5
 80018e4:	080019f5 	.word	0x080019f5
 80018e8:	080019f5 	.word	0x080019f5
 80018ec:	080019b3 	.word	0x080019b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68b9      	ldr	r1, [r7, #8]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f000 f9d6 	bl	8001ca8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	699a      	ldr	r2, [r3, #24]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 0208 	orr.w	r2, r2, #8
 800190a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	699a      	ldr	r2, [r3, #24]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f022 0204 	bic.w	r2, r2, #4
 800191a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6999      	ldr	r1, [r3, #24]
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	691a      	ldr	r2, [r3, #16]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	430a      	orrs	r2, r1
 800192c:	619a      	str	r2, [r3, #24]
      break;
 800192e:	e062      	b.n	80019f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68b9      	ldr	r1, [r7, #8]
 8001936:	4618      	mov	r0, r3
 8001938:	f000 fa26 	bl	8001d88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	699a      	ldr	r2, [r3, #24]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800194a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	699a      	ldr	r2, [r3, #24]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800195a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6999      	ldr	r1, [r3, #24]
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	021a      	lsls	r2, r3, #8
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	430a      	orrs	r2, r1
 800196e:	619a      	str	r2, [r3, #24]
      break;
 8001970:	e041      	b.n	80019f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	68b9      	ldr	r1, [r7, #8]
 8001978:	4618      	mov	r0, r3
 800197a:	f000 fa79 	bl	8001e70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	69da      	ldr	r2, [r3, #28]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f042 0208 	orr.w	r2, r2, #8
 800198c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	69da      	ldr	r2, [r3, #28]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 0204 	bic.w	r2, r2, #4
 800199c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	69d9      	ldr	r1, [r3, #28]
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	691a      	ldr	r2, [r3, #16]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	61da      	str	r2, [r3, #28]
      break;
 80019b0:	e021      	b.n	80019f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	68b9      	ldr	r1, [r7, #8]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f000 facd 	bl	8001f58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	69da      	ldr	r2, [r3, #28]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	69da      	ldr	r2, [r3, #28]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	69d9      	ldr	r1, [r3, #28]
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	021a      	lsls	r2, r3, #8
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	430a      	orrs	r2, r1
 80019f0:	61da      	str	r2, [r3, #28]
      break;
 80019f2:	e000      	b.n	80019f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80019f4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d101      	bne.n	8001a28 <HAL_TIM_ConfigClockSource+0x18>
 8001a24:	2302      	movs	r3, #2
 8001a26:	e0a6      	b.n	8001b76 <HAL_TIM_ConfigClockSource+0x166>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2202      	movs	r2, #2
 8001a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001a46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b40      	cmp	r3, #64	; 0x40
 8001a5e:	d067      	beq.n	8001b30 <HAL_TIM_ConfigClockSource+0x120>
 8001a60:	2b40      	cmp	r3, #64	; 0x40
 8001a62:	d80b      	bhi.n	8001a7c <HAL_TIM_ConfigClockSource+0x6c>
 8001a64:	2b10      	cmp	r3, #16
 8001a66:	d073      	beq.n	8001b50 <HAL_TIM_ConfigClockSource+0x140>
 8001a68:	2b10      	cmp	r3, #16
 8001a6a:	d802      	bhi.n	8001a72 <HAL_TIM_ConfigClockSource+0x62>
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d06f      	beq.n	8001b50 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001a70:	e078      	b.n	8001b64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001a72:	2b20      	cmp	r3, #32
 8001a74:	d06c      	beq.n	8001b50 <HAL_TIM_ConfigClockSource+0x140>
 8001a76:	2b30      	cmp	r3, #48	; 0x30
 8001a78:	d06a      	beq.n	8001b50 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001a7a:	e073      	b.n	8001b64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001a7c:	2b70      	cmp	r3, #112	; 0x70
 8001a7e:	d00d      	beq.n	8001a9c <HAL_TIM_ConfigClockSource+0x8c>
 8001a80:	2b70      	cmp	r3, #112	; 0x70
 8001a82:	d804      	bhi.n	8001a8e <HAL_TIM_ConfigClockSource+0x7e>
 8001a84:	2b50      	cmp	r3, #80	; 0x50
 8001a86:	d033      	beq.n	8001af0 <HAL_TIM_ConfigClockSource+0xe0>
 8001a88:	2b60      	cmp	r3, #96	; 0x60
 8001a8a:	d041      	beq.n	8001b10 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001a8c:	e06a      	b.n	8001b64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a92:	d066      	beq.n	8001b62 <HAL_TIM_ConfigClockSource+0x152>
 8001a94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a98:	d017      	beq.n	8001aca <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001a9a:	e063      	b.n	8001b64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6818      	ldr	r0, [r3, #0]
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	6899      	ldr	r1, [r3, #8]
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	f000 fb1f 	bl	80020ee <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001abe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	609a      	str	r2, [r3, #8]
      break;
 8001ac8:	e04c      	b.n	8001b64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6818      	ldr	r0, [r3, #0]
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	6899      	ldr	r1, [r3, #8]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	f000 fb08 	bl	80020ee <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001aec:	609a      	str	r2, [r3, #8]
      break;
 8001aee:	e039      	b.n	8001b64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6818      	ldr	r0, [r3, #0]
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	6859      	ldr	r1, [r3, #4]
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	461a      	mov	r2, r3
 8001afe:	f000 fa7f 	bl	8002000 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2150      	movs	r1, #80	; 0x50
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f000 fad6 	bl	80020ba <TIM_ITRx_SetConfig>
      break;
 8001b0e:	e029      	b.n	8001b64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6818      	ldr	r0, [r3, #0]
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	6859      	ldr	r1, [r3, #4]
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	f000 fa9d 	bl	800205c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2160      	movs	r1, #96	; 0x60
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f000 fac6 	bl	80020ba <TIM_ITRx_SetConfig>
      break;
 8001b2e:	e019      	b.n	8001b64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6818      	ldr	r0, [r3, #0]
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	6859      	ldr	r1, [r3, #4]
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	f000 fa5f 	bl	8002000 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2140      	movs	r1, #64	; 0x40
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f000 fab6 	bl	80020ba <TIM_ITRx_SetConfig>
      break;
 8001b4e:	e009      	b.n	8001b64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4610      	mov	r0, r2
 8001b5c:	f000 faad 	bl	80020ba <TIM_ITRx_SetConfig>
      break;
 8001b60:	e000      	b.n	8001b64 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001b62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr

08001b90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr

08001ba2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr

08001bb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a33      	ldr	r2, [pc, #204]	; (8001c94 <TIM_Base_SetConfig+0xe0>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d013      	beq.n	8001bf4 <TIM_Base_SetConfig+0x40>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a32      	ldr	r2, [pc, #200]	; (8001c98 <TIM_Base_SetConfig+0xe4>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d00f      	beq.n	8001bf4 <TIM_Base_SetConfig+0x40>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bda:	d00b      	beq.n	8001bf4 <TIM_Base_SetConfig+0x40>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a2f      	ldr	r2, [pc, #188]	; (8001c9c <TIM_Base_SetConfig+0xe8>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d007      	beq.n	8001bf4 <TIM_Base_SetConfig+0x40>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a2e      	ldr	r2, [pc, #184]	; (8001ca0 <TIM_Base_SetConfig+0xec>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d003      	beq.n	8001bf4 <TIM_Base_SetConfig+0x40>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a2d      	ldr	r2, [pc, #180]	; (8001ca4 <TIM_Base_SetConfig+0xf0>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d108      	bne.n	8001c06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a22      	ldr	r2, [pc, #136]	; (8001c94 <TIM_Base_SetConfig+0xe0>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d013      	beq.n	8001c36 <TIM_Base_SetConfig+0x82>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a21      	ldr	r2, [pc, #132]	; (8001c98 <TIM_Base_SetConfig+0xe4>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d00f      	beq.n	8001c36 <TIM_Base_SetConfig+0x82>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c1c:	d00b      	beq.n	8001c36 <TIM_Base_SetConfig+0x82>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a1e      	ldr	r2, [pc, #120]	; (8001c9c <TIM_Base_SetConfig+0xe8>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d007      	beq.n	8001c36 <TIM_Base_SetConfig+0x82>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a1d      	ldr	r2, [pc, #116]	; (8001ca0 <TIM_Base_SetConfig+0xec>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d003      	beq.n	8001c36 <TIM_Base_SetConfig+0x82>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a1c      	ldr	r2, [pc, #112]	; (8001ca4 <TIM_Base_SetConfig+0xf0>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d108      	bne.n	8001c48 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68fa      	ldr	r2, [r7, #12]
 8001c5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a09      	ldr	r2, [pc, #36]	; (8001c94 <TIM_Base_SetConfig+0xe0>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d003      	beq.n	8001c7c <TIM_Base_SetConfig+0xc8>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a08      	ldr	r2, [pc, #32]	; (8001c98 <TIM_Base_SetConfig+0xe4>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d103      	bne.n	8001c84 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	691a      	ldr	r2, [r3, #16]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	615a      	str	r2, [r3, #20]
}
 8001c8a:	bf00      	nop
 8001c8c:	3714      	adds	r7, #20
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr
 8001c94:	40012c00 	.word	0x40012c00
 8001c98:	40013400 	.word	0x40013400
 8001c9c:	40000400 	.word	0x40000400
 8001ca0:	40000800 	.word	0x40000800
 8001ca4:	40000c00 	.word	0x40000c00

08001ca8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b087      	sub	sp, #28
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	f023 0201 	bic.w	r2, r3, #1
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f023 0303 	bic.w	r3, r3, #3
 8001cde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	f023 0302 	bic.w	r3, r3, #2
 8001cf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a20      	ldr	r2, [pc, #128]	; (8001d80 <TIM_OC1_SetConfig+0xd8>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d003      	beq.n	8001d0c <TIM_OC1_SetConfig+0x64>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a1f      	ldr	r2, [pc, #124]	; (8001d84 <TIM_OC1_SetConfig+0xdc>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d10c      	bne.n	8001d26 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	f023 0308 	bic.w	r3, r3, #8
 8001d12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f023 0304 	bic.w	r3, r3, #4
 8001d24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a15      	ldr	r2, [pc, #84]	; (8001d80 <TIM_OC1_SetConfig+0xd8>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d003      	beq.n	8001d36 <TIM_OC1_SetConfig+0x8e>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a14      	ldr	r2, [pc, #80]	; (8001d84 <TIM_OC1_SetConfig+0xdc>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d111      	bne.n	8001d5a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001d44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	621a      	str	r2, [r3, #32]
}
 8001d74:	bf00      	nop
 8001d76:	371c      	adds	r7, #28
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	40012c00 	.word	0x40012c00
 8001d84:	40013400 	.word	0x40013400

08001d88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b087      	sub	sp, #28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	f023 0210 	bic.w	r2, r3, #16
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	021b      	lsls	r3, r3, #8
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	f023 0320 	bic.w	r3, r3, #32
 8001dd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	011b      	lsls	r3, r3, #4
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a21      	ldr	r2, [pc, #132]	; (8001e68 <TIM_OC2_SetConfig+0xe0>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d003      	beq.n	8001df0 <TIM_OC2_SetConfig+0x68>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a20      	ldr	r2, [pc, #128]	; (8001e6c <TIM_OC2_SetConfig+0xe4>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d10d      	bne.n	8001e0c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001df6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	011b      	lsls	r3, r3, #4
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a16      	ldr	r2, [pc, #88]	; (8001e68 <TIM_OC2_SetConfig+0xe0>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d003      	beq.n	8001e1c <TIM_OC2_SetConfig+0x94>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a15      	ldr	r2, [pc, #84]	; (8001e6c <TIM_OC2_SetConfig+0xe4>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d113      	bne.n	8001e44 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	621a      	str	r2, [r3, #32]
}
 8001e5e:	bf00      	nop
 8001e60:	371c      	adds	r7, #28
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr
 8001e68:	40012c00 	.word	0x40012c00
 8001e6c:	40013400 	.word	0x40013400

08001e70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b087      	sub	sp, #28
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a1b      	ldr	r3, [r3, #32]
 8001e8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f023 0303 	bic.w	r3, r3, #3
 8001ea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001eb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	021b      	lsls	r3, r3, #8
 8001ec0:	697a      	ldr	r2, [r7, #20]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a21      	ldr	r2, [pc, #132]	; (8001f50 <TIM_OC3_SetConfig+0xe0>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d003      	beq.n	8001ed6 <TIM_OC3_SetConfig+0x66>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a20      	ldr	r2, [pc, #128]	; (8001f54 <TIM_OC3_SetConfig+0xe4>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d10d      	bne.n	8001ef2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001edc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	021b      	lsls	r3, r3, #8
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ef0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a16      	ldr	r2, [pc, #88]	; (8001f50 <TIM_OC3_SetConfig+0xe0>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d003      	beq.n	8001f02 <TIM_OC3_SetConfig+0x92>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a15      	ldr	r2, [pc, #84]	; (8001f54 <TIM_OC3_SetConfig+0xe4>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d113      	bne.n	8001f2a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	011b      	lsls	r3, r3, #4
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	011b      	lsls	r3, r3, #4
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	621a      	str	r2, [r3, #32]
}
 8001f44:	bf00      	nop
 8001f46:	371c      	adds	r7, #28
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc80      	pop	{r7}
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	40012c00 	.word	0x40012c00
 8001f54:	40013400 	.word	0x40013400

08001f58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b087      	sub	sp, #28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	021b      	lsls	r3, r3, #8
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001fa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	031b      	lsls	r3, r3, #12
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a11      	ldr	r2, [pc, #68]	; (8001ff8 <TIM_OC4_SetConfig+0xa0>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d003      	beq.n	8001fc0 <TIM_OC4_SetConfig+0x68>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a10      	ldr	r2, [pc, #64]	; (8001ffc <TIM_OC4_SetConfig+0xa4>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d109      	bne.n	8001fd4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	019b      	lsls	r3, r3, #6
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	621a      	str	r2, [r3, #32]
}
 8001fee:	bf00      	nop
 8001ff0:	371c      	adds	r7, #28
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr
 8001ff8:	40012c00 	.word	0x40012c00
 8001ffc:	40013400 	.word	0x40013400

08002000 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002000:	b480      	push	{r7}
 8002002:	b087      	sub	sp, #28
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	f023 0201 	bic.w	r2, r3, #1
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800202a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	011b      	lsls	r3, r3, #4
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	4313      	orrs	r3, r2
 8002034:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f023 030a 	bic.w	r3, r3, #10
 800203c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	4313      	orrs	r3, r2
 8002044:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	621a      	str	r2, [r3, #32]
}
 8002052:	bf00      	nop
 8002054:	371c      	adds	r7, #28
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr

0800205c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800205c:	b480      	push	{r7}
 800205e:	b087      	sub	sp, #28
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	f023 0210 	bic.w	r2, r3, #16
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002086:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	031b      	lsls	r3, r3, #12
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	4313      	orrs	r3, r2
 8002090:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002098:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	011b      	lsls	r3, r3, #4
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	621a      	str	r2, [r3, #32]
}
 80020b0:	bf00      	nop
 80020b2:	371c      	adds	r7, #28
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bc80      	pop	{r7}
 80020b8:	4770      	bx	lr

080020ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b085      	sub	sp, #20
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
 80020c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	f043 0307 	orr.w	r3, r3, #7
 80020dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	609a      	str	r2, [r3, #8]
}
 80020e4:	bf00      	nop
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bc80      	pop	{r7}
 80020ec:	4770      	bx	lr

080020ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b087      	sub	sp, #28
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	60f8      	str	r0, [r7, #12]
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	607a      	str	r2, [r7, #4]
 80020fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002108:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	021a      	lsls	r2, r3, #8
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	431a      	orrs	r2, r3
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	4313      	orrs	r3, r2
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	4313      	orrs	r3, r2
 800211a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	609a      	str	r2, [r3, #8]
}
 8002122:	bf00      	nop
 8002124:	371c      	adds	r7, #28
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr

0800212c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800212c:	b480      	push	{r7}
 800212e:	b087      	sub	sp, #28
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	f003 031f 	and.w	r3, r3, #31
 800213e:	2201      	movs	r2, #1
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6a1a      	ldr	r2, [r3, #32]
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	43db      	mvns	r3, r3
 800214e:	401a      	ands	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6a1a      	ldr	r2, [r3, #32]
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	f003 031f 	and.w	r3, r3, #31
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	fa01 f303 	lsl.w	r3, r1, r3
 8002164:	431a      	orrs	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	621a      	str	r2, [r3, #32]
}
 800216a:	bf00      	nop
 800216c:	371c      	adds	r7, #28
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr

08002174 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002184:	2b01      	cmp	r3, #1
 8002186:	d101      	bne.n	800218c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002188:	2302      	movs	r3, #2
 800218a:	e032      	b.n	80021f2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2202      	movs	r2, #2
 8002198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021c4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68ba      	ldr	r2, [r7, #8]
 80021de:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr

080021fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002210:	2b01      	cmp	r3, #1
 8002212:	d101      	bne.n	8002218 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002214:	2302      	movs	r3, #2
 8002216:	e03d      	b.n	8002294 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	4313      	orrs	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	4313      	orrs	r3, r2
 800223a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	4313      	orrs	r3, r2
 8002248:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4313      	orrs	r3, r2
 8002256:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	4313      	orrs	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	4313      	orrs	r3, r2
 8002272:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	4313      	orrs	r3, r2
 8002280:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr

0800229e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr

080022b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	bc80      	pop	{r7}
 80022c0:	4770      	bx	lr

080022c2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e03f      	b.n	8002354 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d106      	bne.n	80022ee <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f001 f97b 	bl	80035e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2224      	movs	r2, #36	; 0x24
 80022f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68da      	ldr	r2, [r3, #12]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002304:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 fb8e 	bl	8002a28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	691a      	ldr	r2, [r3, #16]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800231a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	695a      	ldr	r2, [r3, #20]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800232a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68da      	ldr	r2, [r3, #12]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800233a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2220      	movs	r2, #32
 8002346:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2220      	movs	r2, #32
 800234e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b088      	sub	sp, #32
 8002360:	af02      	add	r7, sp, #8
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	603b      	str	r3, [r7, #0]
 8002368:	4613      	mov	r3, r2
 800236a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b20      	cmp	r3, #32
 800237a:	f040 8083 	bne.w	8002484 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d002      	beq.n	800238a <HAL_UART_Transmit+0x2e>
 8002384:	88fb      	ldrh	r3, [r7, #6]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e07b      	b.n	8002486 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002394:	2b01      	cmp	r3, #1
 8002396:	d101      	bne.n	800239c <HAL_UART_Transmit+0x40>
 8002398:	2302      	movs	r3, #2
 800239a:	e074      	b.n	8002486 <HAL_UART_Transmit+0x12a>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2221      	movs	r2, #33	; 0x21
 80023ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80023b2:	f7fd ff8f 	bl	80002d4 <HAL_GetTick>
 80023b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	88fa      	ldrh	r2, [r7, #6]
 80023bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	88fa      	ldrh	r2, [r7, #6]
 80023c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80023c4:	e042      	b.n	800244c <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	3b01      	subs	r3, #1
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023dc:	d122      	bne.n	8002424 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	2200      	movs	r2, #0
 80023e6:	2180      	movs	r1, #128	; 0x80
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f000 f9b3 	bl	8002754 <UART_WaitOnFlagUntilTimeout>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e046      	b.n	8002486 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	881b      	ldrh	r3, [r3, #0]
 8002400:	461a      	mov	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800240a:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d103      	bne.n	800241c <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	3302      	adds	r3, #2
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	e017      	b.n	800244c <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	3301      	adds	r3, #1
 8002420:	60bb      	str	r3, [r7, #8]
 8002422:	e013      	b.n	800244c <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	2200      	movs	r2, #0
 800242c:	2180      	movs	r1, #128	; 0x80
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f000 f990 	bl	8002754 <UART_WaitOnFlagUntilTimeout>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e023      	b.n	8002486 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	1c5a      	adds	r2, r3, #1
 8002442:	60ba      	str	r2, [r7, #8]
 8002444:	781a      	ldrb	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002450:	b29b      	uxth	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1b7      	bne.n	80023c6 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	2200      	movs	r2, #0
 800245e:	2140      	movs	r1, #64	; 0x40
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f000 f977 	bl	8002754 <UART_WaitOnFlagUntilTimeout>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e00a      	b.n	8002486 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2220      	movs	r2, #32
 8002474:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002480:	2300      	movs	r3, #0
 8002482:	e000      	b.n	8002486 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002484:	2302      	movs	r3, #2
  }
}
 8002486:	4618      	mov	r0, r3
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800248e:	b480      	push	{r7}
 8002490:	b085      	sub	sp, #20
 8002492:	af00      	add	r7, sp, #0
 8002494:	60f8      	str	r0, [r7, #12]
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	4613      	mov	r3, r2
 800249a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b20      	cmp	r3, #32
 80024a6:	d140      	bne.n	800252a <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d002      	beq.n	80024b4 <HAL_UART_Receive_IT+0x26>
 80024ae:	88fb      	ldrh	r3, [r7, #6]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e039      	b.n	800252c <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d101      	bne.n	80024c6 <HAL_UART_Receive_IT+0x38>
 80024c2:	2302      	movs	r3, #2
 80024c4:	e032      	b.n	800252c <HAL_UART_Receive_IT+0x9e>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	88fa      	ldrh	r2, [r7, #6]
 80024d8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	88fa      	ldrh	r2, [r7, #6]
 80024de:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2222      	movs	r2, #34	; 0x22
 80024ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68da      	ldr	r2, [r3, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002504:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695a      	ldr	r2, [r3, #20]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f042 0201 	orr.w	r2, r2, #1
 8002514:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f042 0220 	orr.w	r2, r2, #32
 8002524:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	e000      	b.n	800252c <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800252a:	2302      	movs	r3, #2
  }
}
 800252c:	4618      	mov	r0, r3
 800252e:	3714      	adds	r7, #20
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr
	...

08002538 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b088      	sub	sp, #32
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002558:	2300      	movs	r3, #0
 800255a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800255c:	2300      	movs	r3, #0
 800255e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10d      	bne.n	800258a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	f003 0320 	and.w	r3, r3, #32
 8002574:	2b00      	cmp	r3, #0
 8002576:	d008      	beq.n	800258a <HAL_UART_IRQHandler+0x52>
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	f003 0320 	and.w	r3, r3, #32
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f9ce 	bl	8002924 <UART_Receive_IT>
      return;
 8002588:	e0cc      	b.n	8002724 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80ab 	beq.w	80026e8 <HAL_UART_IRQHandler+0x1b0>
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b00      	cmp	r3, #0
 800259a:	d105      	bne.n	80025a8 <HAL_UART_IRQHandler+0x70>
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f000 80a0 	beq.w	80026e8 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00a      	beq.n	80025c8 <HAL_UART_IRQHandler+0x90>
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d005      	beq.n	80025c8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c0:	f043 0201 	orr.w	r2, r3, #1
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f003 0304 	and.w	r3, r3, #4
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00a      	beq.n	80025e8 <HAL_UART_IRQHandler+0xb0>
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d005      	beq.n	80025e8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e0:	f043 0202 	orr.w	r2, r3, #2
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00a      	beq.n	8002608 <HAL_UART_IRQHandler+0xd0>
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002600:	f043 0204 	orr.w	r2, r3, #4
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f003 0308 	and.w	r3, r3, #8
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00a      	beq.n	8002628 <HAL_UART_IRQHandler+0xf0>
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002620:	f043 0208 	orr.w	r2, r3, #8
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262c:	2b00      	cmp	r3, #0
 800262e:	d078      	beq.n	8002722 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f003 0320 	and.w	r3, r3, #32
 8002636:	2b00      	cmp	r3, #0
 8002638:	d007      	beq.n	800264a <HAL_UART_IRQHandler+0x112>
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	f003 0320 	and.w	r3, r3, #32
 8002640:	2b00      	cmp	r3, #0
 8002642:	d002      	beq.n	800264a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 f96d 	bl	8002924 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002654:	2b00      	cmp	r3, #0
 8002656:	bf14      	ite	ne
 8002658:	2301      	movne	r3, #1
 800265a:	2300      	moveq	r3, #0
 800265c:	b2db      	uxtb	r3, r3
 800265e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002664:	f003 0308 	and.w	r3, r3, #8
 8002668:	2b00      	cmp	r3, #0
 800266a:	d102      	bne.n	8002672 <HAL_UART_IRQHandler+0x13a>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d031      	beq.n	80026d6 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f8b8 	bl	80027e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002682:	2b00      	cmp	r3, #0
 8002684:	d023      	beq.n	80026ce <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	695a      	ldr	r2, [r3, #20]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002694:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800269a:	2b00      	cmp	r3, #0
 800269c:	d013      	beq.n	80026c6 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026a2:	4a22      	ldr	r2, [pc, #136]	; (800272c <HAL_UART_IRQHandler+0x1f4>)
 80026a4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fd ff4c 	bl	8000548 <HAL_DMA_Abort_IT>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d016      	beq.n	80026e4 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026c0:	4610      	mov	r0, r2
 80026c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026c4:	e00e      	b.n	80026e4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f83b 	bl	8002742 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026cc:	e00a      	b.n	80026e4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f837 	bl	8002742 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d4:	e006      	b.n	80026e4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f833 	bl	8002742 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80026e2:	e01e      	b.n	8002722 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e4:	bf00      	nop
    return;
 80026e6:	e01c      	b.n	8002722 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d008      	beq.n	8002704 <HAL_UART_IRQHandler+0x1cc>
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 f8a4 	bl	800284a <UART_Transmit_IT>
    return;
 8002702:	e00f      	b.n	8002724 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00a      	beq.n	8002724 <HAL_UART_IRQHandler+0x1ec>
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 f8eb 	bl	80028f4 <UART_EndTransmit_IT>
    return;
 800271e:	bf00      	nop
 8002720:	e000      	b.n	8002724 <HAL_UART_IRQHandler+0x1ec>
    return;
 8002722:	bf00      	nop
  }
}
 8002724:	3720      	adds	r7, #32
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	08002823 	.word	0x08002823

08002730 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr

08002742 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	bc80      	pop	{r7}
 8002752:	4770      	bx	lr

08002754 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	603b      	str	r3, [r7, #0]
 8002760:	4613      	mov	r3, r2
 8002762:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002764:	e02c      	b.n	80027c0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276c:	d028      	beq.n	80027c0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d007      	beq.n	8002784 <UART_WaitOnFlagUntilTimeout+0x30>
 8002774:	f7fd fdae 	bl	80002d4 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	429a      	cmp	r2, r3
 8002782:	d21d      	bcs.n	80027c0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002792:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	695a      	ldr	r2, [r3, #20]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0201 	bic.w	r2, r2, #1
 80027a2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2220      	movs	r2, #32
 80027a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2220      	movs	r2, #32
 80027b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e00f      	b.n	80027e0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	4013      	ands	r3, r2
 80027ca:	68ba      	ldr	r2, [r7, #8]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	bf0c      	ite	eq
 80027d0:	2301      	moveq	r3, #1
 80027d2:	2300      	movne	r3, #0
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	461a      	mov	r2, r3
 80027d8:	79fb      	ldrb	r3, [r7, #7]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d0c3      	beq.n	8002766 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68da      	ldr	r2, [r3, #12]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80027fe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	695a      	ldr	r2, [r3, #20]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0201 	bic.w	r2, r2, #1
 800280e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2220      	movs	r2, #32
 8002814:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr

08002822 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b084      	sub	sp, #16
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f7ff ff80 	bl	8002742 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002842:	bf00      	nop
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800284a:	b480      	push	{r7}
 800284c:	b085      	sub	sp, #20
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b21      	cmp	r3, #33	; 0x21
 800285c:	d144      	bne.n	80028e8 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002866:	d11a      	bne.n	800289e <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	461a      	mov	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800287c:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d105      	bne.n	8002892 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	1c9a      	adds	r2, r3, #2
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	621a      	str	r2, [r3, #32]
 8002890:	e00e      	b.n	80028b0 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	1c5a      	adds	r2, r3, #1
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	621a      	str	r2, [r3, #32]
 800289c:	e008      	b.n	80028b0 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	1c59      	adds	r1, r3, #1
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6211      	str	r1, [r2, #32]
 80028a8:	781a      	ldrb	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	3b01      	subs	r3, #1
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	4619      	mov	r1, r3
 80028be:	84d1      	strh	r1, [r2, #38]	; 0x26
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10f      	bne.n	80028e4 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68da      	ldr	r2, [r3, #12]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68da      	ldr	r2, [r3, #12]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	e000      	b.n	80028ea <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80028e8:	2302      	movs	r3, #2
  }
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr

080028f4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68da      	ldr	r2, [r3, #12]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800290a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2220      	movs	r2, #32
 8002910:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f7ff ff0b 	bl	8002730 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b22      	cmp	r3, #34	; 0x22
 8002936:	d171      	bne.n	8002a1c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002940:	d123      	bne.n	800298a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002946:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10e      	bne.n	800296e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	b29b      	uxth	r3, r3
 8002958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800295c:	b29a      	uxth	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002966:	1c9a      	adds	r2, r3, #2
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	629a      	str	r2, [r3, #40]	; 0x28
 800296c:	e029      	b.n	80029c2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	b29b      	uxth	r3, r3
 8002976:	b2db      	uxtb	r3, r3
 8002978:	b29a      	uxth	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002982:	1c5a      	adds	r2, r3, #1
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	629a      	str	r2, [r3, #40]	; 0x28
 8002988:	e01b      	b.n	80029c2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10a      	bne.n	80029a8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6858      	ldr	r0, [r3, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299c:	1c59      	adds	r1, r3, #1
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	6291      	str	r1, [r2, #40]	; 0x28
 80029a2:	b2c2      	uxtb	r2, r0
 80029a4:	701a      	strb	r2, [r3, #0]
 80029a6:	e00c      	b.n	80029c2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b4:	1c58      	adds	r0, r3, #1
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	6288      	str	r0, [r1, #40]	; 0x28
 80029ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	3b01      	subs	r3, #1
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	4619      	mov	r1, r3
 80029d0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d120      	bne.n	8002a18 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68da      	ldr	r2, [r3, #12]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 0220 	bic.w	r2, r2, #32
 80029e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68da      	ldr	r2, [r3, #12]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	695a      	ldr	r2, [r3, #20]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0201 	bic.w	r2, r2, #1
 8002a04:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2220      	movs	r2, #32
 8002a0a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 fa36 	bl	8002e80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002a14:	2300      	movs	r3, #0
 8002a16:	e002      	b.n	8002a1e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	e000      	b.n	8002a1e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002a1c:	2302      	movs	r3, #2
  }
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
	...

08002a28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68da      	ldr	r2, [r3, #12]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002a62:	f023 030c 	bic.w	r3, r3, #12
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6812      	ldr	r2, [r2, #0]
 8002a6a:	68f9      	ldr	r1, [r7, #12]
 8002a6c:	430b      	orrs	r3, r1
 8002a6e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	699a      	ldr	r2, [r3, #24]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a52      	ldr	r2, [pc, #328]	; (8002bd4 <UART_SetConfig+0x1ac>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d14e      	bne.n	8002b2e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a90:	f7fe fbe6 	bl	8001260 <HAL_RCC_GetPCLK2Freq>
 8002a94:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	009a      	lsls	r2, r3, #2
 8002aa0:	441a      	add	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aac:	4a4a      	ldr	r2, [pc, #296]	; (8002bd8 <UART_SetConfig+0x1b0>)
 8002aae:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab2:	095b      	lsrs	r3, r3, #5
 8002ab4:	0119      	lsls	r1, r3, #4
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	009a      	lsls	r2, r3, #2
 8002ac0:	441a      	add	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002acc:	4b42      	ldr	r3, [pc, #264]	; (8002bd8 <UART_SetConfig+0x1b0>)
 8002ace:	fba3 0302 	umull	r0, r3, r3, r2
 8002ad2:	095b      	lsrs	r3, r3, #5
 8002ad4:	2064      	movs	r0, #100	; 0x64
 8002ad6:	fb00 f303 	mul.w	r3, r0, r3
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	011b      	lsls	r3, r3, #4
 8002ade:	3332      	adds	r3, #50	; 0x32
 8002ae0:	4a3d      	ldr	r2, [pc, #244]	; (8002bd8 <UART_SetConfig+0x1b0>)
 8002ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae6:	095b      	lsrs	r3, r3, #5
 8002ae8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aec:	4419      	add	r1, r3
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	4613      	mov	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	009a      	lsls	r2, r3, #2
 8002af8:	441a      	add	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b04:	4b34      	ldr	r3, [pc, #208]	; (8002bd8 <UART_SetConfig+0x1b0>)
 8002b06:	fba3 0302 	umull	r0, r3, r3, r2
 8002b0a:	095b      	lsrs	r3, r3, #5
 8002b0c:	2064      	movs	r0, #100	; 0x64
 8002b0e:	fb00 f303 	mul.w	r3, r0, r3
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	011b      	lsls	r3, r3, #4
 8002b16:	3332      	adds	r3, #50	; 0x32
 8002b18:	4a2f      	ldr	r2, [pc, #188]	; (8002bd8 <UART_SetConfig+0x1b0>)
 8002b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1e:	095b      	lsrs	r3, r3, #5
 8002b20:	f003 020f 	and.w	r2, r3, #15
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	440a      	add	r2, r1
 8002b2a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002b2c:	e04d      	b.n	8002bca <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002b2e:	f7fe fb83 	bl	8001238 <HAL_RCC_GetPCLK1Freq>
 8002b32:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	4613      	mov	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	009a      	lsls	r2, r3, #2
 8002b3e:	441a      	add	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b4a:	4a23      	ldr	r2, [pc, #140]	; (8002bd8 <UART_SetConfig+0x1b0>)
 8002b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b50:	095b      	lsrs	r3, r3, #5
 8002b52:	0119      	lsls	r1, r3, #4
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	4613      	mov	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	009a      	lsls	r2, r3, #2
 8002b5e:	441a      	add	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b6a:	4b1b      	ldr	r3, [pc, #108]	; (8002bd8 <UART_SetConfig+0x1b0>)
 8002b6c:	fba3 0302 	umull	r0, r3, r3, r2
 8002b70:	095b      	lsrs	r3, r3, #5
 8002b72:	2064      	movs	r0, #100	; 0x64
 8002b74:	fb00 f303 	mul.w	r3, r0, r3
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	011b      	lsls	r3, r3, #4
 8002b7c:	3332      	adds	r3, #50	; 0x32
 8002b7e:	4a16      	ldr	r2, [pc, #88]	; (8002bd8 <UART_SetConfig+0x1b0>)
 8002b80:	fba2 2303 	umull	r2, r3, r2, r3
 8002b84:	095b      	lsrs	r3, r3, #5
 8002b86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b8a:	4419      	add	r1, r3
 8002b8c:	68ba      	ldr	r2, [r7, #8]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	009a      	lsls	r2, r3, #2
 8002b96:	441a      	add	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ba2:	4b0d      	ldr	r3, [pc, #52]	; (8002bd8 <UART_SetConfig+0x1b0>)
 8002ba4:	fba3 0302 	umull	r0, r3, r3, r2
 8002ba8:	095b      	lsrs	r3, r3, #5
 8002baa:	2064      	movs	r0, #100	; 0x64
 8002bac:	fb00 f303 	mul.w	r3, r0, r3
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	011b      	lsls	r3, r3, #4
 8002bb4:	3332      	adds	r3, #50	; 0x32
 8002bb6:	4a08      	ldr	r2, [pc, #32]	; (8002bd8 <UART_SetConfig+0x1b0>)
 8002bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbc:	095b      	lsrs	r3, r3, #5
 8002bbe:	f003 020f 	and.w	r2, r3, #15
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	440a      	add	r2, r1
 8002bc8:	609a      	str	r2, [r3, #8]
}
 8002bca:	bf00      	nop
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40013800 	.word	0x40013800
 8002bd8:	51eb851f 	.word	0x51eb851f

08002bdc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b088      	sub	sp, #32
 8002be0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be2:	f107 0310 	add.w	r3, r7, #16
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	605a      	str	r2, [r3, #4]
 8002bec:	609a      	str	r2, [r3, #8]
 8002bee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bf0:	4b41      	ldr	r3, [pc, #260]	; (8002cf8 <MX_GPIO_Init+0x11c>)
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	4a40      	ldr	r2, [pc, #256]	; (8002cf8 <MX_GPIO_Init+0x11c>)
 8002bf6:	f043 0320 	orr.w	r3, r3, #32
 8002bfa:	6193      	str	r3, [r2, #24]
 8002bfc:	4b3e      	ldr	r3, [pc, #248]	; (8002cf8 <MX_GPIO_Init+0x11c>)
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	f003 0320 	and.w	r3, r3, #32
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c08:	4b3b      	ldr	r3, [pc, #236]	; (8002cf8 <MX_GPIO_Init+0x11c>)
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	4a3a      	ldr	r2, [pc, #232]	; (8002cf8 <MX_GPIO_Init+0x11c>)
 8002c0e:	f043 0304 	orr.w	r3, r3, #4
 8002c12:	6193      	str	r3, [r2, #24]
 8002c14:	4b38      	ldr	r3, [pc, #224]	; (8002cf8 <MX_GPIO_Init+0x11c>)
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c20:	4b35      	ldr	r3, [pc, #212]	; (8002cf8 <MX_GPIO_Init+0x11c>)
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	4a34      	ldr	r2, [pc, #208]	; (8002cf8 <MX_GPIO_Init+0x11c>)
 8002c26:	f043 0310 	orr.w	r3, r3, #16
 8002c2a:	6193      	str	r3, [r2, #24]
 8002c2c:	4b32      	ldr	r3, [pc, #200]	; (8002cf8 <MX_GPIO_Init+0x11c>)
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	f003 0310 	and.w	r3, r3, #16
 8002c34:	607b      	str	r3, [r7, #4]
 8002c36:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c38:	4b2f      	ldr	r3, [pc, #188]	; (8002cf8 <MX_GPIO_Init+0x11c>)
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	4a2e      	ldr	r2, [pc, #184]	; (8002cf8 <MX_GPIO_Init+0x11c>)
 8002c3e:	f043 0308 	orr.w	r3, r3, #8
 8002c42:	6193      	str	r3, [r2, #24]
 8002c44:	4b2c      	ldr	r3, [pc, #176]	; (8002cf8 <MX_GPIO_Init+0x11c>)
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	f003 0308 	and.w	r3, r3, #8
 8002c4c:	603b      	str	r3, [r7, #0]
 8002c4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002c50:	2200      	movs	r2, #0
 8002c52:	2104      	movs	r1, #4
 8002c54:	4829      	ldr	r0, [pc, #164]	; (8002cfc <MX_GPIO_Init+0x120>)
 8002c56:	f7fd fee9 	bl	8000a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_WK_Pin;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c5e:	4b28      	ldr	r3, [pc, #160]	; (8002d00 <MX_GPIO_Init+0x124>)
 8002c60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002c62:	2302      	movs	r3, #2
 8002c64:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_WK_GPIO_Port, &GPIO_InitStruct);
 8002c66:	f107 0310 	add.w	r3, r7, #16
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4825      	ldr	r0, [pc, #148]	; (8002d04 <MX_GPIO_Init+0x128>)
 8002c6e:	f7fd fd73 	bl	8000758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 8002c72:	2320      	movs	r3, #32
 8002c74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002c76:	4b24      	ldr	r3, [pc, #144]	; (8002d08 <MX_GPIO_Init+0x12c>)
 8002c78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 8002c7e:	f107 0310 	add.w	r3, r7, #16
 8002c82:	4619      	mov	r1, r3
 8002c84:	4821      	ldr	r0, [pc, #132]	; (8002d0c <MX_GPIO_Init+0x130>)
 8002c86:	f7fd fd67 	bl	8000758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 8002c8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002c90:	4b1d      	ldr	r3, [pc, #116]	; (8002d08 <MX_GPIO_Init+0x12c>)
 8002c92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c94:	2301      	movs	r3, #1
 8002c96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8002c98:	f107 0310 	add.w	r3, r7, #16
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4819      	ldr	r0, [pc, #100]	; (8002d04 <MX_GPIO_Init+0x128>)
 8002ca0:	f7fd fd5a 	bl	8000758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8002ca4:	2304      	movs	r3, #4
 8002ca6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8002cb4:	f107 0310 	add.w	r3, r7, #16
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4810      	ldr	r0, [pc, #64]	; (8002cfc <MX_GPIO_Init+0x120>)
 8002cbc:	f7fd fd4c 	bl	8000758 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	2006      	movs	r0, #6
 8002cc6:	f7fd fc08 	bl	80004da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002cca:	2006      	movs	r0, #6
 8002ccc:	f7fd fc21 	bl	8000512 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 1);
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	2017      	movs	r0, #23
 8002cd6:	f7fd fc00 	bl	80004da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002cda:	2017      	movs	r0, #23
 8002cdc:	f7fd fc19 	bl	8000512 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 2);
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	2028      	movs	r0, #40	; 0x28
 8002ce6:	f7fd fbf8 	bl	80004da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002cea:	2028      	movs	r0, #40	; 0x28
 8002cec:	f7fd fc11 	bl	8000512 <HAL_NVIC_EnableIRQ>

}
 8002cf0:	bf00      	nop
 8002cf2:	3720      	adds	r7, #32
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	40011400 	.word	0x40011400
 8002d00:	10110000 	.word	0x10110000
 8002d04:	40010800 	.word	0x40010800
 8002d08:	10210000 	.word	0x10210000
 8002d0c:	40011000 	.word	0x40011000

08002d10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d14:	f7fd fa86 	bl	8000224 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d18:	f000 f820 	bl	8002d5c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d1c:	f7ff ff5e 	bl	8002bdc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002d20:	f000 fc36 	bl	8003590 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8002d24:	f000 fa32 	bl	800318c <MX_TIM1_Init>
  MX_TIM3_Init();
 8002d28:	f000 faec 	bl	8003304 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
//  HAL_UART_Receive_IT(&huart1, (uint8_t *)rxBuffer, 1);
//  HAL_TIM_Base_Start_IT(&htim3);
  HAL_TIM_Base_Start_IT(&htim1);
 8002d2c:	4809      	ldr	r0, [pc, #36]	; (8002d54 <main+0x44>)
 8002d2e:	f7fe faf4 	bl	800131a <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8002d32:	2100      	movs	r1, #0
 8002d34:	4807      	ldr	r0, [pc, #28]	; (8002d54 <main+0x44>)
 8002d36:	f7fe fbff 	bl	8001538 <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start_IT  ( &htim1,  TIM_CHANNEL_2);
 8002d3a:	2104      	movs	r1, #4
 8002d3c:	4805      	ldr	r0, [pc, #20]	; (8002d54 <main+0x44>)
 8002d3e:	f7fe fb43 	bl	80013c8 <HAL_TIM_OC_Start_IT>
  while (1)
  {
//	  while (dutyCycle < 1000)
//	  {
//		  TIM1->CCR1 = 1000;
		  HAL_Delay(500);
 8002d42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d46:	f7fd facf 	bl	80002e8 <HAL_Delay>
		  printf("Hello\r\n");
 8002d4a:	4803      	ldr	r0, [pc, #12]	; (8002d58 <main+0x48>)
 8002d4c:	f000 fd60 	bl	8003810 <puts>
		  HAL_Delay(500);
 8002d50:	e7f7      	b.n	8002d42 <main+0x32>
 8002d52:	bf00      	nop
 8002d54:	200000f8 	.word	0x200000f8
 8002d58:	08004050 	.word	0x08004050

08002d5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b090      	sub	sp, #64	; 0x40
 8002d60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d62:	f107 0318 	add.w	r3, r7, #24
 8002d66:	2228      	movs	r2, #40	; 0x28
 8002d68:	2100      	movs	r1, #0
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 fcec 	bl	8003748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d70:	1d3b      	adds	r3, r7, #4
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	605a      	str	r2, [r3, #4]
 8002d78:	609a      	str	r2, [r3, #8]
 8002d7a:	60da      	str	r2, [r3, #12]
 8002d7c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d86:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d90:	2302      	movs	r3, #2
 8002d92:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002d9a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002da0:	f107 0318 	add.w	r3, r7, #24
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7fd fe71 	bl	8000a8c <HAL_RCC_OscConfig>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002db0:	f000 f86f 	bl	8002e92 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002db4:	230f      	movs	r3, #15
 8002db6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002db8:	2302      	movs	r3, #2
 8002dba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002dc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002dca:	1d3b      	adds	r3, r7, #4
 8002dcc:	2102      	movs	r1, #2
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fe f8dc 	bl	8000f8c <HAL_RCC_ClockConfig>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002dda:	f000 f85a 	bl	8002e92 <Error_Handler>
  }
}
 8002dde:	bf00      	nop
 8002de0:	3740      	adds	r7, #64	; 0x40
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	4603      	mov	r3, r0
 8002dee:	80fb      	strh	r3, [r7, #6]
//		 break;
//	 default:
//		 break;
//
//	 }
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bc80      	pop	{r7}
 8002df8:	4770      	bx	lr

08002dfa <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
//	{
//		rising = -rising;
//		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
//	}

}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr

08002e0c <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a16      	ldr	r2, [pc, #88]	; (8002e74 <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d124      	bne.n	8002e68 <HAL_TIM_OC_DelayElapsedCallback+0x5c>
		{
			dutyCycle+=ccc;
 8002e1e:	4b16      	ldr	r3, [pc, #88]	; (8002e78 <HAL_TIM_OC_DelayElapsedCallback+0x6c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	4b15      	ldr	r3, [pc, #84]	; (8002e7c <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 8002e26:	881b      	ldrh	r3, [r3, #0]
 8002e28:	4413      	add	r3, r2
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 8002e2e:	801a      	strh	r2, [r3, #0]
			TIM1->CCR1=dutyCycle;
 8002e30:	4b12      	ldr	r3, [pc, #72]	; (8002e7c <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 8002e32:	881a      	ldrh	r2, [r3, #0]
 8002e34:	4b0f      	ldr	r3, [pc, #60]	; (8002e74 <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 8002e36:	635a      	str	r2, [r3, #52]	; 0x34
			if(dutyCycle==300){
 8002e38:	4b10      	ldr	r3, [pc, #64]	; (8002e7c <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002e40:	d108      	bne.n	8002e54 <HAL_TIM_OC_DelayElapsedCallback+0x48>
				dutyCycle = 300;
 8002e42:	4b0e      	ldr	r3, [pc, #56]	; (8002e7c <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 8002e44:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e48:	801a      	strh	r2, [r3, #0]
				ccc = -1;
 8002e4a:	4b0b      	ldr	r3, [pc, #44]	; (8002e78 <HAL_TIM_OC_DelayElapsedCallback+0x6c>)
 8002e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e50:	601a      	str	r2, [r3, #0]
				dutyCycle = 0;
				ccc = 1;
			}
		}

}
 8002e52:	e009      	b.n	8002e68 <HAL_TIM_OC_DelayElapsedCallback+0x5c>
			else if(dutyCycle<1){
 8002e54:	4b09      	ldr	r3, [pc, #36]	; (8002e7c <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 8002e56:	881b      	ldrh	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d105      	bne.n	8002e68 <HAL_TIM_OC_DelayElapsedCallback+0x5c>
				dutyCycle = 0;
 8002e5c:	4b07      	ldr	r3, [pc, #28]	; (8002e7c <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	801a      	strh	r2, [r3, #0]
				ccc = 1;
 8002e62:	4b05      	ldr	r3, [pc, #20]	; (8002e78 <HAL_TIM_OC_DelayElapsedCallback+0x6c>)
 8002e64:	2201      	movs	r2, #1
 8002e66:	601a      	str	r2, [r3, #0]
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bc80      	pop	{r7}
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	40012c00 	.word	0x40012c00
 8002e78:	20000008 	.word	0x20000008
 8002e7c:	20000090 	.word	0x20000090

08002e80 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]

}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bc80      	pop	{r7}
 8002e90:	4770      	bx	lr

08002e92 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e92:	b480      	push	{r7}
 8002e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002e96:	bf00      	nop
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bc80      	pop	{r7}
 8002e9c:	4770      	bx	lr
	...

08002ea0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ea6:	4b16      	ldr	r3, [pc, #88]	; (8002f00 <HAL_MspInit+0x60>)
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	4a15      	ldr	r2, [pc, #84]	; (8002f00 <HAL_MspInit+0x60>)
 8002eac:	f043 0301 	orr.w	r3, r3, #1
 8002eb0:	6193      	str	r3, [r2, #24]
 8002eb2:	4b13      	ldr	r3, [pc, #76]	; (8002f00 <HAL_MspInit+0x60>)
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	60bb      	str	r3, [r7, #8]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ebe:	4b10      	ldr	r3, [pc, #64]	; (8002f00 <HAL_MspInit+0x60>)
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	4a0f      	ldr	r2, [pc, #60]	; (8002f00 <HAL_MspInit+0x60>)
 8002ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec8:	61d3      	str	r3, [r2, #28]
 8002eca:	4b0d      	ldr	r3, [pc, #52]	; (8002f00 <HAL_MspInit+0x60>)
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	607b      	str	r3, [r7, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002ed6:	2005      	movs	r0, #5
 8002ed8:	f7fd faf4 	bl	80004c4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002edc:	4b09      	ldr	r3, [pc, #36]	; (8002f04 <HAL_MspInit+0x64>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	60fb      	str	r3, [r7, #12]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ef0:	60fb      	str	r3, [r7, #12]
 8002ef2:	4a04      	ldr	r2, [pc, #16]	; (8002f04 <HAL_MspInit+0x64>)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ef8:	bf00      	nop
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40021000 	.word	0x40021000
 8002f04:	40010000 	.word	0x40010000

08002f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002f0c:	bf00      	nop
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr

08002f14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f18:	e7fe      	b.n	8002f18 <HardFault_Handler+0x4>

08002f1a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f1e:	e7fe      	b.n	8002f1e <MemManage_Handler+0x4>

08002f20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f24:	e7fe      	b.n	8002f24 <BusFault_Handler+0x4>

08002f26 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f26:	b480      	push	{r7}
 8002f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f2a:	e7fe      	b.n	8002f2a <UsageFault_Handler+0x4>

08002f2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f30:	bf00      	nop
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bc80      	pop	{r7}
 8002f36:	4770      	bx	lr

08002f38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f3c:	bf00      	nop
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bc80      	pop	{r7}
 8002f42:	4770      	bx	lr

08002f44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f48:	bf00      	nop
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr

08002f50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f54:	f7fd f9ac 	bl	80002b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f58:	bf00      	nop
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002f60:	2001      	movs	r0, #1
 8002f62:	f7fd fd7b 	bl	8000a5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002f66:	bf00      	nop
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002f6e:	2020      	movs	r0, #32
 8002f70:	f7fd fd74 	bl	8000a5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002f74:	bf00      	nop
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f7c:	4802      	ldr	r0, [pc, #8]	; (8002f88 <TIM1_UP_IRQHandler+0x10>)
 8002f7e:	f7fe fb19 	bl	80015b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002f82:	bf00      	nop
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	200000f8 	.word	0x200000f8

08002f8c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f90:	4802      	ldr	r0, [pc, #8]	; (8002f9c <TIM1_TRG_COM_IRQHandler+0x10>)
 8002f92:	f7fe fb0f 	bl	80015b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002f96:	bf00      	nop
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	200000f8 	.word	0x200000f8

08002fa0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002fa4:	4802      	ldr	r0, [pc, #8]	; (8002fb0 <TIM1_CC_IRQHandler+0x10>)
 8002fa6:	f7fe fb05 	bl	80015b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002faa:	bf00      	nop
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	200000f8 	.word	0x200000f8

08002fb4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002fb8:	4802      	ldr	r0, [pc, #8]	; (8002fc4 <TIM3_IRQHandler+0x10>)
 8002fba:	f7fe fafb 	bl	80015b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002fbe:	bf00      	nop
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	200000b8 	.word	0x200000b8

08002fc8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002fcc:	4804      	ldr	r0, [pc, #16]	; (8002fe0 <USART1_IRQHandler+0x18>)
 8002fce:	f7ff fab3 	bl	8002538 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  HAL_UART_Receive_IT(&huart1, (uint8_t *)rxBuffer, 1);
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	4903      	ldr	r1, [pc, #12]	; (8002fe4 <USART1_IRQHandler+0x1c>)
 8002fd6:	4802      	ldr	r0, [pc, #8]	; (8002fe0 <USART1_IRQHandler+0x18>)
 8002fd8:	f7ff fa59 	bl	800248e <HAL_UART_Receive_IT>
  /* USER CODE END USART1_IRQn 1 */
}
 8002fdc:	bf00      	nop
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	20000138 	.word	0x20000138
 8002fe4:	200000a4 	.word	0x200000a4

08002fe8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002fec:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002ff0:	f7fd fd34 	bl	8000a5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ff4:	bf00      	nop
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003004:	2300      	movs	r3, #0
 8003006:	617b      	str	r3, [r7, #20]
 8003008:	e00a      	b.n	8003020 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800300a:	f3af 8000 	nop.w
 800300e:	4601      	mov	r1, r0
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	1c5a      	adds	r2, r3, #1
 8003014:	60ba      	str	r2, [r7, #8]
 8003016:	b2ca      	uxtb	r2, r1
 8003018:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	3301      	adds	r3, #1
 800301e:	617b      	str	r3, [r7, #20]
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	429a      	cmp	r2, r3
 8003026:	dbf0      	blt.n	800300a <_read+0x12>
	}

return len;
 8003028:	687b      	ldr	r3, [r7, #4]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b086      	sub	sp, #24
 8003036:	af00      	add	r7, sp, #0
 8003038:	60f8      	str	r0, [r7, #12]
 800303a:	60b9      	str	r1, [r7, #8]
 800303c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800303e:	2300      	movs	r3, #0
 8003040:	617b      	str	r3, [r7, #20]
 8003042:	e009      	b.n	8003058 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	1c5a      	adds	r2, r3, #1
 8003048:	60ba      	str	r2, [r7, #8]
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f000 fa8d 	bl	800356c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	3301      	adds	r3, #1
 8003056:	617b      	str	r3, [r7, #20]
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	429a      	cmp	r2, r3
 800305e:	dbf1      	blt.n	8003044 <_write+0x12>
	}
	return len;
 8003060:	687b      	ldr	r3, [r7, #4]
}
 8003062:	4618      	mov	r0, r3
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <_close>:

int _close(int file)
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
	return -1;
 8003072:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003076:	4618      	mov	r0, r3
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	bc80      	pop	{r7}
 800307e:	4770      	bx	lr

08003080 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003090:	605a      	str	r2, [r3, #4]
	return 0;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	bc80      	pop	{r7}
 800309c:	4770      	bx	lr

0800309e <_isatty>:

int _isatty(int file)
{
 800309e:	b480      	push	{r7}
 80030a0:	b083      	sub	sp, #12
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
	return 1;
 80030a6:	2301      	movs	r3, #1
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bc80      	pop	{r7}
 80030b0:	4770      	bx	lr

080030b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b085      	sub	sp, #20
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	60b9      	str	r1, [r7, #8]
 80030bc:	607a      	str	r2, [r7, #4]
	return 0;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr
	...

080030cc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80030d4:	4b11      	ldr	r3, [pc, #68]	; (800311c <_sbrk+0x50>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d102      	bne.n	80030e2 <_sbrk+0x16>
		heap_end = &end;
 80030dc:	4b0f      	ldr	r3, [pc, #60]	; (800311c <_sbrk+0x50>)
 80030de:	4a10      	ldr	r2, [pc, #64]	; (8003120 <_sbrk+0x54>)
 80030e0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80030e2:	4b0e      	ldr	r3, [pc, #56]	; (800311c <_sbrk+0x50>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80030e8:	4b0c      	ldr	r3, [pc, #48]	; (800311c <_sbrk+0x50>)
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4413      	add	r3, r2
 80030f0:	466a      	mov	r2, sp
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d907      	bls.n	8003106 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80030f6:	f000 fafd 	bl	80036f4 <__errno>
 80030fa:	4602      	mov	r2, r0
 80030fc:	230c      	movs	r3, #12
 80030fe:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003100:	f04f 33ff 	mov.w	r3, #4294967295
 8003104:	e006      	b.n	8003114 <_sbrk+0x48>
	}

	heap_end += incr;
 8003106:	4b05      	ldr	r3, [pc, #20]	; (800311c <_sbrk+0x50>)
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4413      	add	r3, r2
 800310e:	4a03      	ldr	r2, [pc, #12]	; (800311c <_sbrk+0x50>)
 8003110:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003112:	68fb      	ldr	r3, [r7, #12]
}
 8003114:	4618      	mov	r0, r3
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	20000094 	.word	0x20000094
 8003120:	20000180 	.word	0x20000180

08003124 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003128:	4b15      	ldr	r3, [pc, #84]	; (8003180 <SystemInit+0x5c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a14      	ldr	r2, [pc, #80]	; (8003180 <SystemInit+0x5c>)
 800312e:	f043 0301 	orr.w	r3, r3, #1
 8003132:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003134:	4b12      	ldr	r3, [pc, #72]	; (8003180 <SystemInit+0x5c>)
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	4911      	ldr	r1, [pc, #68]	; (8003180 <SystemInit+0x5c>)
 800313a:	4b12      	ldr	r3, [pc, #72]	; (8003184 <SystemInit+0x60>)
 800313c:	4013      	ands	r3, r2
 800313e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003140:	4b0f      	ldr	r3, [pc, #60]	; (8003180 <SystemInit+0x5c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a0e      	ldr	r2, [pc, #56]	; (8003180 <SystemInit+0x5c>)
 8003146:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800314a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800314e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003150:	4b0b      	ldr	r3, [pc, #44]	; (8003180 <SystemInit+0x5c>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a0a      	ldr	r2, [pc, #40]	; (8003180 <SystemInit+0x5c>)
 8003156:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800315a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800315c:	4b08      	ldr	r3, [pc, #32]	; (8003180 <SystemInit+0x5c>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	4a07      	ldr	r2, [pc, #28]	; (8003180 <SystemInit+0x5c>)
 8003162:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003166:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003168:	4b05      	ldr	r3, [pc, #20]	; (8003180 <SystemInit+0x5c>)
 800316a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800316e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003170:	4b05      	ldr	r3, [pc, #20]	; (8003188 <SystemInit+0x64>)
 8003172:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003176:	609a      	str	r2, [r3, #8]
#endif 
}
 8003178:	bf00      	nop
 800317a:	46bd      	mov	sp, r7
 800317c:	bc80      	pop	{r7}
 800317e:	4770      	bx	lr
 8003180:	40021000 	.word	0x40021000
 8003184:	f8ff0000 	.word	0xf8ff0000
 8003188:	e000ed00 	.word	0xe000ed00

0800318c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b096      	sub	sp, #88	; 0x58
 8003190:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003192:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	605a      	str	r2, [r3, #4]
 800319c:	609a      	str	r2, [r3, #8]
 800319e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	605a      	str	r2, [r3, #4]
 80031b4:	609a      	str	r2, [r3, #8]
 80031b6:	60da      	str	r2, [r3, #12]
 80031b8:	611a      	str	r2, [r3, #16]
 80031ba:	615a      	str	r2, [r3, #20]
 80031bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80031be:	1d3b      	adds	r3, r7, #4
 80031c0:	2220      	movs	r2, #32
 80031c2:	2100      	movs	r1, #0
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 fabf 	bl	8003748 <memset>

  htim1.Instance = TIM1;
 80031ca:	4b4c      	ldr	r3, [pc, #304]	; (80032fc <MX_TIM1_Init+0x170>)
 80031cc:	4a4c      	ldr	r2, [pc, #304]	; (8003300 <MX_TIM1_Init+0x174>)
 80031ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 719;
 80031d0:	4b4a      	ldr	r3, [pc, #296]	; (80032fc <MX_TIM1_Init+0x170>)
 80031d2:	f240 22cf 	movw	r2, #719	; 0x2cf
 80031d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031d8:	4b48      	ldr	r3, [pc, #288]	; (80032fc <MX_TIM1_Init+0x170>)
 80031da:	2200      	movs	r2, #0
 80031dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 499;
 80031de:	4b47      	ldr	r3, [pc, #284]	; (80032fc <MX_TIM1_Init+0x170>)
 80031e0:	f240 12f3 	movw	r2, #499	; 0x1f3
 80031e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031e6:	4b45      	ldr	r3, [pc, #276]	; (80032fc <MX_TIM1_Init+0x170>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80031ec:	4b43      	ldr	r3, [pc, #268]	; (80032fc <MX_TIM1_Init+0x170>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031f2:	4b42      	ldr	r3, [pc, #264]	; (80032fc <MX_TIM1_Init+0x170>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80031f8:	4840      	ldr	r0, [pc, #256]	; (80032fc <MX_TIM1_Init+0x170>)
 80031fa:	f7fe f863 	bl	80012c4 <HAL_TIM_Base_Init>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003204:	f7ff fe45 	bl	8002e92 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800320c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800320e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003212:	4619      	mov	r1, r3
 8003214:	4839      	ldr	r0, [pc, #228]	; (80032fc <MX_TIM1_Init+0x170>)
 8003216:	f7fe fbfb 	bl	8001a10 <HAL_TIM_ConfigClockSource>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003220:	f7ff fe37 	bl	8002e92 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003224:	4835      	ldr	r0, [pc, #212]	; (80032fc <MX_TIM1_Init+0x170>)
 8003226:	f7fe f953 	bl	80014d0 <HAL_TIM_PWM_Init>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003230:	f7ff fe2f 	bl	8002e92 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8003234:	4831      	ldr	r0, [pc, #196]	; (80032fc <MX_TIM1_Init+0x170>)
 8003236:	f7fe f893 	bl	8001360 <HAL_TIM_OC_Init>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8003240:	f7ff fe27 	bl	8002e92 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003244:	2300      	movs	r3, #0
 8003246:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003248:	2300      	movs	r3, #0
 800324a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800324c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003250:	4619      	mov	r1, r3
 8003252:	482a      	ldr	r0, [pc, #168]	; (80032fc <MX_TIM1_Init+0x170>)
 8003254:	f7fe ff8e 	bl	8002174 <HAL_TIMEx_MasterConfigSynchronization>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800325e:	f7ff fe18 	bl	8002e92 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003262:	2360      	movs	r3, #96	; 0x60
 8003264:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003266:	2300      	movs	r3, #0
 8003268:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800326a:	2302      	movs	r3, #2
 800326c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800326e:	2300      	movs	r3, #0
 8003270:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003272:	2300      	movs	r3, #0
 8003274:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003276:	2300      	movs	r3, #0
 8003278:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800327a:	2300      	movs	r3, #0
 800327c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800327e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003282:	2200      	movs	r2, #0
 8003284:	4619      	mov	r1, r3
 8003286:	481d      	ldr	r0, [pc, #116]	; (80032fc <MX_TIM1_Init+0x170>)
 8003288:	f7fe fafc 	bl	8001884 <HAL_TIM_PWM_ConfigChannel>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8003292:	f7ff fdfe 	bl	8002e92 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003296:	2300      	movs	r3, #0
 8003298:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1999;
 800329a:	f240 73cf 	movw	r3, #1999	; 0x7cf
 800329e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032a0:	2300      	movs	r3, #0
 80032a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80032a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032a8:	2204      	movs	r2, #4
 80032aa:	4619      	mov	r1, r3
 80032ac:	4813      	ldr	r0, [pc, #76]	; (80032fc <MX_TIM1_Init+0x170>)
 80032ae:	f7fe fa89 	bl	80017c4 <HAL_TIM_OC_ConfigChannel>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 80032b8:	f7ff fdeb 	bl	8002e92 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80032bc:	2300      	movs	r3, #0
 80032be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80032c0:	2300      	movs	r3, #0
 80032c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80032c4:	2300      	movs	r3, #0
 80032c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80032c8:	2300      	movs	r3, #0
 80032ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80032cc:	2300      	movs	r3, #0
 80032ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80032d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80032d6:	2300      	movs	r3, #0
 80032d8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80032da:	1d3b      	adds	r3, r7, #4
 80032dc:	4619      	mov	r1, r3
 80032de:	4807      	ldr	r0, [pc, #28]	; (80032fc <MX_TIM1_Init+0x170>)
 80032e0:	f7fe ff8c 	bl	80021fc <HAL_TIMEx_ConfigBreakDeadTime>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 80032ea:	f7ff fdd2 	bl	8002e92 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80032ee:	4803      	ldr	r0, [pc, #12]	; (80032fc <MX_TIM1_Init+0x170>)
 80032f0:	f000 f8d2 	bl	8003498 <HAL_TIM_MspPostInit>

}
 80032f4:	bf00      	nop
 80032f6:	3758      	adds	r7, #88	; 0x58
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	200000f8 	.word	0x200000f8
 8003300:	40012c00 	.word	0x40012c00

08003304 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b08e      	sub	sp, #56	; 0x38
 8003308:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800330a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800330e:	2200      	movs	r2, #0
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	605a      	str	r2, [r3, #4]
 8003314:	609a      	str	r2, [r3, #8]
 8003316:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003318:	f107 0320 	add.w	r3, r7, #32
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003322:	1d3b      	adds	r3, r7, #4
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	605a      	str	r2, [r3, #4]
 800332a:	609a      	str	r2, [r3, #8]
 800332c:	60da      	str	r2, [r3, #12]
 800332e:	611a      	str	r2, [r3, #16]
 8003330:	615a      	str	r2, [r3, #20]
 8003332:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8003334:	4b2d      	ldr	r3, [pc, #180]	; (80033ec <MX_TIM3_Init+0xe8>)
 8003336:	4a2e      	ldr	r2, [pc, #184]	; (80033f0 <MX_TIM3_Init+0xec>)
 8003338:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 800333a:	4b2c      	ldr	r3, [pc, #176]	; (80033ec <MX_TIM3_Init+0xe8>)
 800333c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8003340:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003342:	4b2a      	ldr	r3, [pc, #168]	; (80033ec <MX_TIM3_Init+0xe8>)
 8003344:	2200      	movs	r2, #0
 8003346:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8003348:	4b28      	ldr	r3, [pc, #160]	; (80033ec <MX_TIM3_Init+0xe8>)
 800334a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800334e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003350:	4b26      	ldr	r3, [pc, #152]	; (80033ec <MX_TIM3_Init+0xe8>)
 8003352:	2200      	movs	r2, #0
 8003354:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003356:	4b25      	ldr	r3, [pc, #148]	; (80033ec <MX_TIM3_Init+0xe8>)
 8003358:	2200      	movs	r2, #0
 800335a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800335c:	4823      	ldr	r0, [pc, #140]	; (80033ec <MX_TIM3_Init+0xe8>)
 800335e:	f7fd ffb1 	bl	80012c4 <HAL_TIM_Base_Init>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003368:	f7ff fd93 	bl	8002e92 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800336c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003370:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003372:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003376:	4619      	mov	r1, r3
 8003378:	481c      	ldr	r0, [pc, #112]	; (80033ec <MX_TIM3_Init+0xe8>)
 800337a:	f7fe fb49 	bl	8001a10 <HAL_TIM_ConfigClockSource>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8003384:	f7ff fd85 	bl	8002e92 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003388:	4818      	ldr	r0, [pc, #96]	; (80033ec <MX_TIM3_Init+0xe8>)
 800338a:	f7fe f8a1 	bl	80014d0 <HAL_TIM_PWM_Init>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003394:	f7ff fd7d 	bl	8002e92 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003398:	2300      	movs	r3, #0
 800339a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800339c:	2300      	movs	r3, #0
 800339e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80033a0:	f107 0320 	add.w	r3, r7, #32
 80033a4:	4619      	mov	r1, r3
 80033a6:	4811      	ldr	r0, [pc, #68]	; (80033ec <MX_TIM3_Init+0xe8>)
 80033a8:	f7fe fee4 	bl	8002174 <HAL_TIMEx_MasterConfigSynchronization>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80033b2:	f7ff fd6e 	bl	8002e92 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033b6:	2360      	movs	r3, #96	; 0x60
 80033b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80033ba:	2300      	movs	r3, #0
 80033bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80033be:	2302      	movs	r3, #2
 80033c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033c2:	2300      	movs	r3, #0
 80033c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80033c6:	1d3b      	adds	r3, r7, #4
 80033c8:	2204      	movs	r2, #4
 80033ca:	4619      	mov	r1, r3
 80033cc:	4807      	ldr	r0, [pc, #28]	; (80033ec <MX_TIM3_Init+0xe8>)
 80033ce:	f7fe fa59 	bl	8001884 <HAL_TIM_PWM_ConfigChannel>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80033d8:	f7ff fd5b 	bl	8002e92 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80033dc:	4803      	ldr	r0, [pc, #12]	; (80033ec <MX_TIM3_Init+0xe8>)
 80033de:	f000 f85b 	bl	8003498 <HAL_TIM_MspPostInit>

}
 80033e2:	bf00      	nop
 80033e4:	3738      	adds	r7, #56	; 0x38
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	200000b8 	.word	0x200000b8
 80033f0:	40000400 	.word	0x40000400

080033f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a22      	ldr	r2, [pc, #136]	; (800348c <HAL_TIM_Base_MspInit+0x98>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d124      	bne.n	8003450 <HAL_TIM_Base_MspInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003406:	4b22      	ldr	r3, [pc, #136]	; (8003490 <HAL_TIM_Base_MspInit+0x9c>)
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	4a21      	ldr	r2, [pc, #132]	; (8003490 <HAL_TIM_Base_MspInit+0x9c>)
 800340c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003410:	6193      	str	r3, [r2, #24]
 8003412:	4b1f      	ldr	r3, [pc, #124]	; (8003490 <HAL_TIM_Base_MspInit+0x9c>)
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800341e:	2200      	movs	r2, #0
 8003420:	2100      	movs	r1, #0
 8003422:	2019      	movs	r0, #25
 8003424:	f7fd f859 	bl	80004da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003428:	2019      	movs	r0, #25
 800342a:	f7fd f872 	bl	8000512 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800342e:	2200      	movs	r2, #0
 8003430:	2100      	movs	r1, #0
 8003432:	201a      	movs	r0, #26
 8003434:	f7fd f851 	bl	80004da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8003438:	201a      	movs	r0, #26
 800343a:	f7fd f86a 	bl	8000512 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800343e:	2200      	movs	r2, #0
 8003440:	2100      	movs	r1, #0
 8003442:	201b      	movs	r0, #27
 8003444:	f7fd f849 	bl	80004da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003448:	201b      	movs	r0, #27
 800344a:	f7fd f862 	bl	8000512 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800344e:	e018      	b.n	8003482 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM3)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a0f      	ldr	r2, [pc, #60]	; (8003494 <HAL_TIM_Base_MspInit+0xa0>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d113      	bne.n	8003482 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800345a:	4b0d      	ldr	r3, [pc, #52]	; (8003490 <HAL_TIM_Base_MspInit+0x9c>)
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	4a0c      	ldr	r2, [pc, #48]	; (8003490 <HAL_TIM_Base_MspInit+0x9c>)
 8003460:	f043 0302 	orr.w	r3, r3, #2
 8003464:	61d3      	str	r3, [r2, #28]
 8003466:	4b0a      	ldr	r3, [pc, #40]	; (8003490 <HAL_TIM_Base_MspInit+0x9c>)
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	60bb      	str	r3, [r7, #8]
 8003470:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003472:	2200      	movs	r2, #0
 8003474:	2100      	movs	r1, #0
 8003476:	201d      	movs	r0, #29
 8003478:	f7fd f82f 	bl	80004da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800347c:	201d      	movs	r0, #29
 800347e:	f7fd f848 	bl	8000512 <HAL_NVIC_EnableIRQ>
}
 8003482:	bf00      	nop
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40012c00 	.word	0x40012c00
 8003490:	40021000 	.word	0x40021000
 8003494:	40000400 	.word	0x40000400

08003498 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b08a      	sub	sp, #40	; 0x28
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a0:	f107 0314 	add.w	r3, r7, #20
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	605a      	str	r2, [r3, #4]
 80034aa:	609a      	str	r2, [r3, #8]
 80034ac:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a28      	ldr	r2, [pc, #160]	; (8003554 <HAL_TIM_MspPostInit+0xbc>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d119      	bne.n	80034ec <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034b8:	4b27      	ldr	r3, [pc, #156]	; (8003558 <HAL_TIM_MspPostInit+0xc0>)
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	4a26      	ldr	r2, [pc, #152]	; (8003558 <HAL_TIM_MspPostInit+0xc0>)
 80034be:	f043 0304 	orr.w	r3, r3, #4
 80034c2:	6193      	str	r3, [r2, #24]
 80034c4:	4b24      	ldr	r3, [pc, #144]	; (8003558 <HAL_TIM_MspPostInit+0xc0>)
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	613b      	str	r3, [r7, #16]
 80034ce:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80034d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80034d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d6:	2302      	movs	r3, #2
 80034d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034da:	2302      	movs	r3, #2
 80034dc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034de:	f107 0314 	add.w	r3, r7, #20
 80034e2:	4619      	mov	r1, r3
 80034e4:	481d      	ldr	r0, [pc, #116]	; (800355c <HAL_TIM_MspPostInit+0xc4>)
 80034e6:	f7fd f937 	bl	8000758 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80034ea:	e02e      	b.n	800354a <HAL_TIM_MspPostInit+0xb2>
  else if(timHandle->Instance==TIM3)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a1b      	ldr	r2, [pc, #108]	; (8003560 <HAL_TIM_MspPostInit+0xc8>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d129      	bne.n	800354a <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034f6:	4b18      	ldr	r3, [pc, #96]	; (8003558 <HAL_TIM_MspPostInit+0xc0>)
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	4a17      	ldr	r2, [pc, #92]	; (8003558 <HAL_TIM_MspPostInit+0xc0>)
 80034fc:	f043 0310 	orr.w	r3, r3, #16
 8003500:	6193      	str	r3, [r2, #24]
 8003502:	4b15      	ldr	r3, [pc, #84]	; (8003558 <HAL_TIM_MspPostInit+0xc0>)
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	f003 0310 	and.w	r3, r3, #16
 800350a:	60fb      	str	r3, [r7, #12]
 800350c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800350e:	2380      	movs	r3, #128	; 0x80
 8003510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003512:	2302      	movs	r3, #2
 8003514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003516:	2302      	movs	r3, #2
 8003518:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800351a:	f107 0314 	add.w	r3, r7, #20
 800351e:	4619      	mov	r1, r3
 8003520:	4810      	ldr	r0, [pc, #64]	; (8003564 <HAL_TIM_MspPostInit+0xcc>)
 8003522:	f7fd f919 	bl	8000758 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8003526:	4b10      	ldr	r3, [pc, #64]	; (8003568 <HAL_TIM_MspPostInit+0xd0>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	627b      	str	r3, [r7, #36]	; 0x24
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003532:	627b      	str	r3, [r7, #36]	; 0x24
 8003534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003536:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800353a:	627b      	str	r3, [r7, #36]	; 0x24
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8003542:	627b      	str	r3, [r7, #36]	; 0x24
 8003544:	4a08      	ldr	r2, [pc, #32]	; (8003568 <HAL_TIM_MspPostInit+0xd0>)
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	6053      	str	r3, [r2, #4]
}
 800354a:	bf00      	nop
 800354c:	3728      	adds	r7, #40	; 0x28
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	40012c00 	.word	0x40012c00
 8003558:	40021000 	.word	0x40021000
 800355c:	40010800 	.word	0x40010800
 8003560:	40000400 	.word	0x40000400
 8003564:	40011000 	.word	0x40011000
 8003568:	40010000 	.word	0x40010000

0800356c <__io_putchar>:
#ifdef __GNUC__

#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

PUTCHAR_PROTOTYPE
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]

	// 注意下面第一个参数是&huart1，因为cubemx配置了串口1自动生成的
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8003574:	1d39      	adds	r1, r7, #4
 8003576:	f04f 33ff 	mov.w	r3, #4294967295
 800357a:	2201      	movs	r2, #1
 800357c:	4803      	ldr	r0, [pc, #12]	; (800358c <__io_putchar+0x20>)
 800357e:	f7fe feed 	bl	800235c <HAL_UART_Transmit>
	return ch;
 8003582:	687b      	ldr	r3, [r7, #4]
}
 8003584:	4618      	mov	r0, r3
 8003586:	3708      	adds	r7, #8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	20000138 	.word	0x20000138

08003590 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8003594:	4b11      	ldr	r3, [pc, #68]	; (80035dc <MX_USART1_UART_Init+0x4c>)
 8003596:	4a12      	ldr	r2, [pc, #72]	; (80035e0 <MX_USART1_UART_Init+0x50>)
 8003598:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800359a:	4b10      	ldr	r3, [pc, #64]	; (80035dc <MX_USART1_UART_Init+0x4c>)
 800359c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80035a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80035a2:	4b0e      	ldr	r3, [pc, #56]	; (80035dc <MX_USART1_UART_Init+0x4c>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80035a8:	4b0c      	ldr	r3, [pc, #48]	; (80035dc <MX_USART1_UART_Init+0x4c>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80035ae:	4b0b      	ldr	r3, [pc, #44]	; (80035dc <MX_USART1_UART_Init+0x4c>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80035b4:	4b09      	ldr	r3, [pc, #36]	; (80035dc <MX_USART1_UART_Init+0x4c>)
 80035b6:	220c      	movs	r2, #12
 80035b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035ba:	4b08      	ldr	r3, [pc, #32]	; (80035dc <MX_USART1_UART_Init+0x4c>)
 80035bc:	2200      	movs	r2, #0
 80035be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80035c0:	4b06      	ldr	r3, [pc, #24]	; (80035dc <MX_USART1_UART_Init+0x4c>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80035c6:	4805      	ldr	r0, [pc, #20]	; (80035dc <MX_USART1_UART_Init+0x4c>)
 80035c8:	f7fe fe7b 	bl	80022c2 <HAL_UART_Init>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80035d2:	f7ff fc5e 	bl	8002e92 <Error_Handler>
  }

}
 80035d6:	bf00      	nop
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	20000138 	.word	0x20000138
 80035e0:	40013800 	.word	0x40013800

080035e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b08a      	sub	sp, #40	; 0x28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035ec:	f107 0314 	add.w	r3, r7, #20
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	605a      	str	r2, [r3, #4]
 80035f6:	609a      	str	r2, [r3, #8]
 80035f8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a26      	ldr	r2, [pc, #152]	; (8003698 <HAL_UART_MspInit+0xb4>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d145      	bne.n	8003690 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003604:	4b25      	ldr	r3, [pc, #148]	; (800369c <HAL_UART_MspInit+0xb8>)
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	4a24      	ldr	r2, [pc, #144]	; (800369c <HAL_UART_MspInit+0xb8>)
 800360a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800360e:	6193      	str	r3, [r2, #24]
 8003610:	4b22      	ldr	r3, [pc, #136]	; (800369c <HAL_UART_MspInit+0xb8>)
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003618:	613b      	str	r3, [r7, #16]
 800361a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800361c:	4b1f      	ldr	r3, [pc, #124]	; (800369c <HAL_UART_MspInit+0xb8>)
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	4a1e      	ldr	r2, [pc, #120]	; (800369c <HAL_UART_MspInit+0xb8>)
 8003622:	f043 0308 	orr.w	r3, r3, #8
 8003626:	6193      	str	r3, [r2, #24]
 8003628:	4b1c      	ldr	r3, [pc, #112]	; (800369c <HAL_UART_MspInit+0xb8>)
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	f003 0308 	and.w	r3, r3, #8
 8003630:	60fb      	str	r3, [r7, #12]
 8003632:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003634:	2340      	movs	r3, #64	; 0x40
 8003636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003638:	2302      	movs	r3, #2
 800363a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800363c:	2303      	movs	r3, #3
 800363e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003640:	f107 0314 	add.w	r3, r7, #20
 8003644:	4619      	mov	r1, r3
 8003646:	4816      	ldr	r0, [pc, #88]	; (80036a0 <HAL_UART_MspInit+0xbc>)
 8003648:	f7fd f886 	bl	8000758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800364c:	2380      	movs	r3, #128	; 0x80
 800364e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003650:	2300      	movs	r3, #0
 8003652:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003654:	2300      	movs	r3, #0
 8003656:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003658:	f107 0314 	add.w	r3, r7, #20
 800365c:	4619      	mov	r1, r3
 800365e:	4810      	ldr	r0, [pc, #64]	; (80036a0 <HAL_UART_MspInit+0xbc>)
 8003660:	f7fd f87a 	bl	8000758 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8003664:	4b0f      	ldr	r3, [pc, #60]	; (80036a4 <HAL_UART_MspInit+0xc0>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	627b      	str	r3, [r7, #36]	; 0x24
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003670:	627b      	str	r3, [r7, #36]	; 0x24
 8003672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003674:	f043 0304 	orr.w	r3, r3, #4
 8003678:	627b      	str	r3, [r7, #36]	; 0x24
 800367a:	4a0a      	ldr	r2, [pc, #40]	; (80036a4 <HAL_UART_MspInit+0xc0>)
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 1);
 8003680:	2201      	movs	r2, #1
 8003682:	2100      	movs	r1, #0
 8003684:	2025      	movs	r0, #37	; 0x25
 8003686:	f7fc ff28 	bl	80004da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800368a:	2025      	movs	r0, #37	; 0x25
 800368c:	f7fc ff41 	bl	8000512 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003690:	bf00      	nop
 8003692:	3728      	adds	r7, #40	; 0x28
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40013800 	.word	0x40013800
 800369c:	40021000 	.word	0x40021000
 80036a0:	40010c00 	.word	0x40010c00
 80036a4:	40010000 	.word	0x40010000

080036a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80036a8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80036aa:	e003      	b.n	80036b4 <LoopCopyDataInit>

080036ac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80036ac:	4b0b      	ldr	r3, [pc, #44]	; (80036dc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80036ae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80036b0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80036b2:	3104      	adds	r1, #4

080036b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80036b4:	480a      	ldr	r0, [pc, #40]	; (80036e0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80036b6:	4b0b      	ldr	r3, [pc, #44]	; (80036e4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80036b8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80036ba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80036bc:	d3f6      	bcc.n	80036ac <CopyDataInit>
  ldr r2, =_sbss
 80036be:	4a0a      	ldr	r2, [pc, #40]	; (80036e8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80036c0:	e002      	b.n	80036c8 <LoopFillZerobss>

080036c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80036c2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80036c4:	f842 3b04 	str.w	r3, [r2], #4

080036c8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80036c8:	4b08      	ldr	r3, [pc, #32]	; (80036ec <LoopFillZerobss+0x24>)
  cmp r2, r3
 80036ca:	429a      	cmp	r2, r3
  bcc FillZerobss
 80036cc:	d3f9      	bcc.n	80036c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80036ce:	f7ff fd29 	bl	8003124 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036d2:	f000 f815 	bl	8003700 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80036d6:	f7ff fb1b 	bl	8002d10 <main>
  bx lr
 80036da:	4770      	bx	lr
  ldr r3, =_sidata
 80036dc:	080040dc 	.word	0x080040dc
  ldr r0, =_sdata
 80036e0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80036e4:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 80036e8:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 80036ec:	2000017c 	.word	0x2000017c

080036f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80036f0:	e7fe      	b.n	80036f0 <ADC1_2_IRQHandler>
	...

080036f4 <__errno>:
 80036f4:	4b01      	ldr	r3, [pc, #4]	; (80036fc <__errno+0x8>)
 80036f6:	6818      	ldr	r0, [r3, #0]
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	20000010 	.word	0x20000010

08003700 <__libc_init_array>:
 8003700:	b570      	push	{r4, r5, r6, lr}
 8003702:	2500      	movs	r5, #0
 8003704:	4e0c      	ldr	r6, [pc, #48]	; (8003738 <__libc_init_array+0x38>)
 8003706:	4c0d      	ldr	r4, [pc, #52]	; (800373c <__libc_init_array+0x3c>)
 8003708:	1ba4      	subs	r4, r4, r6
 800370a:	10a4      	asrs	r4, r4, #2
 800370c:	42a5      	cmp	r5, r4
 800370e:	d109      	bne.n	8003724 <__libc_init_array+0x24>
 8003710:	f000 fc88 	bl	8004024 <_init>
 8003714:	2500      	movs	r5, #0
 8003716:	4e0a      	ldr	r6, [pc, #40]	; (8003740 <__libc_init_array+0x40>)
 8003718:	4c0a      	ldr	r4, [pc, #40]	; (8003744 <__libc_init_array+0x44>)
 800371a:	1ba4      	subs	r4, r4, r6
 800371c:	10a4      	asrs	r4, r4, #2
 800371e:	42a5      	cmp	r5, r4
 8003720:	d105      	bne.n	800372e <__libc_init_array+0x2e>
 8003722:	bd70      	pop	{r4, r5, r6, pc}
 8003724:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003728:	4798      	blx	r3
 800372a:	3501      	adds	r5, #1
 800372c:	e7ee      	b.n	800370c <__libc_init_array+0xc>
 800372e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003732:	4798      	blx	r3
 8003734:	3501      	adds	r5, #1
 8003736:	e7f2      	b.n	800371e <__libc_init_array+0x1e>
 8003738:	080040d4 	.word	0x080040d4
 800373c:	080040d4 	.word	0x080040d4
 8003740:	080040d4 	.word	0x080040d4
 8003744:	080040d8 	.word	0x080040d8

08003748 <memset>:
 8003748:	4603      	mov	r3, r0
 800374a:	4402      	add	r2, r0
 800374c:	4293      	cmp	r3, r2
 800374e:	d100      	bne.n	8003752 <memset+0xa>
 8003750:	4770      	bx	lr
 8003752:	f803 1b01 	strb.w	r1, [r3], #1
 8003756:	e7f9      	b.n	800374c <memset+0x4>

08003758 <_puts_r>:
 8003758:	b570      	push	{r4, r5, r6, lr}
 800375a:	460e      	mov	r6, r1
 800375c:	4605      	mov	r5, r0
 800375e:	b118      	cbz	r0, 8003768 <_puts_r+0x10>
 8003760:	6983      	ldr	r3, [r0, #24]
 8003762:	b90b      	cbnz	r3, 8003768 <_puts_r+0x10>
 8003764:	f000 fa0c 	bl	8003b80 <__sinit>
 8003768:	69ab      	ldr	r3, [r5, #24]
 800376a:	68ac      	ldr	r4, [r5, #8]
 800376c:	b913      	cbnz	r3, 8003774 <_puts_r+0x1c>
 800376e:	4628      	mov	r0, r5
 8003770:	f000 fa06 	bl	8003b80 <__sinit>
 8003774:	4b23      	ldr	r3, [pc, #140]	; (8003804 <_puts_r+0xac>)
 8003776:	429c      	cmp	r4, r3
 8003778:	d117      	bne.n	80037aa <_puts_r+0x52>
 800377a:	686c      	ldr	r4, [r5, #4]
 800377c:	89a3      	ldrh	r3, [r4, #12]
 800377e:	071b      	lsls	r3, r3, #28
 8003780:	d51d      	bpl.n	80037be <_puts_r+0x66>
 8003782:	6923      	ldr	r3, [r4, #16]
 8003784:	b1db      	cbz	r3, 80037be <_puts_r+0x66>
 8003786:	3e01      	subs	r6, #1
 8003788:	68a3      	ldr	r3, [r4, #8]
 800378a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800378e:	3b01      	subs	r3, #1
 8003790:	60a3      	str	r3, [r4, #8]
 8003792:	b9e9      	cbnz	r1, 80037d0 <_puts_r+0x78>
 8003794:	2b00      	cmp	r3, #0
 8003796:	da2e      	bge.n	80037f6 <_puts_r+0x9e>
 8003798:	4622      	mov	r2, r4
 800379a:	210a      	movs	r1, #10
 800379c:	4628      	mov	r0, r5
 800379e:	f000 f83f 	bl	8003820 <__swbuf_r>
 80037a2:	3001      	adds	r0, #1
 80037a4:	d011      	beq.n	80037ca <_puts_r+0x72>
 80037a6:	200a      	movs	r0, #10
 80037a8:	e011      	b.n	80037ce <_puts_r+0x76>
 80037aa:	4b17      	ldr	r3, [pc, #92]	; (8003808 <_puts_r+0xb0>)
 80037ac:	429c      	cmp	r4, r3
 80037ae:	d101      	bne.n	80037b4 <_puts_r+0x5c>
 80037b0:	68ac      	ldr	r4, [r5, #8]
 80037b2:	e7e3      	b.n	800377c <_puts_r+0x24>
 80037b4:	4b15      	ldr	r3, [pc, #84]	; (800380c <_puts_r+0xb4>)
 80037b6:	429c      	cmp	r4, r3
 80037b8:	bf08      	it	eq
 80037ba:	68ec      	ldreq	r4, [r5, #12]
 80037bc:	e7de      	b.n	800377c <_puts_r+0x24>
 80037be:	4621      	mov	r1, r4
 80037c0:	4628      	mov	r0, r5
 80037c2:	f000 f87f 	bl	80038c4 <__swsetup_r>
 80037c6:	2800      	cmp	r0, #0
 80037c8:	d0dd      	beq.n	8003786 <_puts_r+0x2e>
 80037ca:	f04f 30ff 	mov.w	r0, #4294967295
 80037ce:	bd70      	pop	{r4, r5, r6, pc}
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	da04      	bge.n	80037de <_puts_r+0x86>
 80037d4:	69a2      	ldr	r2, [r4, #24]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	dc06      	bgt.n	80037e8 <_puts_r+0x90>
 80037da:	290a      	cmp	r1, #10
 80037dc:	d004      	beq.n	80037e8 <_puts_r+0x90>
 80037de:	6823      	ldr	r3, [r4, #0]
 80037e0:	1c5a      	adds	r2, r3, #1
 80037e2:	6022      	str	r2, [r4, #0]
 80037e4:	7019      	strb	r1, [r3, #0]
 80037e6:	e7cf      	b.n	8003788 <_puts_r+0x30>
 80037e8:	4622      	mov	r2, r4
 80037ea:	4628      	mov	r0, r5
 80037ec:	f000 f818 	bl	8003820 <__swbuf_r>
 80037f0:	3001      	adds	r0, #1
 80037f2:	d1c9      	bne.n	8003788 <_puts_r+0x30>
 80037f4:	e7e9      	b.n	80037ca <_puts_r+0x72>
 80037f6:	200a      	movs	r0, #10
 80037f8:	6823      	ldr	r3, [r4, #0]
 80037fa:	1c5a      	adds	r2, r3, #1
 80037fc:	6022      	str	r2, [r4, #0]
 80037fe:	7018      	strb	r0, [r3, #0]
 8003800:	e7e5      	b.n	80037ce <_puts_r+0x76>
 8003802:	bf00      	nop
 8003804:	08004094 	.word	0x08004094
 8003808:	080040b4 	.word	0x080040b4
 800380c:	08004074 	.word	0x08004074

08003810 <puts>:
 8003810:	4b02      	ldr	r3, [pc, #8]	; (800381c <puts+0xc>)
 8003812:	4601      	mov	r1, r0
 8003814:	6818      	ldr	r0, [r3, #0]
 8003816:	f7ff bf9f 	b.w	8003758 <_puts_r>
 800381a:	bf00      	nop
 800381c:	20000010 	.word	0x20000010

08003820 <__swbuf_r>:
 8003820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003822:	460e      	mov	r6, r1
 8003824:	4614      	mov	r4, r2
 8003826:	4605      	mov	r5, r0
 8003828:	b118      	cbz	r0, 8003832 <__swbuf_r+0x12>
 800382a:	6983      	ldr	r3, [r0, #24]
 800382c:	b90b      	cbnz	r3, 8003832 <__swbuf_r+0x12>
 800382e:	f000 f9a7 	bl	8003b80 <__sinit>
 8003832:	4b21      	ldr	r3, [pc, #132]	; (80038b8 <__swbuf_r+0x98>)
 8003834:	429c      	cmp	r4, r3
 8003836:	d12a      	bne.n	800388e <__swbuf_r+0x6e>
 8003838:	686c      	ldr	r4, [r5, #4]
 800383a:	69a3      	ldr	r3, [r4, #24]
 800383c:	60a3      	str	r3, [r4, #8]
 800383e:	89a3      	ldrh	r3, [r4, #12]
 8003840:	071a      	lsls	r2, r3, #28
 8003842:	d52e      	bpl.n	80038a2 <__swbuf_r+0x82>
 8003844:	6923      	ldr	r3, [r4, #16]
 8003846:	b363      	cbz	r3, 80038a2 <__swbuf_r+0x82>
 8003848:	6923      	ldr	r3, [r4, #16]
 800384a:	6820      	ldr	r0, [r4, #0]
 800384c:	b2f6      	uxtb	r6, r6
 800384e:	1ac0      	subs	r0, r0, r3
 8003850:	6963      	ldr	r3, [r4, #20]
 8003852:	4637      	mov	r7, r6
 8003854:	4283      	cmp	r3, r0
 8003856:	dc04      	bgt.n	8003862 <__swbuf_r+0x42>
 8003858:	4621      	mov	r1, r4
 800385a:	4628      	mov	r0, r5
 800385c:	f000 f926 	bl	8003aac <_fflush_r>
 8003860:	bb28      	cbnz	r0, 80038ae <__swbuf_r+0x8e>
 8003862:	68a3      	ldr	r3, [r4, #8]
 8003864:	3001      	adds	r0, #1
 8003866:	3b01      	subs	r3, #1
 8003868:	60a3      	str	r3, [r4, #8]
 800386a:	6823      	ldr	r3, [r4, #0]
 800386c:	1c5a      	adds	r2, r3, #1
 800386e:	6022      	str	r2, [r4, #0]
 8003870:	701e      	strb	r6, [r3, #0]
 8003872:	6963      	ldr	r3, [r4, #20]
 8003874:	4283      	cmp	r3, r0
 8003876:	d004      	beq.n	8003882 <__swbuf_r+0x62>
 8003878:	89a3      	ldrh	r3, [r4, #12]
 800387a:	07db      	lsls	r3, r3, #31
 800387c:	d519      	bpl.n	80038b2 <__swbuf_r+0x92>
 800387e:	2e0a      	cmp	r6, #10
 8003880:	d117      	bne.n	80038b2 <__swbuf_r+0x92>
 8003882:	4621      	mov	r1, r4
 8003884:	4628      	mov	r0, r5
 8003886:	f000 f911 	bl	8003aac <_fflush_r>
 800388a:	b190      	cbz	r0, 80038b2 <__swbuf_r+0x92>
 800388c:	e00f      	b.n	80038ae <__swbuf_r+0x8e>
 800388e:	4b0b      	ldr	r3, [pc, #44]	; (80038bc <__swbuf_r+0x9c>)
 8003890:	429c      	cmp	r4, r3
 8003892:	d101      	bne.n	8003898 <__swbuf_r+0x78>
 8003894:	68ac      	ldr	r4, [r5, #8]
 8003896:	e7d0      	b.n	800383a <__swbuf_r+0x1a>
 8003898:	4b09      	ldr	r3, [pc, #36]	; (80038c0 <__swbuf_r+0xa0>)
 800389a:	429c      	cmp	r4, r3
 800389c:	bf08      	it	eq
 800389e:	68ec      	ldreq	r4, [r5, #12]
 80038a0:	e7cb      	b.n	800383a <__swbuf_r+0x1a>
 80038a2:	4621      	mov	r1, r4
 80038a4:	4628      	mov	r0, r5
 80038a6:	f000 f80d 	bl	80038c4 <__swsetup_r>
 80038aa:	2800      	cmp	r0, #0
 80038ac:	d0cc      	beq.n	8003848 <__swbuf_r+0x28>
 80038ae:	f04f 37ff 	mov.w	r7, #4294967295
 80038b2:	4638      	mov	r0, r7
 80038b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038b6:	bf00      	nop
 80038b8:	08004094 	.word	0x08004094
 80038bc:	080040b4 	.word	0x080040b4
 80038c0:	08004074 	.word	0x08004074

080038c4 <__swsetup_r>:
 80038c4:	4b32      	ldr	r3, [pc, #200]	; (8003990 <__swsetup_r+0xcc>)
 80038c6:	b570      	push	{r4, r5, r6, lr}
 80038c8:	681d      	ldr	r5, [r3, #0]
 80038ca:	4606      	mov	r6, r0
 80038cc:	460c      	mov	r4, r1
 80038ce:	b125      	cbz	r5, 80038da <__swsetup_r+0x16>
 80038d0:	69ab      	ldr	r3, [r5, #24]
 80038d2:	b913      	cbnz	r3, 80038da <__swsetup_r+0x16>
 80038d4:	4628      	mov	r0, r5
 80038d6:	f000 f953 	bl	8003b80 <__sinit>
 80038da:	4b2e      	ldr	r3, [pc, #184]	; (8003994 <__swsetup_r+0xd0>)
 80038dc:	429c      	cmp	r4, r3
 80038de:	d10f      	bne.n	8003900 <__swsetup_r+0x3c>
 80038e0:	686c      	ldr	r4, [r5, #4]
 80038e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	0715      	lsls	r5, r2, #28
 80038ea:	d42c      	bmi.n	8003946 <__swsetup_r+0x82>
 80038ec:	06d0      	lsls	r0, r2, #27
 80038ee:	d411      	bmi.n	8003914 <__swsetup_r+0x50>
 80038f0:	2209      	movs	r2, #9
 80038f2:	6032      	str	r2, [r6, #0]
 80038f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038f8:	81a3      	strh	r3, [r4, #12]
 80038fa:	f04f 30ff 	mov.w	r0, #4294967295
 80038fe:	e03e      	b.n	800397e <__swsetup_r+0xba>
 8003900:	4b25      	ldr	r3, [pc, #148]	; (8003998 <__swsetup_r+0xd4>)
 8003902:	429c      	cmp	r4, r3
 8003904:	d101      	bne.n	800390a <__swsetup_r+0x46>
 8003906:	68ac      	ldr	r4, [r5, #8]
 8003908:	e7eb      	b.n	80038e2 <__swsetup_r+0x1e>
 800390a:	4b24      	ldr	r3, [pc, #144]	; (800399c <__swsetup_r+0xd8>)
 800390c:	429c      	cmp	r4, r3
 800390e:	bf08      	it	eq
 8003910:	68ec      	ldreq	r4, [r5, #12]
 8003912:	e7e6      	b.n	80038e2 <__swsetup_r+0x1e>
 8003914:	0751      	lsls	r1, r2, #29
 8003916:	d512      	bpl.n	800393e <__swsetup_r+0x7a>
 8003918:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800391a:	b141      	cbz	r1, 800392e <__swsetup_r+0x6a>
 800391c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003920:	4299      	cmp	r1, r3
 8003922:	d002      	beq.n	800392a <__swsetup_r+0x66>
 8003924:	4630      	mov	r0, r6
 8003926:	f000 fa19 	bl	8003d5c <_free_r>
 800392a:	2300      	movs	r3, #0
 800392c:	6363      	str	r3, [r4, #52]	; 0x34
 800392e:	89a3      	ldrh	r3, [r4, #12]
 8003930:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003934:	81a3      	strh	r3, [r4, #12]
 8003936:	2300      	movs	r3, #0
 8003938:	6063      	str	r3, [r4, #4]
 800393a:	6923      	ldr	r3, [r4, #16]
 800393c:	6023      	str	r3, [r4, #0]
 800393e:	89a3      	ldrh	r3, [r4, #12]
 8003940:	f043 0308 	orr.w	r3, r3, #8
 8003944:	81a3      	strh	r3, [r4, #12]
 8003946:	6923      	ldr	r3, [r4, #16]
 8003948:	b94b      	cbnz	r3, 800395e <__swsetup_r+0x9a>
 800394a:	89a3      	ldrh	r3, [r4, #12]
 800394c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003950:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003954:	d003      	beq.n	800395e <__swsetup_r+0x9a>
 8003956:	4621      	mov	r1, r4
 8003958:	4630      	mov	r0, r6
 800395a:	f000 f9bf 	bl	8003cdc <__smakebuf_r>
 800395e:	89a2      	ldrh	r2, [r4, #12]
 8003960:	f012 0301 	ands.w	r3, r2, #1
 8003964:	d00c      	beq.n	8003980 <__swsetup_r+0xbc>
 8003966:	2300      	movs	r3, #0
 8003968:	60a3      	str	r3, [r4, #8]
 800396a:	6963      	ldr	r3, [r4, #20]
 800396c:	425b      	negs	r3, r3
 800396e:	61a3      	str	r3, [r4, #24]
 8003970:	6923      	ldr	r3, [r4, #16]
 8003972:	b953      	cbnz	r3, 800398a <__swsetup_r+0xc6>
 8003974:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003978:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800397c:	d1ba      	bne.n	80038f4 <__swsetup_r+0x30>
 800397e:	bd70      	pop	{r4, r5, r6, pc}
 8003980:	0792      	lsls	r2, r2, #30
 8003982:	bf58      	it	pl
 8003984:	6963      	ldrpl	r3, [r4, #20]
 8003986:	60a3      	str	r3, [r4, #8]
 8003988:	e7f2      	b.n	8003970 <__swsetup_r+0xac>
 800398a:	2000      	movs	r0, #0
 800398c:	e7f7      	b.n	800397e <__swsetup_r+0xba>
 800398e:	bf00      	nop
 8003990:	20000010 	.word	0x20000010
 8003994:	08004094 	.word	0x08004094
 8003998:	080040b4 	.word	0x080040b4
 800399c:	08004074 	.word	0x08004074

080039a0 <__sflush_r>:
 80039a0:	898a      	ldrh	r2, [r1, #12]
 80039a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039a6:	4605      	mov	r5, r0
 80039a8:	0710      	lsls	r0, r2, #28
 80039aa:	460c      	mov	r4, r1
 80039ac:	d458      	bmi.n	8003a60 <__sflush_r+0xc0>
 80039ae:	684b      	ldr	r3, [r1, #4]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	dc05      	bgt.n	80039c0 <__sflush_r+0x20>
 80039b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	dc02      	bgt.n	80039c0 <__sflush_r+0x20>
 80039ba:	2000      	movs	r0, #0
 80039bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80039c2:	2e00      	cmp	r6, #0
 80039c4:	d0f9      	beq.n	80039ba <__sflush_r+0x1a>
 80039c6:	2300      	movs	r3, #0
 80039c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80039cc:	682f      	ldr	r7, [r5, #0]
 80039ce:	6a21      	ldr	r1, [r4, #32]
 80039d0:	602b      	str	r3, [r5, #0]
 80039d2:	d032      	beq.n	8003a3a <__sflush_r+0x9a>
 80039d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80039d6:	89a3      	ldrh	r3, [r4, #12]
 80039d8:	075a      	lsls	r2, r3, #29
 80039da:	d505      	bpl.n	80039e8 <__sflush_r+0x48>
 80039dc:	6863      	ldr	r3, [r4, #4]
 80039de:	1ac0      	subs	r0, r0, r3
 80039e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80039e2:	b10b      	cbz	r3, 80039e8 <__sflush_r+0x48>
 80039e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039e6:	1ac0      	subs	r0, r0, r3
 80039e8:	2300      	movs	r3, #0
 80039ea:	4602      	mov	r2, r0
 80039ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80039ee:	6a21      	ldr	r1, [r4, #32]
 80039f0:	4628      	mov	r0, r5
 80039f2:	47b0      	blx	r6
 80039f4:	1c43      	adds	r3, r0, #1
 80039f6:	89a3      	ldrh	r3, [r4, #12]
 80039f8:	d106      	bne.n	8003a08 <__sflush_r+0x68>
 80039fa:	6829      	ldr	r1, [r5, #0]
 80039fc:	291d      	cmp	r1, #29
 80039fe:	d848      	bhi.n	8003a92 <__sflush_r+0xf2>
 8003a00:	4a29      	ldr	r2, [pc, #164]	; (8003aa8 <__sflush_r+0x108>)
 8003a02:	40ca      	lsrs	r2, r1
 8003a04:	07d6      	lsls	r6, r2, #31
 8003a06:	d544      	bpl.n	8003a92 <__sflush_r+0xf2>
 8003a08:	2200      	movs	r2, #0
 8003a0a:	6062      	str	r2, [r4, #4]
 8003a0c:	6922      	ldr	r2, [r4, #16]
 8003a0e:	04d9      	lsls	r1, r3, #19
 8003a10:	6022      	str	r2, [r4, #0]
 8003a12:	d504      	bpl.n	8003a1e <__sflush_r+0x7e>
 8003a14:	1c42      	adds	r2, r0, #1
 8003a16:	d101      	bne.n	8003a1c <__sflush_r+0x7c>
 8003a18:	682b      	ldr	r3, [r5, #0]
 8003a1a:	b903      	cbnz	r3, 8003a1e <__sflush_r+0x7e>
 8003a1c:	6560      	str	r0, [r4, #84]	; 0x54
 8003a1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a20:	602f      	str	r7, [r5, #0]
 8003a22:	2900      	cmp	r1, #0
 8003a24:	d0c9      	beq.n	80039ba <__sflush_r+0x1a>
 8003a26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a2a:	4299      	cmp	r1, r3
 8003a2c:	d002      	beq.n	8003a34 <__sflush_r+0x94>
 8003a2e:	4628      	mov	r0, r5
 8003a30:	f000 f994 	bl	8003d5c <_free_r>
 8003a34:	2000      	movs	r0, #0
 8003a36:	6360      	str	r0, [r4, #52]	; 0x34
 8003a38:	e7c0      	b.n	80039bc <__sflush_r+0x1c>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	4628      	mov	r0, r5
 8003a3e:	47b0      	blx	r6
 8003a40:	1c41      	adds	r1, r0, #1
 8003a42:	d1c8      	bne.n	80039d6 <__sflush_r+0x36>
 8003a44:	682b      	ldr	r3, [r5, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d0c5      	beq.n	80039d6 <__sflush_r+0x36>
 8003a4a:	2b1d      	cmp	r3, #29
 8003a4c:	d001      	beq.n	8003a52 <__sflush_r+0xb2>
 8003a4e:	2b16      	cmp	r3, #22
 8003a50:	d101      	bne.n	8003a56 <__sflush_r+0xb6>
 8003a52:	602f      	str	r7, [r5, #0]
 8003a54:	e7b1      	b.n	80039ba <__sflush_r+0x1a>
 8003a56:	89a3      	ldrh	r3, [r4, #12]
 8003a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a5c:	81a3      	strh	r3, [r4, #12]
 8003a5e:	e7ad      	b.n	80039bc <__sflush_r+0x1c>
 8003a60:	690f      	ldr	r7, [r1, #16]
 8003a62:	2f00      	cmp	r7, #0
 8003a64:	d0a9      	beq.n	80039ba <__sflush_r+0x1a>
 8003a66:	0793      	lsls	r3, r2, #30
 8003a68:	bf18      	it	ne
 8003a6a:	2300      	movne	r3, #0
 8003a6c:	680e      	ldr	r6, [r1, #0]
 8003a6e:	bf08      	it	eq
 8003a70:	694b      	ldreq	r3, [r1, #20]
 8003a72:	eba6 0807 	sub.w	r8, r6, r7
 8003a76:	600f      	str	r7, [r1, #0]
 8003a78:	608b      	str	r3, [r1, #8]
 8003a7a:	f1b8 0f00 	cmp.w	r8, #0
 8003a7e:	dd9c      	ble.n	80039ba <__sflush_r+0x1a>
 8003a80:	4643      	mov	r3, r8
 8003a82:	463a      	mov	r2, r7
 8003a84:	6a21      	ldr	r1, [r4, #32]
 8003a86:	4628      	mov	r0, r5
 8003a88:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003a8a:	47b0      	blx	r6
 8003a8c:	2800      	cmp	r0, #0
 8003a8e:	dc06      	bgt.n	8003a9e <__sflush_r+0xfe>
 8003a90:	89a3      	ldrh	r3, [r4, #12]
 8003a92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a96:	81a3      	strh	r3, [r4, #12]
 8003a98:	f04f 30ff 	mov.w	r0, #4294967295
 8003a9c:	e78e      	b.n	80039bc <__sflush_r+0x1c>
 8003a9e:	4407      	add	r7, r0
 8003aa0:	eba8 0800 	sub.w	r8, r8, r0
 8003aa4:	e7e9      	b.n	8003a7a <__sflush_r+0xda>
 8003aa6:	bf00      	nop
 8003aa8:	20400001 	.word	0x20400001

08003aac <_fflush_r>:
 8003aac:	b538      	push	{r3, r4, r5, lr}
 8003aae:	690b      	ldr	r3, [r1, #16]
 8003ab0:	4605      	mov	r5, r0
 8003ab2:	460c      	mov	r4, r1
 8003ab4:	b1db      	cbz	r3, 8003aee <_fflush_r+0x42>
 8003ab6:	b118      	cbz	r0, 8003ac0 <_fflush_r+0x14>
 8003ab8:	6983      	ldr	r3, [r0, #24]
 8003aba:	b90b      	cbnz	r3, 8003ac0 <_fflush_r+0x14>
 8003abc:	f000 f860 	bl	8003b80 <__sinit>
 8003ac0:	4b0c      	ldr	r3, [pc, #48]	; (8003af4 <_fflush_r+0x48>)
 8003ac2:	429c      	cmp	r4, r3
 8003ac4:	d109      	bne.n	8003ada <_fflush_r+0x2e>
 8003ac6:	686c      	ldr	r4, [r5, #4]
 8003ac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003acc:	b17b      	cbz	r3, 8003aee <_fflush_r+0x42>
 8003ace:	4621      	mov	r1, r4
 8003ad0:	4628      	mov	r0, r5
 8003ad2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ad6:	f7ff bf63 	b.w	80039a0 <__sflush_r>
 8003ada:	4b07      	ldr	r3, [pc, #28]	; (8003af8 <_fflush_r+0x4c>)
 8003adc:	429c      	cmp	r4, r3
 8003ade:	d101      	bne.n	8003ae4 <_fflush_r+0x38>
 8003ae0:	68ac      	ldr	r4, [r5, #8]
 8003ae2:	e7f1      	b.n	8003ac8 <_fflush_r+0x1c>
 8003ae4:	4b05      	ldr	r3, [pc, #20]	; (8003afc <_fflush_r+0x50>)
 8003ae6:	429c      	cmp	r4, r3
 8003ae8:	bf08      	it	eq
 8003aea:	68ec      	ldreq	r4, [r5, #12]
 8003aec:	e7ec      	b.n	8003ac8 <_fflush_r+0x1c>
 8003aee:	2000      	movs	r0, #0
 8003af0:	bd38      	pop	{r3, r4, r5, pc}
 8003af2:	bf00      	nop
 8003af4:	08004094 	.word	0x08004094
 8003af8:	080040b4 	.word	0x080040b4
 8003afc:	08004074 	.word	0x08004074

08003b00 <std>:
 8003b00:	2300      	movs	r3, #0
 8003b02:	b510      	push	{r4, lr}
 8003b04:	4604      	mov	r4, r0
 8003b06:	e9c0 3300 	strd	r3, r3, [r0]
 8003b0a:	6083      	str	r3, [r0, #8]
 8003b0c:	8181      	strh	r1, [r0, #12]
 8003b0e:	6643      	str	r3, [r0, #100]	; 0x64
 8003b10:	81c2      	strh	r2, [r0, #14]
 8003b12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b16:	6183      	str	r3, [r0, #24]
 8003b18:	4619      	mov	r1, r3
 8003b1a:	2208      	movs	r2, #8
 8003b1c:	305c      	adds	r0, #92	; 0x5c
 8003b1e:	f7ff fe13 	bl	8003748 <memset>
 8003b22:	4b05      	ldr	r3, [pc, #20]	; (8003b38 <std+0x38>)
 8003b24:	6224      	str	r4, [r4, #32]
 8003b26:	6263      	str	r3, [r4, #36]	; 0x24
 8003b28:	4b04      	ldr	r3, [pc, #16]	; (8003b3c <std+0x3c>)
 8003b2a:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b2c:	4b04      	ldr	r3, [pc, #16]	; (8003b40 <std+0x40>)
 8003b2e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b30:	4b04      	ldr	r3, [pc, #16]	; (8003b44 <std+0x44>)
 8003b32:	6323      	str	r3, [r4, #48]	; 0x30
 8003b34:	bd10      	pop	{r4, pc}
 8003b36:	bf00      	nop
 8003b38:	08003ec9 	.word	0x08003ec9
 8003b3c:	08003eeb 	.word	0x08003eeb
 8003b40:	08003f23 	.word	0x08003f23
 8003b44:	08003f47 	.word	0x08003f47

08003b48 <_cleanup_r>:
 8003b48:	4901      	ldr	r1, [pc, #4]	; (8003b50 <_cleanup_r+0x8>)
 8003b4a:	f000 b885 	b.w	8003c58 <_fwalk_reent>
 8003b4e:	bf00      	nop
 8003b50:	08003aad 	.word	0x08003aad

08003b54 <__sfmoreglue>:
 8003b54:	b570      	push	{r4, r5, r6, lr}
 8003b56:	2568      	movs	r5, #104	; 0x68
 8003b58:	1e4a      	subs	r2, r1, #1
 8003b5a:	4355      	muls	r5, r2
 8003b5c:	460e      	mov	r6, r1
 8003b5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003b62:	f000 f947 	bl	8003df4 <_malloc_r>
 8003b66:	4604      	mov	r4, r0
 8003b68:	b140      	cbz	r0, 8003b7c <__sfmoreglue+0x28>
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	e9c0 1600 	strd	r1, r6, [r0]
 8003b70:	300c      	adds	r0, #12
 8003b72:	60a0      	str	r0, [r4, #8]
 8003b74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003b78:	f7ff fde6 	bl	8003748 <memset>
 8003b7c:	4620      	mov	r0, r4
 8003b7e:	bd70      	pop	{r4, r5, r6, pc}

08003b80 <__sinit>:
 8003b80:	6983      	ldr	r3, [r0, #24]
 8003b82:	b510      	push	{r4, lr}
 8003b84:	4604      	mov	r4, r0
 8003b86:	bb33      	cbnz	r3, 8003bd6 <__sinit+0x56>
 8003b88:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003b8c:	6503      	str	r3, [r0, #80]	; 0x50
 8003b8e:	4b12      	ldr	r3, [pc, #72]	; (8003bd8 <__sinit+0x58>)
 8003b90:	4a12      	ldr	r2, [pc, #72]	; (8003bdc <__sinit+0x5c>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6282      	str	r2, [r0, #40]	; 0x28
 8003b96:	4298      	cmp	r0, r3
 8003b98:	bf04      	itt	eq
 8003b9a:	2301      	moveq	r3, #1
 8003b9c:	6183      	streq	r3, [r0, #24]
 8003b9e:	f000 f81f 	bl	8003be0 <__sfp>
 8003ba2:	6060      	str	r0, [r4, #4]
 8003ba4:	4620      	mov	r0, r4
 8003ba6:	f000 f81b 	bl	8003be0 <__sfp>
 8003baa:	60a0      	str	r0, [r4, #8]
 8003bac:	4620      	mov	r0, r4
 8003bae:	f000 f817 	bl	8003be0 <__sfp>
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	60e0      	str	r0, [r4, #12]
 8003bb6:	2104      	movs	r1, #4
 8003bb8:	6860      	ldr	r0, [r4, #4]
 8003bba:	f7ff ffa1 	bl	8003b00 <std>
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	2109      	movs	r1, #9
 8003bc2:	68a0      	ldr	r0, [r4, #8]
 8003bc4:	f7ff ff9c 	bl	8003b00 <std>
 8003bc8:	2202      	movs	r2, #2
 8003bca:	2112      	movs	r1, #18
 8003bcc:	68e0      	ldr	r0, [r4, #12]
 8003bce:	f7ff ff97 	bl	8003b00 <std>
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	61a3      	str	r3, [r4, #24]
 8003bd6:	bd10      	pop	{r4, pc}
 8003bd8:	08004070 	.word	0x08004070
 8003bdc:	08003b49 	.word	0x08003b49

08003be0 <__sfp>:
 8003be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003be2:	4b1b      	ldr	r3, [pc, #108]	; (8003c50 <__sfp+0x70>)
 8003be4:	4607      	mov	r7, r0
 8003be6:	681e      	ldr	r6, [r3, #0]
 8003be8:	69b3      	ldr	r3, [r6, #24]
 8003bea:	b913      	cbnz	r3, 8003bf2 <__sfp+0x12>
 8003bec:	4630      	mov	r0, r6
 8003bee:	f7ff ffc7 	bl	8003b80 <__sinit>
 8003bf2:	3648      	adds	r6, #72	; 0x48
 8003bf4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	d503      	bpl.n	8003c04 <__sfp+0x24>
 8003bfc:	6833      	ldr	r3, [r6, #0]
 8003bfe:	b133      	cbz	r3, 8003c0e <__sfp+0x2e>
 8003c00:	6836      	ldr	r6, [r6, #0]
 8003c02:	e7f7      	b.n	8003bf4 <__sfp+0x14>
 8003c04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003c08:	b16d      	cbz	r5, 8003c26 <__sfp+0x46>
 8003c0a:	3468      	adds	r4, #104	; 0x68
 8003c0c:	e7f4      	b.n	8003bf8 <__sfp+0x18>
 8003c0e:	2104      	movs	r1, #4
 8003c10:	4638      	mov	r0, r7
 8003c12:	f7ff ff9f 	bl	8003b54 <__sfmoreglue>
 8003c16:	6030      	str	r0, [r6, #0]
 8003c18:	2800      	cmp	r0, #0
 8003c1a:	d1f1      	bne.n	8003c00 <__sfp+0x20>
 8003c1c:	230c      	movs	r3, #12
 8003c1e:	4604      	mov	r4, r0
 8003c20:	603b      	str	r3, [r7, #0]
 8003c22:	4620      	mov	r0, r4
 8003c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c26:	4b0b      	ldr	r3, [pc, #44]	; (8003c54 <__sfp+0x74>)
 8003c28:	6665      	str	r5, [r4, #100]	; 0x64
 8003c2a:	e9c4 5500 	strd	r5, r5, [r4]
 8003c2e:	60a5      	str	r5, [r4, #8]
 8003c30:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003c34:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003c38:	2208      	movs	r2, #8
 8003c3a:	4629      	mov	r1, r5
 8003c3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003c40:	f7ff fd82 	bl	8003748 <memset>
 8003c44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003c48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003c4c:	e7e9      	b.n	8003c22 <__sfp+0x42>
 8003c4e:	bf00      	nop
 8003c50:	08004070 	.word	0x08004070
 8003c54:	ffff0001 	.word	0xffff0001

08003c58 <_fwalk_reent>:
 8003c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c5c:	4680      	mov	r8, r0
 8003c5e:	4689      	mov	r9, r1
 8003c60:	2600      	movs	r6, #0
 8003c62:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003c66:	b914      	cbnz	r4, 8003c6e <_fwalk_reent+0x16>
 8003c68:	4630      	mov	r0, r6
 8003c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c6e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003c72:	3f01      	subs	r7, #1
 8003c74:	d501      	bpl.n	8003c7a <_fwalk_reent+0x22>
 8003c76:	6824      	ldr	r4, [r4, #0]
 8003c78:	e7f5      	b.n	8003c66 <_fwalk_reent+0xe>
 8003c7a:	89ab      	ldrh	r3, [r5, #12]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d907      	bls.n	8003c90 <_fwalk_reent+0x38>
 8003c80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c84:	3301      	adds	r3, #1
 8003c86:	d003      	beq.n	8003c90 <_fwalk_reent+0x38>
 8003c88:	4629      	mov	r1, r5
 8003c8a:	4640      	mov	r0, r8
 8003c8c:	47c8      	blx	r9
 8003c8e:	4306      	orrs	r6, r0
 8003c90:	3568      	adds	r5, #104	; 0x68
 8003c92:	e7ee      	b.n	8003c72 <_fwalk_reent+0x1a>

08003c94 <__swhatbuf_r>:
 8003c94:	b570      	push	{r4, r5, r6, lr}
 8003c96:	460e      	mov	r6, r1
 8003c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c9c:	b096      	sub	sp, #88	; 0x58
 8003c9e:	2900      	cmp	r1, #0
 8003ca0:	4614      	mov	r4, r2
 8003ca2:	461d      	mov	r5, r3
 8003ca4:	da07      	bge.n	8003cb6 <__swhatbuf_r+0x22>
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	602b      	str	r3, [r5, #0]
 8003caa:	89b3      	ldrh	r3, [r6, #12]
 8003cac:	061a      	lsls	r2, r3, #24
 8003cae:	d410      	bmi.n	8003cd2 <__swhatbuf_r+0x3e>
 8003cb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cb4:	e00e      	b.n	8003cd4 <__swhatbuf_r+0x40>
 8003cb6:	466a      	mov	r2, sp
 8003cb8:	f000 f96c 	bl	8003f94 <_fstat_r>
 8003cbc:	2800      	cmp	r0, #0
 8003cbe:	dbf2      	blt.n	8003ca6 <__swhatbuf_r+0x12>
 8003cc0:	9a01      	ldr	r2, [sp, #4]
 8003cc2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003cc6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003cca:	425a      	negs	r2, r3
 8003ccc:	415a      	adcs	r2, r3
 8003cce:	602a      	str	r2, [r5, #0]
 8003cd0:	e7ee      	b.n	8003cb0 <__swhatbuf_r+0x1c>
 8003cd2:	2340      	movs	r3, #64	; 0x40
 8003cd4:	2000      	movs	r0, #0
 8003cd6:	6023      	str	r3, [r4, #0]
 8003cd8:	b016      	add	sp, #88	; 0x58
 8003cda:	bd70      	pop	{r4, r5, r6, pc}

08003cdc <__smakebuf_r>:
 8003cdc:	898b      	ldrh	r3, [r1, #12]
 8003cde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003ce0:	079d      	lsls	r5, r3, #30
 8003ce2:	4606      	mov	r6, r0
 8003ce4:	460c      	mov	r4, r1
 8003ce6:	d507      	bpl.n	8003cf8 <__smakebuf_r+0x1c>
 8003ce8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003cec:	6023      	str	r3, [r4, #0]
 8003cee:	6123      	str	r3, [r4, #16]
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	6163      	str	r3, [r4, #20]
 8003cf4:	b002      	add	sp, #8
 8003cf6:	bd70      	pop	{r4, r5, r6, pc}
 8003cf8:	ab01      	add	r3, sp, #4
 8003cfa:	466a      	mov	r2, sp
 8003cfc:	f7ff ffca 	bl	8003c94 <__swhatbuf_r>
 8003d00:	9900      	ldr	r1, [sp, #0]
 8003d02:	4605      	mov	r5, r0
 8003d04:	4630      	mov	r0, r6
 8003d06:	f000 f875 	bl	8003df4 <_malloc_r>
 8003d0a:	b948      	cbnz	r0, 8003d20 <__smakebuf_r+0x44>
 8003d0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d10:	059a      	lsls	r2, r3, #22
 8003d12:	d4ef      	bmi.n	8003cf4 <__smakebuf_r+0x18>
 8003d14:	f023 0303 	bic.w	r3, r3, #3
 8003d18:	f043 0302 	orr.w	r3, r3, #2
 8003d1c:	81a3      	strh	r3, [r4, #12]
 8003d1e:	e7e3      	b.n	8003ce8 <__smakebuf_r+0xc>
 8003d20:	4b0d      	ldr	r3, [pc, #52]	; (8003d58 <__smakebuf_r+0x7c>)
 8003d22:	62b3      	str	r3, [r6, #40]	; 0x28
 8003d24:	89a3      	ldrh	r3, [r4, #12]
 8003d26:	6020      	str	r0, [r4, #0]
 8003d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d2c:	81a3      	strh	r3, [r4, #12]
 8003d2e:	9b00      	ldr	r3, [sp, #0]
 8003d30:	6120      	str	r0, [r4, #16]
 8003d32:	6163      	str	r3, [r4, #20]
 8003d34:	9b01      	ldr	r3, [sp, #4]
 8003d36:	b15b      	cbz	r3, 8003d50 <__smakebuf_r+0x74>
 8003d38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d3c:	4630      	mov	r0, r6
 8003d3e:	f000 f93b 	bl	8003fb8 <_isatty_r>
 8003d42:	b128      	cbz	r0, 8003d50 <__smakebuf_r+0x74>
 8003d44:	89a3      	ldrh	r3, [r4, #12]
 8003d46:	f023 0303 	bic.w	r3, r3, #3
 8003d4a:	f043 0301 	orr.w	r3, r3, #1
 8003d4e:	81a3      	strh	r3, [r4, #12]
 8003d50:	89a3      	ldrh	r3, [r4, #12]
 8003d52:	431d      	orrs	r5, r3
 8003d54:	81a5      	strh	r5, [r4, #12]
 8003d56:	e7cd      	b.n	8003cf4 <__smakebuf_r+0x18>
 8003d58:	08003b49 	.word	0x08003b49

08003d5c <_free_r>:
 8003d5c:	b538      	push	{r3, r4, r5, lr}
 8003d5e:	4605      	mov	r5, r0
 8003d60:	2900      	cmp	r1, #0
 8003d62:	d043      	beq.n	8003dec <_free_r+0x90>
 8003d64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d68:	1f0c      	subs	r4, r1, #4
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	bfb8      	it	lt
 8003d6e:	18e4      	addlt	r4, r4, r3
 8003d70:	f000 f944 	bl	8003ffc <__malloc_lock>
 8003d74:	4a1e      	ldr	r2, [pc, #120]	; (8003df0 <_free_r+0x94>)
 8003d76:	6813      	ldr	r3, [r2, #0]
 8003d78:	4610      	mov	r0, r2
 8003d7a:	b933      	cbnz	r3, 8003d8a <_free_r+0x2e>
 8003d7c:	6063      	str	r3, [r4, #4]
 8003d7e:	6014      	str	r4, [r2, #0]
 8003d80:	4628      	mov	r0, r5
 8003d82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d86:	f000 b93a 	b.w	8003ffe <__malloc_unlock>
 8003d8a:	42a3      	cmp	r3, r4
 8003d8c:	d90b      	bls.n	8003da6 <_free_r+0x4a>
 8003d8e:	6821      	ldr	r1, [r4, #0]
 8003d90:	1862      	adds	r2, r4, r1
 8003d92:	4293      	cmp	r3, r2
 8003d94:	bf01      	itttt	eq
 8003d96:	681a      	ldreq	r2, [r3, #0]
 8003d98:	685b      	ldreq	r3, [r3, #4]
 8003d9a:	1852      	addeq	r2, r2, r1
 8003d9c:	6022      	streq	r2, [r4, #0]
 8003d9e:	6063      	str	r3, [r4, #4]
 8003da0:	6004      	str	r4, [r0, #0]
 8003da2:	e7ed      	b.n	8003d80 <_free_r+0x24>
 8003da4:	4613      	mov	r3, r2
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	b10a      	cbz	r2, 8003dae <_free_r+0x52>
 8003daa:	42a2      	cmp	r2, r4
 8003dac:	d9fa      	bls.n	8003da4 <_free_r+0x48>
 8003dae:	6819      	ldr	r1, [r3, #0]
 8003db0:	1858      	adds	r0, r3, r1
 8003db2:	42a0      	cmp	r0, r4
 8003db4:	d10b      	bne.n	8003dce <_free_r+0x72>
 8003db6:	6820      	ldr	r0, [r4, #0]
 8003db8:	4401      	add	r1, r0
 8003dba:	1858      	adds	r0, r3, r1
 8003dbc:	4282      	cmp	r2, r0
 8003dbe:	6019      	str	r1, [r3, #0]
 8003dc0:	d1de      	bne.n	8003d80 <_free_r+0x24>
 8003dc2:	6810      	ldr	r0, [r2, #0]
 8003dc4:	6852      	ldr	r2, [r2, #4]
 8003dc6:	4401      	add	r1, r0
 8003dc8:	6019      	str	r1, [r3, #0]
 8003dca:	605a      	str	r2, [r3, #4]
 8003dcc:	e7d8      	b.n	8003d80 <_free_r+0x24>
 8003dce:	d902      	bls.n	8003dd6 <_free_r+0x7a>
 8003dd0:	230c      	movs	r3, #12
 8003dd2:	602b      	str	r3, [r5, #0]
 8003dd4:	e7d4      	b.n	8003d80 <_free_r+0x24>
 8003dd6:	6820      	ldr	r0, [r4, #0]
 8003dd8:	1821      	adds	r1, r4, r0
 8003dda:	428a      	cmp	r2, r1
 8003ddc:	bf01      	itttt	eq
 8003dde:	6811      	ldreq	r1, [r2, #0]
 8003de0:	6852      	ldreq	r2, [r2, #4]
 8003de2:	1809      	addeq	r1, r1, r0
 8003de4:	6021      	streq	r1, [r4, #0]
 8003de6:	6062      	str	r2, [r4, #4]
 8003de8:	605c      	str	r4, [r3, #4]
 8003dea:	e7c9      	b.n	8003d80 <_free_r+0x24>
 8003dec:	bd38      	pop	{r3, r4, r5, pc}
 8003dee:	bf00      	nop
 8003df0:	20000098 	.word	0x20000098

08003df4 <_malloc_r>:
 8003df4:	b570      	push	{r4, r5, r6, lr}
 8003df6:	1ccd      	adds	r5, r1, #3
 8003df8:	f025 0503 	bic.w	r5, r5, #3
 8003dfc:	3508      	adds	r5, #8
 8003dfe:	2d0c      	cmp	r5, #12
 8003e00:	bf38      	it	cc
 8003e02:	250c      	movcc	r5, #12
 8003e04:	2d00      	cmp	r5, #0
 8003e06:	4606      	mov	r6, r0
 8003e08:	db01      	blt.n	8003e0e <_malloc_r+0x1a>
 8003e0a:	42a9      	cmp	r1, r5
 8003e0c:	d903      	bls.n	8003e16 <_malloc_r+0x22>
 8003e0e:	230c      	movs	r3, #12
 8003e10:	6033      	str	r3, [r6, #0]
 8003e12:	2000      	movs	r0, #0
 8003e14:	bd70      	pop	{r4, r5, r6, pc}
 8003e16:	f000 f8f1 	bl	8003ffc <__malloc_lock>
 8003e1a:	4a21      	ldr	r2, [pc, #132]	; (8003ea0 <_malloc_r+0xac>)
 8003e1c:	6814      	ldr	r4, [r2, #0]
 8003e1e:	4621      	mov	r1, r4
 8003e20:	b991      	cbnz	r1, 8003e48 <_malloc_r+0x54>
 8003e22:	4c20      	ldr	r4, [pc, #128]	; (8003ea4 <_malloc_r+0xb0>)
 8003e24:	6823      	ldr	r3, [r4, #0]
 8003e26:	b91b      	cbnz	r3, 8003e30 <_malloc_r+0x3c>
 8003e28:	4630      	mov	r0, r6
 8003e2a:	f000 f83d 	bl	8003ea8 <_sbrk_r>
 8003e2e:	6020      	str	r0, [r4, #0]
 8003e30:	4629      	mov	r1, r5
 8003e32:	4630      	mov	r0, r6
 8003e34:	f000 f838 	bl	8003ea8 <_sbrk_r>
 8003e38:	1c43      	adds	r3, r0, #1
 8003e3a:	d124      	bne.n	8003e86 <_malloc_r+0x92>
 8003e3c:	230c      	movs	r3, #12
 8003e3e:	4630      	mov	r0, r6
 8003e40:	6033      	str	r3, [r6, #0]
 8003e42:	f000 f8dc 	bl	8003ffe <__malloc_unlock>
 8003e46:	e7e4      	b.n	8003e12 <_malloc_r+0x1e>
 8003e48:	680b      	ldr	r3, [r1, #0]
 8003e4a:	1b5b      	subs	r3, r3, r5
 8003e4c:	d418      	bmi.n	8003e80 <_malloc_r+0x8c>
 8003e4e:	2b0b      	cmp	r3, #11
 8003e50:	d90f      	bls.n	8003e72 <_malloc_r+0x7e>
 8003e52:	600b      	str	r3, [r1, #0]
 8003e54:	18cc      	adds	r4, r1, r3
 8003e56:	50cd      	str	r5, [r1, r3]
 8003e58:	4630      	mov	r0, r6
 8003e5a:	f000 f8d0 	bl	8003ffe <__malloc_unlock>
 8003e5e:	f104 000b 	add.w	r0, r4, #11
 8003e62:	1d23      	adds	r3, r4, #4
 8003e64:	f020 0007 	bic.w	r0, r0, #7
 8003e68:	1ac3      	subs	r3, r0, r3
 8003e6a:	d0d3      	beq.n	8003e14 <_malloc_r+0x20>
 8003e6c:	425a      	negs	r2, r3
 8003e6e:	50e2      	str	r2, [r4, r3]
 8003e70:	e7d0      	b.n	8003e14 <_malloc_r+0x20>
 8003e72:	684b      	ldr	r3, [r1, #4]
 8003e74:	428c      	cmp	r4, r1
 8003e76:	bf16      	itet	ne
 8003e78:	6063      	strne	r3, [r4, #4]
 8003e7a:	6013      	streq	r3, [r2, #0]
 8003e7c:	460c      	movne	r4, r1
 8003e7e:	e7eb      	b.n	8003e58 <_malloc_r+0x64>
 8003e80:	460c      	mov	r4, r1
 8003e82:	6849      	ldr	r1, [r1, #4]
 8003e84:	e7cc      	b.n	8003e20 <_malloc_r+0x2c>
 8003e86:	1cc4      	adds	r4, r0, #3
 8003e88:	f024 0403 	bic.w	r4, r4, #3
 8003e8c:	42a0      	cmp	r0, r4
 8003e8e:	d005      	beq.n	8003e9c <_malloc_r+0xa8>
 8003e90:	1a21      	subs	r1, r4, r0
 8003e92:	4630      	mov	r0, r6
 8003e94:	f000 f808 	bl	8003ea8 <_sbrk_r>
 8003e98:	3001      	adds	r0, #1
 8003e9a:	d0cf      	beq.n	8003e3c <_malloc_r+0x48>
 8003e9c:	6025      	str	r5, [r4, #0]
 8003e9e:	e7db      	b.n	8003e58 <_malloc_r+0x64>
 8003ea0:	20000098 	.word	0x20000098
 8003ea4:	2000009c 	.word	0x2000009c

08003ea8 <_sbrk_r>:
 8003ea8:	b538      	push	{r3, r4, r5, lr}
 8003eaa:	2300      	movs	r3, #0
 8003eac:	4c05      	ldr	r4, [pc, #20]	; (8003ec4 <_sbrk_r+0x1c>)
 8003eae:	4605      	mov	r5, r0
 8003eb0:	4608      	mov	r0, r1
 8003eb2:	6023      	str	r3, [r4, #0]
 8003eb4:	f7ff f90a 	bl	80030cc <_sbrk>
 8003eb8:	1c43      	adds	r3, r0, #1
 8003eba:	d102      	bne.n	8003ec2 <_sbrk_r+0x1a>
 8003ebc:	6823      	ldr	r3, [r4, #0]
 8003ebe:	b103      	cbz	r3, 8003ec2 <_sbrk_r+0x1a>
 8003ec0:	602b      	str	r3, [r5, #0]
 8003ec2:	bd38      	pop	{r3, r4, r5, pc}
 8003ec4:	20000178 	.word	0x20000178

08003ec8 <__sread>:
 8003ec8:	b510      	push	{r4, lr}
 8003eca:	460c      	mov	r4, r1
 8003ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ed0:	f000 f896 	bl	8004000 <_read_r>
 8003ed4:	2800      	cmp	r0, #0
 8003ed6:	bfab      	itete	ge
 8003ed8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003eda:	89a3      	ldrhlt	r3, [r4, #12]
 8003edc:	181b      	addge	r3, r3, r0
 8003ede:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003ee2:	bfac      	ite	ge
 8003ee4:	6563      	strge	r3, [r4, #84]	; 0x54
 8003ee6:	81a3      	strhlt	r3, [r4, #12]
 8003ee8:	bd10      	pop	{r4, pc}

08003eea <__swrite>:
 8003eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003eee:	461f      	mov	r7, r3
 8003ef0:	898b      	ldrh	r3, [r1, #12]
 8003ef2:	4605      	mov	r5, r0
 8003ef4:	05db      	lsls	r3, r3, #23
 8003ef6:	460c      	mov	r4, r1
 8003ef8:	4616      	mov	r6, r2
 8003efa:	d505      	bpl.n	8003f08 <__swrite+0x1e>
 8003efc:	2302      	movs	r3, #2
 8003efe:	2200      	movs	r2, #0
 8003f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f04:	f000 f868 	bl	8003fd8 <_lseek_r>
 8003f08:	89a3      	ldrh	r3, [r4, #12]
 8003f0a:	4632      	mov	r2, r6
 8003f0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f10:	81a3      	strh	r3, [r4, #12]
 8003f12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f16:	463b      	mov	r3, r7
 8003f18:	4628      	mov	r0, r5
 8003f1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f1e:	f000 b817 	b.w	8003f50 <_write_r>

08003f22 <__sseek>:
 8003f22:	b510      	push	{r4, lr}
 8003f24:	460c      	mov	r4, r1
 8003f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f2a:	f000 f855 	bl	8003fd8 <_lseek_r>
 8003f2e:	1c43      	adds	r3, r0, #1
 8003f30:	89a3      	ldrh	r3, [r4, #12]
 8003f32:	bf15      	itete	ne
 8003f34:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f3e:	81a3      	strheq	r3, [r4, #12]
 8003f40:	bf18      	it	ne
 8003f42:	81a3      	strhne	r3, [r4, #12]
 8003f44:	bd10      	pop	{r4, pc}

08003f46 <__sclose>:
 8003f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f4a:	f000 b813 	b.w	8003f74 <_close_r>
	...

08003f50 <_write_r>:
 8003f50:	b538      	push	{r3, r4, r5, lr}
 8003f52:	4605      	mov	r5, r0
 8003f54:	4608      	mov	r0, r1
 8003f56:	4611      	mov	r1, r2
 8003f58:	2200      	movs	r2, #0
 8003f5a:	4c05      	ldr	r4, [pc, #20]	; (8003f70 <_write_r+0x20>)
 8003f5c:	6022      	str	r2, [r4, #0]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	f7ff f867 	bl	8003032 <_write>
 8003f64:	1c43      	adds	r3, r0, #1
 8003f66:	d102      	bne.n	8003f6e <_write_r+0x1e>
 8003f68:	6823      	ldr	r3, [r4, #0]
 8003f6a:	b103      	cbz	r3, 8003f6e <_write_r+0x1e>
 8003f6c:	602b      	str	r3, [r5, #0]
 8003f6e:	bd38      	pop	{r3, r4, r5, pc}
 8003f70:	20000178 	.word	0x20000178

08003f74 <_close_r>:
 8003f74:	b538      	push	{r3, r4, r5, lr}
 8003f76:	2300      	movs	r3, #0
 8003f78:	4c05      	ldr	r4, [pc, #20]	; (8003f90 <_close_r+0x1c>)
 8003f7a:	4605      	mov	r5, r0
 8003f7c:	4608      	mov	r0, r1
 8003f7e:	6023      	str	r3, [r4, #0]
 8003f80:	f7ff f873 	bl	800306a <_close>
 8003f84:	1c43      	adds	r3, r0, #1
 8003f86:	d102      	bne.n	8003f8e <_close_r+0x1a>
 8003f88:	6823      	ldr	r3, [r4, #0]
 8003f8a:	b103      	cbz	r3, 8003f8e <_close_r+0x1a>
 8003f8c:	602b      	str	r3, [r5, #0]
 8003f8e:	bd38      	pop	{r3, r4, r5, pc}
 8003f90:	20000178 	.word	0x20000178

08003f94 <_fstat_r>:
 8003f94:	b538      	push	{r3, r4, r5, lr}
 8003f96:	2300      	movs	r3, #0
 8003f98:	4c06      	ldr	r4, [pc, #24]	; (8003fb4 <_fstat_r+0x20>)
 8003f9a:	4605      	mov	r5, r0
 8003f9c:	4608      	mov	r0, r1
 8003f9e:	4611      	mov	r1, r2
 8003fa0:	6023      	str	r3, [r4, #0]
 8003fa2:	f7ff f86d 	bl	8003080 <_fstat>
 8003fa6:	1c43      	adds	r3, r0, #1
 8003fa8:	d102      	bne.n	8003fb0 <_fstat_r+0x1c>
 8003faa:	6823      	ldr	r3, [r4, #0]
 8003fac:	b103      	cbz	r3, 8003fb0 <_fstat_r+0x1c>
 8003fae:	602b      	str	r3, [r5, #0]
 8003fb0:	bd38      	pop	{r3, r4, r5, pc}
 8003fb2:	bf00      	nop
 8003fb4:	20000178 	.word	0x20000178

08003fb8 <_isatty_r>:
 8003fb8:	b538      	push	{r3, r4, r5, lr}
 8003fba:	2300      	movs	r3, #0
 8003fbc:	4c05      	ldr	r4, [pc, #20]	; (8003fd4 <_isatty_r+0x1c>)
 8003fbe:	4605      	mov	r5, r0
 8003fc0:	4608      	mov	r0, r1
 8003fc2:	6023      	str	r3, [r4, #0]
 8003fc4:	f7ff f86b 	bl	800309e <_isatty>
 8003fc8:	1c43      	adds	r3, r0, #1
 8003fca:	d102      	bne.n	8003fd2 <_isatty_r+0x1a>
 8003fcc:	6823      	ldr	r3, [r4, #0]
 8003fce:	b103      	cbz	r3, 8003fd2 <_isatty_r+0x1a>
 8003fd0:	602b      	str	r3, [r5, #0]
 8003fd2:	bd38      	pop	{r3, r4, r5, pc}
 8003fd4:	20000178 	.word	0x20000178

08003fd8 <_lseek_r>:
 8003fd8:	b538      	push	{r3, r4, r5, lr}
 8003fda:	4605      	mov	r5, r0
 8003fdc:	4608      	mov	r0, r1
 8003fde:	4611      	mov	r1, r2
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	4c05      	ldr	r4, [pc, #20]	; (8003ff8 <_lseek_r+0x20>)
 8003fe4:	6022      	str	r2, [r4, #0]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	f7ff f863 	bl	80030b2 <_lseek>
 8003fec:	1c43      	adds	r3, r0, #1
 8003fee:	d102      	bne.n	8003ff6 <_lseek_r+0x1e>
 8003ff0:	6823      	ldr	r3, [r4, #0]
 8003ff2:	b103      	cbz	r3, 8003ff6 <_lseek_r+0x1e>
 8003ff4:	602b      	str	r3, [r5, #0]
 8003ff6:	bd38      	pop	{r3, r4, r5, pc}
 8003ff8:	20000178 	.word	0x20000178

08003ffc <__malloc_lock>:
 8003ffc:	4770      	bx	lr

08003ffe <__malloc_unlock>:
 8003ffe:	4770      	bx	lr

08004000 <_read_r>:
 8004000:	b538      	push	{r3, r4, r5, lr}
 8004002:	4605      	mov	r5, r0
 8004004:	4608      	mov	r0, r1
 8004006:	4611      	mov	r1, r2
 8004008:	2200      	movs	r2, #0
 800400a:	4c05      	ldr	r4, [pc, #20]	; (8004020 <_read_r+0x20>)
 800400c:	6022      	str	r2, [r4, #0]
 800400e:	461a      	mov	r2, r3
 8004010:	f7fe fff2 	bl	8002ff8 <_read>
 8004014:	1c43      	adds	r3, r0, #1
 8004016:	d102      	bne.n	800401e <_read_r+0x1e>
 8004018:	6823      	ldr	r3, [r4, #0]
 800401a:	b103      	cbz	r3, 800401e <_read_r+0x1e>
 800401c:	602b      	str	r3, [r5, #0]
 800401e:	bd38      	pop	{r3, r4, r5, pc}
 8004020:	20000178 	.word	0x20000178

08004024 <_init>:
 8004024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004026:	bf00      	nop
 8004028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800402a:	bc08      	pop	{r3}
 800402c:	469e      	mov	lr, r3
 800402e:	4770      	bx	lr

08004030 <_fini>:
 8004030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004032:	bf00      	nop
 8004034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004036:	bc08      	pop	{r3}
 8004038:	469e      	mov	lr, r3
 800403a:	4770      	bx	lr
