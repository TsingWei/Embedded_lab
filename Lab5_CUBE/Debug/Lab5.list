
Lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029d8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002bbc  08002bbc  00012bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002be8  08002be8  0002004c  2**0
                  CONTENTS
  4 .ARM          00000000  08002be8  08002be8  0002004c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002be8  08002be8  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002be8  08002be8  00012be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bec  08002bec  00012bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  08002bf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b8  2000004c  08002c3c  0002004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000504  08002c3c  00020504  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac4f  00000000  00000000  00020075  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bcd  00000000  00000000  0002acc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000be0  00000000  00000000  0002c898  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b00  00000000  00000000  0002d478  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016302  00000000  00000000  0002df78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009455  00000000  00000000  0004427a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007ed1b  00000000  00000000  0004d6cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cc3ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000308c  00000000  00000000  000cc468  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000004c 	.word	0x2000004c
 8000200:	00000000 	.word	0x00000000
 8000204:	08002ba4 	.word	0x08002ba4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000050 	.word	0x20000050
 8000220:	08002ba4 	.word	0x08002ba4

08000224 <strcmp>:
 8000224:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800022c:	2a01      	cmp	r2, #1
 800022e:	bf28      	it	cs
 8000230:	429a      	cmpcs	r2, r3
 8000232:	d0f7      	beq.n	8000224 <strcmp>
 8000234:	1ad0      	subs	r0, r2, r3
 8000236:	4770      	bx	lr

08000238 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800023c:	4b08      	ldr	r3, [pc, #32]	; (8000260 <HAL_Init+0x28>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a07      	ldr	r2, [pc, #28]	; (8000260 <HAL_Init+0x28>)
 8000242:	f043 0310 	orr.w	r3, r3, #16
 8000246:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000248:	2003      	movs	r0, #3
 800024a:	f000 f945 	bl	80004d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800024e:	2000      	movs	r0, #0
 8000250:	f000 f808 	bl	8000264 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000254:	f002 faa0 	bl	8002798 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000258:	2300      	movs	r3, #0
}
 800025a:	4618      	mov	r0, r3
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	40022000 	.word	0x40022000

08000264 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800026c:	4b12      	ldr	r3, [pc, #72]	; (80002b8 <HAL_InitTick+0x54>)
 800026e:	681a      	ldr	r2, [r3, #0]
 8000270:	4b12      	ldr	r3, [pc, #72]	; (80002bc <HAL_InitTick+0x58>)
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	4619      	mov	r1, r3
 8000276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800027a:	fbb3 f3f1 	udiv	r3, r3, r1
 800027e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000282:	4618      	mov	r0, r3
 8000284:	f000 f95d 	bl	8000542 <HAL_SYSTICK_Config>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800028e:	2301      	movs	r3, #1
 8000290:	e00e      	b.n	80002b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	2b0f      	cmp	r3, #15
 8000296:	d80a      	bhi.n	80002ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000298:	2200      	movs	r2, #0
 800029a:	6879      	ldr	r1, [r7, #4]
 800029c:	f04f 30ff 	mov.w	r0, #4294967295
 80002a0:	f000 f925 	bl	80004ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80002a4:	4a06      	ldr	r2, [pc, #24]	; (80002c0 <HAL_InitTick+0x5c>)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80002aa:	2300      	movs	r3, #0
 80002ac:	e000      	b.n	80002b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80002ae:	2301      	movs	r3, #1
}
 80002b0:	4618      	mov	r0, r3
 80002b2:	3708      	adds	r7, #8
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	20000048 	.word	0x20000048
 80002bc:	20000004 	.word	0x20000004
 80002c0:	20000000 	.word	0x20000000

080002c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002c8:	4b05      	ldr	r3, [pc, #20]	; (80002e0 <HAL_IncTick+0x1c>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	461a      	mov	r2, r3
 80002ce:	4b05      	ldr	r3, [pc, #20]	; (80002e4 <HAL_IncTick+0x20>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	4413      	add	r3, r2
 80002d4:	4a03      	ldr	r2, [pc, #12]	; (80002e4 <HAL_IncTick+0x20>)
 80002d6:	6013      	str	r3, [r2, #0]
}
 80002d8:	bf00      	nop
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr
 80002e0:	20000004 	.word	0x20000004
 80002e4:	2000046c 	.word	0x2000046c

080002e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
  return uwTick;
 80002ec:	4b02      	ldr	r3, [pc, #8]	; (80002f8 <HAL_GetTick+0x10>)
 80002ee:	681b      	ldr	r3, [r3, #0]
}
 80002f0:	4618      	mov	r0, r3
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr
 80002f8:	2000046c 	.word	0x2000046c

080002fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000304:	f7ff fff0 	bl	80002e8 <HAL_GetTick>
 8000308:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000314:	d005      	beq.n	8000322 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000316:	4b09      	ldr	r3, [pc, #36]	; (800033c <HAL_Delay+0x40>)
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	461a      	mov	r2, r3
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	4413      	add	r3, r2
 8000320:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000322:	bf00      	nop
 8000324:	f7ff ffe0 	bl	80002e8 <HAL_GetTick>
 8000328:	4602      	mov	r2, r0
 800032a:	68bb      	ldr	r3, [r7, #8]
 800032c:	1ad3      	subs	r3, r2, r3
 800032e:	68fa      	ldr	r2, [r7, #12]
 8000330:	429a      	cmp	r2, r3
 8000332:	d8f7      	bhi.n	8000324 <HAL_Delay+0x28>
  {
  }
}
 8000334:	bf00      	nop
 8000336:	3710      	adds	r7, #16
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}
 800033c:	20000004 	.word	0x20000004

08000340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000340:	b480      	push	{r7}
 8000342:	b085      	sub	sp, #20
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	f003 0307 	and.w	r3, r3, #7
 800034e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000350:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <__NVIC_SetPriorityGrouping+0x44>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000356:	68ba      	ldr	r2, [r7, #8]
 8000358:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800035c:	4013      	ands	r3, r2
 800035e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000364:	68bb      	ldr	r3, [r7, #8]
 8000366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000368:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800036c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000372:	4a04      	ldr	r2, [pc, #16]	; (8000384 <__NVIC_SetPriorityGrouping+0x44>)
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	60d3      	str	r3, [r2, #12]
}
 8000378:	bf00      	nop
 800037a:	3714      	adds	r7, #20
 800037c:	46bd      	mov	sp, r7
 800037e:	bc80      	pop	{r7}
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	e000ed00 	.word	0xe000ed00

08000388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800038c:	4b04      	ldr	r3, [pc, #16]	; (80003a0 <__NVIC_GetPriorityGrouping+0x18>)
 800038e:	68db      	ldr	r3, [r3, #12]
 8000390:	0a1b      	lsrs	r3, r3, #8
 8000392:	f003 0307 	and.w	r3, r3, #7
}
 8000396:	4618      	mov	r0, r3
 8000398:	46bd      	mov	sp, r7
 800039a:	bc80      	pop	{r7}
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	e000ed00 	.word	0xe000ed00

080003a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	4603      	mov	r3, r0
 80003ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	db0b      	blt.n	80003ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003b6:	79fb      	ldrb	r3, [r7, #7]
 80003b8:	f003 021f 	and.w	r2, r3, #31
 80003bc:	4906      	ldr	r1, [pc, #24]	; (80003d8 <__NVIC_EnableIRQ+0x34>)
 80003be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003c2:	095b      	lsrs	r3, r3, #5
 80003c4:	2001      	movs	r0, #1
 80003c6:	fa00 f202 	lsl.w	r2, r0, r2
 80003ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80003ce:	bf00      	nop
 80003d0:	370c      	adds	r7, #12
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bc80      	pop	{r7}
 80003d6:	4770      	bx	lr
 80003d8:	e000e100 	.word	0xe000e100

080003dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	4603      	mov	r3, r0
 80003e4:	6039      	str	r1, [r7, #0]
 80003e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	db0a      	blt.n	8000406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003f0:	683b      	ldr	r3, [r7, #0]
 80003f2:	b2da      	uxtb	r2, r3
 80003f4:	490c      	ldr	r1, [pc, #48]	; (8000428 <__NVIC_SetPriority+0x4c>)
 80003f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003fa:	0112      	lsls	r2, r2, #4
 80003fc:	b2d2      	uxtb	r2, r2
 80003fe:	440b      	add	r3, r1
 8000400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000404:	e00a      	b.n	800041c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	b2da      	uxtb	r2, r3
 800040a:	4908      	ldr	r1, [pc, #32]	; (800042c <__NVIC_SetPriority+0x50>)
 800040c:	79fb      	ldrb	r3, [r7, #7]
 800040e:	f003 030f 	and.w	r3, r3, #15
 8000412:	3b04      	subs	r3, #4
 8000414:	0112      	lsls	r2, r2, #4
 8000416:	b2d2      	uxtb	r2, r2
 8000418:	440b      	add	r3, r1
 800041a:	761a      	strb	r2, [r3, #24]
}
 800041c:	bf00      	nop
 800041e:	370c      	adds	r7, #12
 8000420:	46bd      	mov	sp, r7
 8000422:	bc80      	pop	{r7}
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	e000e100 	.word	0xe000e100
 800042c:	e000ed00 	.word	0xe000ed00

08000430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000430:	b480      	push	{r7}
 8000432:	b089      	sub	sp, #36	; 0x24
 8000434:	af00      	add	r7, sp, #0
 8000436:	60f8      	str	r0, [r7, #12]
 8000438:	60b9      	str	r1, [r7, #8]
 800043a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	f003 0307 	and.w	r3, r3, #7
 8000442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000444:	69fb      	ldr	r3, [r7, #28]
 8000446:	f1c3 0307 	rsb	r3, r3, #7
 800044a:	2b04      	cmp	r3, #4
 800044c:	bf28      	it	cs
 800044e:	2304      	movcs	r3, #4
 8000450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000452:	69fb      	ldr	r3, [r7, #28]
 8000454:	3304      	adds	r3, #4
 8000456:	2b06      	cmp	r3, #6
 8000458:	d902      	bls.n	8000460 <NVIC_EncodePriority+0x30>
 800045a:	69fb      	ldr	r3, [r7, #28]
 800045c:	3b03      	subs	r3, #3
 800045e:	e000      	b.n	8000462 <NVIC_EncodePriority+0x32>
 8000460:	2300      	movs	r3, #0
 8000462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000464:	f04f 32ff 	mov.w	r2, #4294967295
 8000468:	69bb      	ldr	r3, [r7, #24]
 800046a:	fa02 f303 	lsl.w	r3, r2, r3
 800046e:	43da      	mvns	r2, r3
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	401a      	ands	r2, r3
 8000474:	697b      	ldr	r3, [r7, #20]
 8000476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000478:	f04f 31ff 	mov.w	r1, #4294967295
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	fa01 f303 	lsl.w	r3, r1, r3
 8000482:	43d9      	mvns	r1, r3
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000488:	4313      	orrs	r3, r2
         );
}
 800048a:	4618      	mov	r0, r3
 800048c:	3724      	adds	r7, #36	; 0x24
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr

08000494 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	3b01      	subs	r3, #1
 80004a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80004a4:	d301      	bcc.n	80004aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80004a6:	2301      	movs	r3, #1
 80004a8:	e00f      	b.n	80004ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004aa:	4a0a      	ldr	r2, [pc, #40]	; (80004d4 <SysTick_Config+0x40>)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	3b01      	subs	r3, #1
 80004b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80004b2:	210f      	movs	r1, #15
 80004b4:	f04f 30ff 	mov.w	r0, #4294967295
 80004b8:	f7ff ff90 	bl	80003dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004bc:	4b05      	ldr	r3, [pc, #20]	; (80004d4 <SysTick_Config+0x40>)
 80004be:	2200      	movs	r2, #0
 80004c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004c2:	4b04      	ldr	r3, [pc, #16]	; (80004d4 <SysTick_Config+0x40>)
 80004c4:	2207      	movs	r2, #7
 80004c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004c8:	2300      	movs	r3, #0
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	3708      	adds	r7, #8
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	e000e010 	.word	0xe000e010

080004d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80004e0:	6878      	ldr	r0, [r7, #4]
 80004e2:	f7ff ff2d 	bl	8000340 <__NVIC_SetPriorityGrouping>
}
 80004e6:	bf00      	nop
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}

080004ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004ee:	b580      	push	{r7, lr}
 80004f0:	b086      	sub	sp, #24
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	4603      	mov	r3, r0
 80004f6:	60b9      	str	r1, [r7, #8]
 80004f8:	607a      	str	r2, [r7, #4]
 80004fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80004fc:	2300      	movs	r3, #0
 80004fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000500:	f7ff ff42 	bl	8000388 <__NVIC_GetPriorityGrouping>
 8000504:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000506:	687a      	ldr	r2, [r7, #4]
 8000508:	68b9      	ldr	r1, [r7, #8]
 800050a:	6978      	ldr	r0, [r7, #20]
 800050c:	f7ff ff90 	bl	8000430 <NVIC_EncodePriority>
 8000510:	4602      	mov	r2, r0
 8000512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000516:	4611      	mov	r1, r2
 8000518:	4618      	mov	r0, r3
 800051a:	f7ff ff5f 	bl	80003dc <__NVIC_SetPriority>
}
 800051e:	bf00      	nop
 8000520:	3718      	adds	r7, #24
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}

08000526 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000526:	b580      	push	{r7, lr}
 8000528:	b082      	sub	sp, #8
 800052a:	af00      	add	r7, sp, #0
 800052c:	4603      	mov	r3, r0
 800052e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff ff35 	bl	80003a4 <__NVIC_EnableIRQ>
}
 800053a:	bf00      	nop
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	b082      	sub	sp, #8
 8000546:	af00      	add	r7, sp, #0
 8000548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f7ff ffa2 	bl	8000494 <SysTick_Config>
 8000550:	4603      	mov	r3, r0
}
 8000552:	4618      	mov	r0, r3
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
	...

0800055c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000564:	2300      	movs	r3, #0
 8000566:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800056e:	2b02      	cmp	r3, #2
 8000570:	d005      	beq.n	800057e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2204      	movs	r2, #4
 8000576:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000578:	2301      	movs	r3, #1
 800057a:	73fb      	strb	r3, [r7, #15]
 800057c:	e0d6      	b.n	800072c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	681a      	ldr	r2, [r3, #0]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f022 020e 	bic.w	r2, r2, #14
 800058c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	681a      	ldr	r2, [r3, #0]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f022 0201 	bic.w	r2, r2, #1
 800059c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	461a      	mov	r2, r3
 80005a4:	4b64      	ldr	r3, [pc, #400]	; (8000738 <HAL_DMA_Abort_IT+0x1dc>)
 80005a6:	429a      	cmp	r2, r3
 80005a8:	d958      	bls.n	800065c <HAL_DMA_Abort_IT+0x100>
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a63      	ldr	r2, [pc, #396]	; (800073c <HAL_DMA_Abort_IT+0x1e0>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d04f      	beq.n	8000654 <HAL_DMA_Abort_IT+0xf8>
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a61      	ldr	r2, [pc, #388]	; (8000740 <HAL_DMA_Abort_IT+0x1e4>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d048      	beq.n	8000650 <HAL_DMA_Abort_IT+0xf4>
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a60      	ldr	r2, [pc, #384]	; (8000744 <HAL_DMA_Abort_IT+0x1e8>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d040      	beq.n	800064a <HAL_DMA_Abort_IT+0xee>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a5e      	ldr	r2, [pc, #376]	; (8000748 <HAL_DMA_Abort_IT+0x1ec>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d038      	beq.n	8000644 <HAL_DMA_Abort_IT+0xe8>
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a5d      	ldr	r2, [pc, #372]	; (800074c <HAL_DMA_Abort_IT+0x1f0>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d030      	beq.n	800063e <HAL_DMA_Abort_IT+0xe2>
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a5b      	ldr	r2, [pc, #364]	; (8000750 <HAL_DMA_Abort_IT+0x1f4>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d028      	beq.n	8000638 <HAL_DMA_Abort_IT+0xdc>
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a53      	ldr	r2, [pc, #332]	; (8000738 <HAL_DMA_Abort_IT+0x1dc>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d020      	beq.n	8000632 <HAL_DMA_Abort_IT+0xd6>
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a57      	ldr	r2, [pc, #348]	; (8000754 <HAL_DMA_Abort_IT+0x1f8>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d019      	beq.n	800062e <HAL_DMA_Abort_IT+0xd2>
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a56      	ldr	r2, [pc, #344]	; (8000758 <HAL_DMA_Abort_IT+0x1fc>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d012      	beq.n	800062a <HAL_DMA_Abort_IT+0xce>
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a54      	ldr	r2, [pc, #336]	; (800075c <HAL_DMA_Abort_IT+0x200>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d00a      	beq.n	8000624 <HAL_DMA_Abort_IT+0xc8>
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a53      	ldr	r2, [pc, #332]	; (8000760 <HAL_DMA_Abort_IT+0x204>)
 8000614:	4293      	cmp	r3, r2
 8000616:	d102      	bne.n	800061e <HAL_DMA_Abort_IT+0xc2>
 8000618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800061c:	e01b      	b.n	8000656 <HAL_DMA_Abort_IT+0xfa>
 800061e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000622:	e018      	b.n	8000656 <HAL_DMA_Abort_IT+0xfa>
 8000624:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000628:	e015      	b.n	8000656 <HAL_DMA_Abort_IT+0xfa>
 800062a:	2310      	movs	r3, #16
 800062c:	e013      	b.n	8000656 <HAL_DMA_Abort_IT+0xfa>
 800062e:	2301      	movs	r3, #1
 8000630:	e011      	b.n	8000656 <HAL_DMA_Abort_IT+0xfa>
 8000632:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000636:	e00e      	b.n	8000656 <HAL_DMA_Abort_IT+0xfa>
 8000638:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800063c:	e00b      	b.n	8000656 <HAL_DMA_Abort_IT+0xfa>
 800063e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000642:	e008      	b.n	8000656 <HAL_DMA_Abort_IT+0xfa>
 8000644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000648:	e005      	b.n	8000656 <HAL_DMA_Abort_IT+0xfa>
 800064a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800064e:	e002      	b.n	8000656 <HAL_DMA_Abort_IT+0xfa>
 8000650:	2310      	movs	r3, #16
 8000652:	e000      	b.n	8000656 <HAL_DMA_Abort_IT+0xfa>
 8000654:	2301      	movs	r3, #1
 8000656:	4a43      	ldr	r2, [pc, #268]	; (8000764 <HAL_DMA_Abort_IT+0x208>)
 8000658:	6053      	str	r3, [r2, #4]
 800065a:	e057      	b.n	800070c <HAL_DMA_Abort_IT+0x1b0>
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a36      	ldr	r2, [pc, #216]	; (800073c <HAL_DMA_Abort_IT+0x1e0>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d04f      	beq.n	8000706 <HAL_DMA_Abort_IT+0x1aa>
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a35      	ldr	r2, [pc, #212]	; (8000740 <HAL_DMA_Abort_IT+0x1e4>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d048      	beq.n	8000702 <HAL_DMA_Abort_IT+0x1a6>
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a33      	ldr	r2, [pc, #204]	; (8000744 <HAL_DMA_Abort_IT+0x1e8>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d040      	beq.n	80006fc <HAL_DMA_Abort_IT+0x1a0>
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a32      	ldr	r2, [pc, #200]	; (8000748 <HAL_DMA_Abort_IT+0x1ec>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d038      	beq.n	80006f6 <HAL_DMA_Abort_IT+0x19a>
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a30      	ldr	r2, [pc, #192]	; (800074c <HAL_DMA_Abort_IT+0x1f0>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d030      	beq.n	80006f0 <HAL_DMA_Abort_IT+0x194>
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a2f      	ldr	r2, [pc, #188]	; (8000750 <HAL_DMA_Abort_IT+0x1f4>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d028      	beq.n	80006ea <HAL_DMA_Abort_IT+0x18e>
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a26      	ldr	r2, [pc, #152]	; (8000738 <HAL_DMA_Abort_IT+0x1dc>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d020      	beq.n	80006e4 <HAL_DMA_Abort_IT+0x188>
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a2b      	ldr	r2, [pc, #172]	; (8000754 <HAL_DMA_Abort_IT+0x1f8>)
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d019      	beq.n	80006e0 <HAL_DMA_Abort_IT+0x184>
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a29      	ldr	r2, [pc, #164]	; (8000758 <HAL_DMA_Abort_IT+0x1fc>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d012      	beq.n	80006dc <HAL_DMA_Abort_IT+0x180>
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a28      	ldr	r2, [pc, #160]	; (800075c <HAL_DMA_Abort_IT+0x200>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d00a      	beq.n	80006d6 <HAL_DMA_Abort_IT+0x17a>
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a26      	ldr	r2, [pc, #152]	; (8000760 <HAL_DMA_Abort_IT+0x204>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d102      	bne.n	80006d0 <HAL_DMA_Abort_IT+0x174>
 80006ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ce:	e01b      	b.n	8000708 <HAL_DMA_Abort_IT+0x1ac>
 80006d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006d4:	e018      	b.n	8000708 <HAL_DMA_Abort_IT+0x1ac>
 80006d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006da:	e015      	b.n	8000708 <HAL_DMA_Abort_IT+0x1ac>
 80006dc:	2310      	movs	r3, #16
 80006de:	e013      	b.n	8000708 <HAL_DMA_Abort_IT+0x1ac>
 80006e0:	2301      	movs	r3, #1
 80006e2:	e011      	b.n	8000708 <HAL_DMA_Abort_IT+0x1ac>
 80006e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80006e8:	e00e      	b.n	8000708 <HAL_DMA_Abort_IT+0x1ac>
 80006ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80006ee:	e00b      	b.n	8000708 <HAL_DMA_Abort_IT+0x1ac>
 80006f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006f4:	e008      	b.n	8000708 <HAL_DMA_Abort_IT+0x1ac>
 80006f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fa:	e005      	b.n	8000708 <HAL_DMA_Abort_IT+0x1ac>
 80006fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000700:	e002      	b.n	8000708 <HAL_DMA_Abort_IT+0x1ac>
 8000702:	2310      	movs	r3, #16
 8000704:	e000      	b.n	8000708 <HAL_DMA_Abort_IT+0x1ac>
 8000706:	2301      	movs	r3, #1
 8000708:	4a17      	ldr	r2, [pc, #92]	; (8000768 <HAL_DMA_Abort_IT+0x20c>)
 800070a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2201      	movs	r2, #1
 8000710:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2200      	movs	r2, #0
 8000718:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000720:	2b00      	cmp	r3, #0
 8000722:	d003      	beq.n	800072c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	4798      	blx	r3
    } 
  }
  return status;
 800072c:	7bfb      	ldrb	r3, [r7, #15]
}
 800072e:	4618      	mov	r0, r3
 8000730:	3710      	adds	r7, #16
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40020080 	.word	0x40020080
 800073c:	40020008 	.word	0x40020008
 8000740:	4002001c 	.word	0x4002001c
 8000744:	40020030 	.word	0x40020030
 8000748:	40020044 	.word	0x40020044
 800074c:	40020058 	.word	0x40020058
 8000750:	4002006c 	.word	0x4002006c
 8000754:	40020408 	.word	0x40020408
 8000758:	4002041c 	.word	0x4002041c
 800075c:	40020430 	.word	0x40020430
 8000760:	40020444 	.word	0x40020444
 8000764:	40020400 	.word	0x40020400
 8000768:	40020000 	.word	0x40020000

0800076c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800076c:	b480      	push	{r7}
 800076e:	b08b      	sub	sp, #44	; 0x2c
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000776:	2300      	movs	r3, #0
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800077a:	2300      	movs	r3, #0
 800077c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800077e:	e133      	b.n	80009e8 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000780:	2201      	movs	r2, #1
 8000782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000784:	fa02 f303 	lsl.w	r3, r2, r3
 8000788:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	69fa      	ldr	r2, [r7, #28]
 8000790:	4013      	ands	r3, r2
 8000792:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000794:	69ba      	ldr	r2, [r7, #24]
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	429a      	cmp	r2, r3
 800079a:	f040 8122 	bne.w	80009e2 <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	2b12      	cmp	r3, #18
 80007a4:	d034      	beq.n	8000810 <HAL_GPIO_Init+0xa4>
 80007a6:	2b12      	cmp	r3, #18
 80007a8:	d80d      	bhi.n	80007c6 <HAL_GPIO_Init+0x5a>
 80007aa:	2b02      	cmp	r3, #2
 80007ac:	d02b      	beq.n	8000806 <HAL_GPIO_Init+0x9a>
 80007ae:	2b02      	cmp	r3, #2
 80007b0:	d804      	bhi.n	80007bc <HAL_GPIO_Init+0x50>
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d031      	beq.n	800081a <HAL_GPIO_Init+0xae>
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d01c      	beq.n	80007f4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80007ba:	e048      	b.n	800084e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80007bc:	2b03      	cmp	r3, #3
 80007be:	d043      	beq.n	8000848 <HAL_GPIO_Init+0xdc>
 80007c0:	2b11      	cmp	r3, #17
 80007c2:	d01b      	beq.n	80007fc <HAL_GPIO_Init+0x90>
          break;
 80007c4:	e043      	b.n	800084e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80007c6:	4a8f      	ldr	r2, [pc, #572]	; (8000a04 <HAL_GPIO_Init+0x298>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d026      	beq.n	800081a <HAL_GPIO_Init+0xae>
 80007cc:	4a8d      	ldr	r2, [pc, #564]	; (8000a04 <HAL_GPIO_Init+0x298>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d806      	bhi.n	80007e0 <HAL_GPIO_Init+0x74>
 80007d2:	4a8d      	ldr	r2, [pc, #564]	; (8000a08 <HAL_GPIO_Init+0x29c>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d020      	beq.n	800081a <HAL_GPIO_Init+0xae>
 80007d8:	4a8c      	ldr	r2, [pc, #560]	; (8000a0c <HAL_GPIO_Init+0x2a0>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d01d      	beq.n	800081a <HAL_GPIO_Init+0xae>
          break;
 80007de:	e036      	b.n	800084e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80007e0:	4a8b      	ldr	r2, [pc, #556]	; (8000a10 <HAL_GPIO_Init+0x2a4>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d019      	beq.n	800081a <HAL_GPIO_Init+0xae>
 80007e6:	4a8b      	ldr	r2, [pc, #556]	; (8000a14 <HAL_GPIO_Init+0x2a8>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d016      	beq.n	800081a <HAL_GPIO_Init+0xae>
 80007ec:	4a8a      	ldr	r2, [pc, #552]	; (8000a18 <HAL_GPIO_Init+0x2ac>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d013      	beq.n	800081a <HAL_GPIO_Init+0xae>
          break;
 80007f2:	e02c      	b.n	800084e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	623b      	str	r3, [r7, #32]
          break;
 80007fa:	e028      	b.n	800084e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	3304      	adds	r3, #4
 8000802:	623b      	str	r3, [r7, #32]
          break;
 8000804:	e023      	b.n	800084e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	68db      	ldr	r3, [r3, #12]
 800080a:	3308      	adds	r3, #8
 800080c:	623b      	str	r3, [r7, #32]
          break;
 800080e:	e01e      	b.n	800084e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	330c      	adds	r3, #12
 8000816:	623b      	str	r3, [r7, #32]
          break;
 8000818:	e019      	b.n	800084e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	689b      	ldr	r3, [r3, #8]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d102      	bne.n	8000828 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000822:	2304      	movs	r3, #4
 8000824:	623b      	str	r3, [r7, #32]
          break;
 8000826:	e012      	b.n	800084e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	689b      	ldr	r3, [r3, #8]
 800082c:	2b01      	cmp	r3, #1
 800082e:	d105      	bne.n	800083c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000830:	2308      	movs	r3, #8
 8000832:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	69fa      	ldr	r2, [r7, #28]
 8000838:	611a      	str	r2, [r3, #16]
          break;
 800083a:	e008      	b.n	800084e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800083c:	2308      	movs	r3, #8
 800083e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	69fa      	ldr	r2, [r7, #28]
 8000844:	615a      	str	r2, [r3, #20]
          break;
 8000846:	e002      	b.n	800084e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000848:	2300      	movs	r3, #0
 800084a:	623b      	str	r3, [r7, #32]
          break;
 800084c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800084e:	69bb      	ldr	r3, [r7, #24]
 8000850:	2bff      	cmp	r3, #255	; 0xff
 8000852:	d801      	bhi.n	8000858 <HAL_GPIO_Init+0xec>
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	e001      	b.n	800085c <HAL_GPIO_Init+0xf0>
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	3304      	adds	r3, #4
 800085c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800085e:	69bb      	ldr	r3, [r7, #24]
 8000860:	2bff      	cmp	r3, #255	; 0xff
 8000862:	d802      	bhi.n	800086a <HAL_GPIO_Init+0xfe>
 8000864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	e002      	b.n	8000870 <HAL_GPIO_Init+0x104>
 800086a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800086c:	3b08      	subs	r3, #8
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	210f      	movs	r1, #15
 8000878:	693b      	ldr	r3, [r7, #16]
 800087a:	fa01 f303 	lsl.w	r3, r1, r3
 800087e:	43db      	mvns	r3, r3
 8000880:	401a      	ands	r2, r3
 8000882:	6a39      	ldr	r1, [r7, #32]
 8000884:	693b      	ldr	r3, [r7, #16]
 8000886:	fa01 f303 	lsl.w	r3, r1, r3
 800088a:	431a      	orrs	r2, r3
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000898:	2b00      	cmp	r3, #0
 800089a:	f000 80a2 	beq.w	80009e2 <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800089e:	4b5f      	ldr	r3, [pc, #380]	; (8000a1c <HAL_GPIO_Init+0x2b0>)
 80008a0:	699b      	ldr	r3, [r3, #24]
 80008a2:	4a5e      	ldr	r2, [pc, #376]	; (8000a1c <HAL_GPIO_Init+0x2b0>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6193      	str	r3, [r2, #24]
 80008aa:	4b5c      	ldr	r3, [pc, #368]	; (8000a1c <HAL_GPIO_Init+0x2b0>)
 80008ac:	699b      	ldr	r3, [r3, #24]
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80008b6:	4a5a      	ldr	r2, [pc, #360]	; (8000a20 <HAL_GPIO_Init+0x2b4>)
 80008b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ba:	089b      	lsrs	r3, r3, #2
 80008bc:	3302      	adds	r3, #2
 80008be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008c2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80008c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c6:	f003 0303 	and.w	r3, r3, #3
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	220f      	movs	r2, #15
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	43db      	mvns	r3, r3
 80008d4:	68fa      	ldr	r2, [r7, #12]
 80008d6:	4013      	ands	r3, r2
 80008d8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4a51      	ldr	r2, [pc, #324]	; (8000a24 <HAL_GPIO_Init+0x2b8>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d01f      	beq.n	8000922 <HAL_GPIO_Init+0x1b6>
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4a50      	ldr	r2, [pc, #320]	; (8000a28 <HAL_GPIO_Init+0x2bc>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d019      	beq.n	800091e <HAL_GPIO_Init+0x1b2>
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4a4f      	ldr	r2, [pc, #316]	; (8000a2c <HAL_GPIO_Init+0x2c0>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d013      	beq.n	800091a <HAL_GPIO_Init+0x1ae>
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4a4e      	ldr	r2, [pc, #312]	; (8000a30 <HAL_GPIO_Init+0x2c4>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d00d      	beq.n	8000916 <HAL_GPIO_Init+0x1aa>
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4a4d      	ldr	r2, [pc, #308]	; (8000a34 <HAL_GPIO_Init+0x2c8>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d007      	beq.n	8000912 <HAL_GPIO_Init+0x1a6>
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4a4c      	ldr	r2, [pc, #304]	; (8000a38 <HAL_GPIO_Init+0x2cc>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d101      	bne.n	800090e <HAL_GPIO_Init+0x1a2>
 800090a:	2305      	movs	r3, #5
 800090c:	e00a      	b.n	8000924 <HAL_GPIO_Init+0x1b8>
 800090e:	2306      	movs	r3, #6
 8000910:	e008      	b.n	8000924 <HAL_GPIO_Init+0x1b8>
 8000912:	2304      	movs	r3, #4
 8000914:	e006      	b.n	8000924 <HAL_GPIO_Init+0x1b8>
 8000916:	2303      	movs	r3, #3
 8000918:	e004      	b.n	8000924 <HAL_GPIO_Init+0x1b8>
 800091a:	2302      	movs	r3, #2
 800091c:	e002      	b.n	8000924 <HAL_GPIO_Init+0x1b8>
 800091e:	2301      	movs	r3, #1
 8000920:	e000      	b.n	8000924 <HAL_GPIO_Init+0x1b8>
 8000922:	2300      	movs	r3, #0
 8000924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000926:	f002 0203 	and.w	r2, r2, #3
 800092a:	0092      	lsls	r2, r2, #2
 800092c:	4093      	lsls	r3, r2
 800092e:	68fa      	ldr	r2, [r7, #12]
 8000930:	4313      	orrs	r3, r2
 8000932:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000934:	493a      	ldr	r1, [pc, #232]	; (8000a20 <HAL_GPIO_Init+0x2b4>)
 8000936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000938:	089b      	lsrs	r3, r3, #2
 800093a:	3302      	adds	r3, #2
 800093c:	68fa      	ldr	r2, [r7, #12]
 800093e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800094a:	2b00      	cmp	r3, #0
 800094c:	d006      	beq.n	800095c <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800094e:	4b3b      	ldr	r3, [pc, #236]	; (8000a3c <HAL_GPIO_Init+0x2d0>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	493a      	ldr	r1, [pc, #232]	; (8000a3c <HAL_GPIO_Init+0x2d0>)
 8000954:	69bb      	ldr	r3, [r7, #24]
 8000956:	4313      	orrs	r3, r2
 8000958:	600b      	str	r3, [r1, #0]
 800095a:	e006      	b.n	800096a <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800095c:	4b37      	ldr	r3, [pc, #220]	; (8000a3c <HAL_GPIO_Init+0x2d0>)
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	69bb      	ldr	r3, [r7, #24]
 8000962:	43db      	mvns	r3, r3
 8000964:	4935      	ldr	r1, [pc, #212]	; (8000a3c <HAL_GPIO_Init+0x2d0>)
 8000966:	4013      	ands	r3, r2
 8000968:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000972:	2b00      	cmp	r3, #0
 8000974:	d006      	beq.n	8000984 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000976:	4b31      	ldr	r3, [pc, #196]	; (8000a3c <HAL_GPIO_Init+0x2d0>)
 8000978:	685a      	ldr	r2, [r3, #4]
 800097a:	4930      	ldr	r1, [pc, #192]	; (8000a3c <HAL_GPIO_Init+0x2d0>)
 800097c:	69bb      	ldr	r3, [r7, #24]
 800097e:	4313      	orrs	r3, r2
 8000980:	604b      	str	r3, [r1, #4]
 8000982:	e006      	b.n	8000992 <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000984:	4b2d      	ldr	r3, [pc, #180]	; (8000a3c <HAL_GPIO_Init+0x2d0>)
 8000986:	685a      	ldr	r2, [r3, #4]
 8000988:	69bb      	ldr	r3, [r7, #24]
 800098a:	43db      	mvns	r3, r3
 800098c:	492b      	ldr	r1, [pc, #172]	; (8000a3c <HAL_GPIO_Init+0x2d0>)
 800098e:	4013      	ands	r3, r2
 8000990:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800099a:	2b00      	cmp	r3, #0
 800099c:	d006      	beq.n	80009ac <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800099e:	4b27      	ldr	r3, [pc, #156]	; (8000a3c <HAL_GPIO_Init+0x2d0>)
 80009a0:	689a      	ldr	r2, [r3, #8]
 80009a2:	4926      	ldr	r1, [pc, #152]	; (8000a3c <HAL_GPIO_Init+0x2d0>)
 80009a4:	69bb      	ldr	r3, [r7, #24]
 80009a6:	4313      	orrs	r3, r2
 80009a8:	608b      	str	r3, [r1, #8]
 80009aa:	e006      	b.n	80009ba <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80009ac:	4b23      	ldr	r3, [pc, #140]	; (8000a3c <HAL_GPIO_Init+0x2d0>)
 80009ae:	689a      	ldr	r2, [r3, #8]
 80009b0:	69bb      	ldr	r3, [r7, #24]
 80009b2:	43db      	mvns	r3, r3
 80009b4:	4921      	ldr	r1, [pc, #132]	; (8000a3c <HAL_GPIO_Init+0x2d0>)
 80009b6:	4013      	ands	r3, r2
 80009b8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d006      	beq.n	80009d4 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80009c6:	4b1d      	ldr	r3, [pc, #116]	; (8000a3c <HAL_GPIO_Init+0x2d0>)
 80009c8:	68da      	ldr	r2, [r3, #12]
 80009ca:	491c      	ldr	r1, [pc, #112]	; (8000a3c <HAL_GPIO_Init+0x2d0>)
 80009cc:	69bb      	ldr	r3, [r7, #24]
 80009ce:	4313      	orrs	r3, r2
 80009d0:	60cb      	str	r3, [r1, #12]
 80009d2:	e006      	b.n	80009e2 <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80009d4:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <HAL_GPIO_Init+0x2d0>)
 80009d6:	68da      	ldr	r2, [r3, #12]
 80009d8:	69bb      	ldr	r3, [r7, #24]
 80009da:	43db      	mvns	r3, r3
 80009dc:	4917      	ldr	r1, [pc, #92]	; (8000a3c <HAL_GPIO_Init+0x2d0>)
 80009de:	4013      	ands	r3, r2
 80009e0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80009e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e4:	3301      	adds	r3, #1
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ee:	fa22 f303 	lsr.w	r3, r2, r3
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	f47f aec4 	bne.w	8000780 <HAL_GPIO_Init+0x14>
  }
}
 80009f8:	bf00      	nop
 80009fa:	372c      	adds	r7, #44	; 0x2c
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bc80      	pop	{r7}
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	10210000 	.word	0x10210000
 8000a08:	10110000 	.word	0x10110000
 8000a0c:	10120000 	.word	0x10120000
 8000a10:	10310000 	.word	0x10310000
 8000a14:	10320000 	.word	0x10320000
 8000a18:	10220000 	.word	0x10220000
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	40010000 	.word	0x40010000
 8000a24:	40010800 	.word	0x40010800
 8000a28:	40010c00 	.word	0x40010c00
 8000a2c:	40011000 	.word	0x40011000
 8000a30:	40011400 	.word	0x40011400
 8000a34:	40011800 	.word	0x40011800
 8000a38:	40011c00 	.word	0x40011c00
 8000a3c:	40010400 	.word	0x40010400

08000a40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	460b      	mov	r3, r1
 8000a4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	689a      	ldr	r2, [r3, #8]
 8000a50:	887b      	ldrh	r3, [r7, #2]
 8000a52:	4013      	ands	r3, r2
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d002      	beq.n	8000a5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	73fb      	strb	r3, [r7, #15]
 8000a5c:	e001      	b.n	8000a62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr

08000a6e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	b083      	sub	sp, #12
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
 8000a76:	460b      	mov	r3, r1
 8000a78:	807b      	strh	r3, [r7, #2]
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a7e:	787b      	ldrb	r3, [r7, #1]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d003      	beq.n	8000a8c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a84:	887a      	ldrh	r2, [r7, #2]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000a8a:	e003      	b.n	8000a94 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a8c:	887b      	ldrh	r3, [r7, #2]
 8000a8e:	041a      	lsls	r2, r3, #16
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	611a      	str	r2, [r3, #16]
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr

08000a9e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	b083      	sub	sp, #12
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
 8000aa6:	460b      	mov	r3, r1
 8000aa8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	68da      	ldr	r2, [r3, #12]
 8000aae:	887b      	ldrh	r3, [r7, #2]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d003      	beq.n	8000abe <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ab6:	887a      	ldrh	r2, [r7, #2]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000abc:	e002      	b.n	8000ac4 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000abe:	887a      	ldrh	r2, [r7, #2]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	611a      	str	r2, [r3, #16]
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bc80      	pop	{r7}
 8000acc:	4770      	bx	lr
	...

08000ad0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000adc:	695a      	ldr	r2, [r3, #20]
 8000ade:	88fb      	ldrh	r3, [r7, #6]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d006      	beq.n	8000af4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ae6:	4a05      	ldr	r2, [pc, #20]	; (8000afc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ae8:	88fb      	ldrh	r3, [r7, #6]
 8000aea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000aec:	88fb      	ldrh	r3, [r7, #6]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f001 fd4c 	bl	800258c <HAL_GPIO_EXTI_Callback>
  }
}
 8000af4:	bf00      	nop
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40010400 	.word	0x40010400

08000b00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d101      	bne.n	8000b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e26c      	b.n	8000fec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	f000 8087 	beq.w	8000c2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b20:	4b92      	ldr	r3, [pc, #584]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f003 030c 	and.w	r3, r3, #12
 8000b28:	2b04      	cmp	r3, #4
 8000b2a:	d00c      	beq.n	8000b46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b2c:	4b8f      	ldr	r3, [pc, #572]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f003 030c 	and.w	r3, r3, #12
 8000b34:	2b08      	cmp	r3, #8
 8000b36:	d112      	bne.n	8000b5e <HAL_RCC_OscConfig+0x5e>
 8000b38:	4b8c      	ldr	r3, [pc, #560]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b44:	d10b      	bne.n	8000b5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b46:	4b89      	ldr	r3, [pc, #548]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d06c      	beq.n	8000c2c <HAL_RCC_OscConfig+0x12c>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d168      	bne.n	8000c2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e246      	b.n	8000fec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b66:	d106      	bne.n	8000b76 <HAL_RCC_OscConfig+0x76>
 8000b68:	4b80      	ldr	r3, [pc, #512]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a7f      	ldr	r2, [pc, #508]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b72:	6013      	str	r3, [r2, #0]
 8000b74:	e02e      	b.n	8000bd4 <HAL_RCC_OscConfig+0xd4>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d10c      	bne.n	8000b98 <HAL_RCC_OscConfig+0x98>
 8000b7e:	4b7b      	ldr	r3, [pc, #492]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a7a      	ldr	r2, [pc, #488]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000b84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b88:	6013      	str	r3, [r2, #0]
 8000b8a:	4b78      	ldr	r3, [pc, #480]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a77      	ldr	r2, [pc, #476]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000b90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b94:	6013      	str	r3, [r2, #0]
 8000b96:	e01d      	b.n	8000bd4 <HAL_RCC_OscConfig+0xd4>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ba0:	d10c      	bne.n	8000bbc <HAL_RCC_OscConfig+0xbc>
 8000ba2:	4b72      	ldr	r3, [pc, #456]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a71      	ldr	r2, [pc, #452]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000ba8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bac:	6013      	str	r3, [r2, #0]
 8000bae:	4b6f      	ldr	r3, [pc, #444]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a6e      	ldr	r2, [pc, #440]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bb8:	6013      	str	r3, [r2, #0]
 8000bba:	e00b      	b.n	8000bd4 <HAL_RCC_OscConfig+0xd4>
 8000bbc:	4b6b      	ldr	r3, [pc, #428]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a6a      	ldr	r2, [pc, #424]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bc6:	6013      	str	r3, [r2, #0]
 8000bc8:	4b68      	ldr	r3, [pc, #416]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a67      	ldr	r2, [pc, #412]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000bce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bd2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d013      	beq.n	8000c04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bdc:	f7ff fb84 	bl	80002e8 <HAL_GetTick>
 8000be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000be2:	e008      	b.n	8000bf6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000be4:	f7ff fb80 	bl	80002e8 <HAL_GetTick>
 8000be8:	4602      	mov	r2, r0
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	2b64      	cmp	r3, #100	; 0x64
 8000bf0:	d901      	bls.n	8000bf6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	e1fa      	b.n	8000fec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bf6:	4b5d      	ldr	r3, [pc, #372]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d0f0      	beq.n	8000be4 <HAL_RCC_OscConfig+0xe4>
 8000c02:	e014      	b.n	8000c2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c04:	f7ff fb70 	bl	80002e8 <HAL_GetTick>
 8000c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c0a:	e008      	b.n	8000c1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c0c:	f7ff fb6c 	bl	80002e8 <HAL_GetTick>
 8000c10:	4602      	mov	r2, r0
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	2b64      	cmp	r3, #100	; 0x64
 8000c18:	d901      	bls.n	8000c1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	e1e6      	b.n	8000fec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c1e:	4b53      	ldr	r3, [pc, #332]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d1f0      	bne.n	8000c0c <HAL_RCC_OscConfig+0x10c>
 8000c2a:	e000      	b.n	8000c2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d063      	beq.n	8000d02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c3a:	4b4c      	ldr	r3, [pc, #304]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f003 030c 	and.w	r3, r3, #12
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d00b      	beq.n	8000c5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c46:	4b49      	ldr	r3, [pc, #292]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f003 030c 	and.w	r3, r3, #12
 8000c4e:	2b08      	cmp	r3, #8
 8000c50:	d11c      	bne.n	8000c8c <HAL_RCC_OscConfig+0x18c>
 8000c52:	4b46      	ldr	r3, [pc, #280]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d116      	bne.n	8000c8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c5e:	4b43      	ldr	r3, [pc, #268]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d005      	beq.n	8000c76 <HAL_RCC_OscConfig+0x176>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	691b      	ldr	r3, [r3, #16]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d001      	beq.n	8000c76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e1ba      	b.n	8000fec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c76:	4b3d      	ldr	r3, [pc, #244]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	00db      	lsls	r3, r3, #3
 8000c84:	4939      	ldr	r1, [pc, #228]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000c86:	4313      	orrs	r3, r2
 8000c88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c8a:	e03a      	b.n	8000d02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	691b      	ldr	r3, [r3, #16]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d020      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c94:	4b36      	ldr	r3, [pc, #216]	; (8000d70 <HAL_RCC_OscConfig+0x270>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c9a:	f7ff fb25 	bl	80002e8 <HAL_GetTick>
 8000c9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ca0:	e008      	b.n	8000cb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ca2:	f7ff fb21 	bl	80002e8 <HAL_GetTick>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	1ad3      	subs	r3, r2, r3
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	d901      	bls.n	8000cb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	e19b      	b.n	8000fec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cb4:	4b2d      	ldr	r3, [pc, #180]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f003 0302 	and.w	r3, r3, #2
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d0f0      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cc0:	4b2a      	ldr	r3, [pc, #168]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	695b      	ldr	r3, [r3, #20]
 8000ccc:	00db      	lsls	r3, r3, #3
 8000cce:	4927      	ldr	r1, [pc, #156]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	600b      	str	r3, [r1, #0]
 8000cd4:	e015      	b.n	8000d02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cd6:	4b26      	ldr	r3, [pc, #152]	; (8000d70 <HAL_RCC_OscConfig+0x270>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cdc:	f7ff fb04 	bl	80002e8 <HAL_GetTick>
 8000ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ce2:	e008      	b.n	8000cf6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ce4:	f7ff fb00 	bl	80002e8 <HAL_GetTick>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d901      	bls.n	8000cf6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	e17a      	b.n	8000fec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cf6:	4b1d      	ldr	r3, [pc, #116]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d1f0      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f003 0308 	and.w	r3, r3, #8
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d03a      	beq.n	8000d84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	699b      	ldr	r3, [r3, #24]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d019      	beq.n	8000d4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d16:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <HAL_RCC_OscConfig+0x274>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d1c:	f7ff fae4 	bl	80002e8 <HAL_GetTick>
 8000d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d22:	e008      	b.n	8000d36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d24:	f7ff fae0 	bl	80002e8 <HAL_GetTick>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d901      	bls.n	8000d36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d32:	2303      	movs	r3, #3
 8000d34:	e15a      	b.n	8000fec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d36:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d3a:	f003 0302 	and.w	r3, r3, #2
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d0f0      	beq.n	8000d24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d42:	2001      	movs	r0, #1
 8000d44:	f000 fada 	bl	80012fc <RCC_Delay>
 8000d48:	e01c      	b.n	8000d84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <HAL_RCC_OscConfig+0x274>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d50:	f7ff faca 	bl	80002e8 <HAL_GetTick>
 8000d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d56:	e00f      	b.n	8000d78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d58:	f7ff fac6 	bl	80002e8 <HAL_GetTick>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d908      	bls.n	8000d78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000d66:	2303      	movs	r3, #3
 8000d68:	e140      	b.n	8000fec <HAL_RCC_OscConfig+0x4ec>
 8000d6a:	bf00      	nop
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	42420000 	.word	0x42420000
 8000d74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d78:	4b9e      	ldr	r3, [pc, #632]	; (8000ff4 <HAL_RCC_OscConfig+0x4f4>)
 8000d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d7c:	f003 0302 	and.w	r3, r3, #2
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d1e9      	bne.n	8000d58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f003 0304 	and.w	r3, r3, #4
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	f000 80a6 	beq.w	8000ede <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d92:	2300      	movs	r3, #0
 8000d94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d96:	4b97      	ldr	r3, [pc, #604]	; (8000ff4 <HAL_RCC_OscConfig+0x4f4>)
 8000d98:	69db      	ldr	r3, [r3, #28]
 8000d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d10d      	bne.n	8000dbe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000da2:	4b94      	ldr	r3, [pc, #592]	; (8000ff4 <HAL_RCC_OscConfig+0x4f4>)
 8000da4:	69db      	ldr	r3, [r3, #28]
 8000da6:	4a93      	ldr	r2, [pc, #588]	; (8000ff4 <HAL_RCC_OscConfig+0x4f4>)
 8000da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dac:	61d3      	str	r3, [r2, #28]
 8000dae:	4b91      	ldr	r3, [pc, #580]	; (8000ff4 <HAL_RCC_OscConfig+0x4f4>)
 8000db0:	69db      	ldr	r3, [r3, #28]
 8000db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dbe:	4b8e      	ldr	r3, [pc, #568]	; (8000ff8 <HAL_RCC_OscConfig+0x4f8>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d118      	bne.n	8000dfc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dca:	4b8b      	ldr	r3, [pc, #556]	; (8000ff8 <HAL_RCC_OscConfig+0x4f8>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a8a      	ldr	r2, [pc, #552]	; (8000ff8 <HAL_RCC_OscConfig+0x4f8>)
 8000dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000dd6:	f7ff fa87 	bl	80002e8 <HAL_GetTick>
 8000dda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ddc:	e008      	b.n	8000df0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dde:	f7ff fa83 	bl	80002e8 <HAL_GetTick>
 8000de2:	4602      	mov	r2, r0
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	1ad3      	subs	r3, r2, r3
 8000de8:	2b64      	cmp	r3, #100	; 0x64
 8000dea:	d901      	bls.n	8000df0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000dec:	2303      	movs	r3, #3
 8000dee:	e0fd      	b.n	8000fec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000df0:	4b81      	ldr	r3, [pc, #516]	; (8000ff8 <HAL_RCC_OscConfig+0x4f8>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d0f0      	beq.n	8000dde <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d106      	bne.n	8000e12 <HAL_RCC_OscConfig+0x312>
 8000e04:	4b7b      	ldr	r3, [pc, #492]	; (8000ff4 <HAL_RCC_OscConfig+0x4f4>)
 8000e06:	6a1b      	ldr	r3, [r3, #32]
 8000e08:	4a7a      	ldr	r2, [pc, #488]	; (8000ff4 <HAL_RCC_OscConfig+0x4f4>)
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	6213      	str	r3, [r2, #32]
 8000e10:	e02d      	b.n	8000e6e <HAL_RCC_OscConfig+0x36e>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d10c      	bne.n	8000e34 <HAL_RCC_OscConfig+0x334>
 8000e1a:	4b76      	ldr	r3, [pc, #472]	; (8000ff4 <HAL_RCC_OscConfig+0x4f4>)
 8000e1c:	6a1b      	ldr	r3, [r3, #32]
 8000e1e:	4a75      	ldr	r2, [pc, #468]	; (8000ff4 <HAL_RCC_OscConfig+0x4f4>)
 8000e20:	f023 0301 	bic.w	r3, r3, #1
 8000e24:	6213      	str	r3, [r2, #32]
 8000e26:	4b73      	ldr	r3, [pc, #460]	; (8000ff4 <HAL_RCC_OscConfig+0x4f4>)
 8000e28:	6a1b      	ldr	r3, [r3, #32]
 8000e2a:	4a72      	ldr	r2, [pc, #456]	; (8000ff4 <HAL_RCC_OscConfig+0x4f4>)
 8000e2c:	f023 0304 	bic.w	r3, r3, #4
 8000e30:	6213      	str	r3, [r2, #32]
 8000e32:	e01c      	b.n	8000e6e <HAL_RCC_OscConfig+0x36e>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	2b05      	cmp	r3, #5
 8000e3a:	d10c      	bne.n	8000e56 <HAL_RCC_OscConfig+0x356>
 8000e3c:	4b6d      	ldr	r3, [pc, #436]	; (8000ff4 <HAL_RCC_OscConfig+0x4f4>)
 8000e3e:	6a1b      	ldr	r3, [r3, #32]
 8000e40:	4a6c      	ldr	r2, [pc, #432]	; (8000ff4 <HAL_RCC_OscConfig+0x4f4>)
 8000e42:	f043 0304 	orr.w	r3, r3, #4
 8000e46:	6213      	str	r3, [r2, #32]
 8000e48:	4b6a      	ldr	r3, [pc, #424]	; (8000ff4 <HAL_RCC_OscConfig+0x4f4>)
 8000e4a:	6a1b      	ldr	r3, [r3, #32]
 8000e4c:	4a69      	ldr	r2, [pc, #420]	; (8000ff4 <HAL_RCC_OscConfig+0x4f4>)
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	6213      	str	r3, [r2, #32]
 8000e54:	e00b      	b.n	8000e6e <HAL_RCC_OscConfig+0x36e>
 8000e56:	4b67      	ldr	r3, [pc, #412]	; (8000ff4 <HAL_RCC_OscConfig+0x4f4>)
 8000e58:	6a1b      	ldr	r3, [r3, #32]
 8000e5a:	4a66      	ldr	r2, [pc, #408]	; (8000ff4 <HAL_RCC_OscConfig+0x4f4>)
 8000e5c:	f023 0301 	bic.w	r3, r3, #1
 8000e60:	6213      	str	r3, [r2, #32]
 8000e62:	4b64      	ldr	r3, [pc, #400]	; (8000ff4 <HAL_RCC_OscConfig+0x4f4>)
 8000e64:	6a1b      	ldr	r3, [r3, #32]
 8000e66:	4a63      	ldr	r2, [pc, #396]	; (8000ff4 <HAL_RCC_OscConfig+0x4f4>)
 8000e68:	f023 0304 	bic.w	r3, r3, #4
 8000e6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d015      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e76:	f7ff fa37 	bl	80002e8 <HAL_GetTick>
 8000e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e7c:	e00a      	b.n	8000e94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e7e:	f7ff fa33 	bl	80002e8 <HAL_GetTick>
 8000e82:	4602      	mov	r2, r0
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d901      	bls.n	8000e94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000e90:	2303      	movs	r3, #3
 8000e92:	e0ab      	b.n	8000fec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e94:	4b57      	ldr	r3, [pc, #348]	; (8000ff4 <HAL_RCC_OscConfig+0x4f4>)
 8000e96:	6a1b      	ldr	r3, [r3, #32]
 8000e98:	f003 0302 	and.w	r3, r3, #2
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d0ee      	beq.n	8000e7e <HAL_RCC_OscConfig+0x37e>
 8000ea0:	e014      	b.n	8000ecc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ea2:	f7ff fa21 	bl	80002e8 <HAL_GetTick>
 8000ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ea8:	e00a      	b.n	8000ec0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eaa:	f7ff fa1d 	bl	80002e8 <HAL_GetTick>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d901      	bls.n	8000ec0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	e095      	b.n	8000fec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ec0:	4b4c      	ldr	r3, [pc, #304]	; (8000ff4 <HAL_RCC_OscConfig+0x4f4>)
 8000ec2:	6a1b      	ldr	r3, [r3, #32]
 8000ec4:	f003 0302 	and.w	r3, r3, #2
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d1ee      	bne.n	8000eaa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000ecc:	7dfb      	ldrb	r3, [r7, #23]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d105      	bne.n	8000ede <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ed2:	4b48      	ldr	r3, [pc, #288]	; (8000ff4 <HAL_RCC_OscConfig+0x4f4>)
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	4a47      	ldr	r2, [pc, #284]	; (8000ff4 <HAL_RCC_OscConfig+0x4f4>)
 8000ed8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000edc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	69db      	ldr	r3, [r3, #28]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f000 8081 	beq.w	8000fea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ee8:	4b42      	ldr	r3, [pc, #264]	; (8000ff4 <HAL_RCC_OscConfig+0x4f4>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 030c 	and.w	r3, r3, #12
 8000ef0:	2b08      	cmp	r3, #8
 8000ef2:	d061      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	69db      	ldr	r3, [r3, #28]
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d146      	bne.n	8000f8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000efc:	4b3f      	ldr	r3, [pc, #252]	; (8000ffc <HAL_RCC_OscConfig+0x4fc>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f02:	f7ff f9f1 	bl	80002e8 <HAL_GetTick>
 8000f06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f08:	e008      	b.n	8000f1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f0a:	f7ff f9ed 	bl	80002e8 <HAL_GetTick>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d901      	bls.n	8000f1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	e067      	b.n	8000fec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f1c:	4b35      	ldr	r3, [pc, #212]	; (8000ff4 <HAL_RCC_OscConfig+0x4f4>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d1f0      	bne.n	8000f0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a1b      	ldr	r3, [r3, #32]
 8000f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f30:	d108      	bne.n	8000f44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f32:	4b30      	ldr	r3, [pc, #192]	; (8000ff4 <HAL_RCC_OscConfig+0x4f4>)
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	492d      	ldr	r1, [pc, #180]	; (8000ff4 <HAL_RCC_OscConfig+0x4f4>)
 8000f40:	4313      	orrs	r3, r2
 8000f42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f44:	4b2b      	ldr	r3, [pc, #172]	; (8000ff4 <HAL_RCC_OscConfig+0x4f4>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6a19      	ldr	r1, [r3, #32]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f54:	430b      	orrs	r3, r1
 8000f56:	4927      	ldr	r1, [pc, #156]	; (8000ff4 <HAL_RCC_OscConfig+0x4f4>)
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f5c:	4b27      	ldr	r3, [pc, #156]	; (8000ffc <HAL_RCC_OscConfig+0x4fc>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f62:	f7ff f9c1 	bl	80002e8 <HAL_GetTick>
 8000f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f68:	e008      	b.n	8000f7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f6a:	f7ff f9bd 	bl	80002e8 <HAL_GetTick>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d901      	bls.n	8000f7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e037      	b.n	8000fec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f7c:	4b1d      	ldr	r3, [pc, #116]	; (8000ff4 <HAL_RCC_OscConfig+0x4f4>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d0f0      	beq.n	8000f6a <HAL_RCC_OscConfig+0x46a>
 8000f88:	e02f      	b.n	8000fea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f8a:	4b1c      	ldr	r3, [pc, #112]	; (8000ffc <HAL_RCC_OscConfig+0x4fc>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f90:	f7ff f9aa 	bl	80002e8 <HAL_GetTick>
 8000f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f96:	e008      	b.n	8000faa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f98:	f7ff f9a6 	bl	80002e8 <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d901      	bls.n	8000faa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e020      	b.n	8000fec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000faa:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_RCC_OscConfig+0x4f4>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1f0      	bne.n	8000f98 <HAL_RCC_OscConfig+0x498>
 8000fb6:	e018      	b.n	8000fea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	69db      	ldr	r3, [r3, #28]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d101      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e013      	b.n	8000fec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <HAL_RCC_OscConfig+0x4f4>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a1b      	ldr	r3, [r3, #32]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d106      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d001      	beq.n	8000fea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e000      	b.n	8000fec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000fea:	2300      	movs	r3, #0
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3718      	adds	r7, #24
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	40007000 	.word	0x40007000
 8000ffc:	42420060 	.word	0x42420060

08001000 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d101      	bne.n	8001014 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	e0d0      	b.n	80011b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001014:	4b6a      	ldr	r3, [pc, #424]	; (80011c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 0307 	and.w	r3, r3, #7
 800101c:	683a      	ldr	r2, [r7, #0]
 800101e:	429a      	cmp	r2, r3
 8001020:	d910      	bls.n	8001044 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001022:	4b67      	ldr	r3, [pc, #412]	; (80011c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f023 0207 	bic.w	r2, r3, #7
 800102a:	4965      	ldr	r1, [pc, #404]	; (80011c0 <HAL_RCC_ClockConfig+0x1c0>)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	4313      	orrs	r3, r2
 8001030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001032:	4b63      	ldr	r3, [pc, #396]	; (80011c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	429a      	cmp	r2, r3
 800103e:	d001      	beq.n	8001044 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e0b8      	b.n	80011b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0302 	and.w	r3, r3, #2
 800104c:	2b00      	cmp	r3, #0
 800104e:	d020      	beq.n	8001092 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0304 	and.w	r3, r3, #4
 8001058:	2b00      	cmp	r3, #0
 800105a:	d005      	beq.n	8001068 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800105c:	4b59      	ldr	r3, [pc, #356]	; (80011c4 <HAL_RCC_ClockConfig+0x1c4>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	4a58      	ldr	r2, [pc, #352]	; (80011c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001062:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001066:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0308 	and.w	r3, r3, #8
 8001070:	2b00      	cmp	r3, #0
 8001072:	d005      	beq.n	8001080 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001074:	4b53      	ldr	r3, [pc, #332]	; (80011c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	4a52      	ldr	r2, [pc, #328]	; (80011c4 <HAL_RCC_ClockConfig+0x1c4>)
 800107a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800107e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001080:	4b50      	ldr	r3, [pc, #320]	; (80011c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	494d      	ldr	r1, [pc, #308]	; (80011c4 <HAL_RCC_ClockConfig+0x1c4>)
 800108e:	4313      	orrs	r3, r2
 8001090:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	2b00      	cmp	r3, #0
 800109c:	d040      	beq.n	8001120 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d107      	bne.n	80010b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a6:	4b47      	ldr	r3, [pc, #284]	; (80011c4 <HAL_RCC_ClockConfig+0x1c4>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d115      	bne.n	80010de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e07f      	b.n	80011b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d107      	bne.n	80010ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010be:	4b41      	ldr	r3, [pc, #260]	; (80011c4 <HAL_RCC_ClockConfig+0x1c4>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d109      	bne.n	80010de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e073      	b.n	80011b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ce:	4b3d      	ldr	r3, [pc, #244]	; (80011c4 <HAL_RCC_ClockConfig+0x1c4>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e06b      	b.n	80011b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010de:	4b39      	ldr	r3, [pc, #228]	; (80011c4 <HAL_RCC_ClockConfig+0x1c4>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f023 0203 	bic.w	r2, r3, #3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	4936      	ldr	r1, [pc, #216]	; (80011c4 <HAL_RCC_ClockConfig+0x1c4>)
 80010ec:	4313      	orrs	r3, r2
 80010ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010f0:	f7ff f8fa 	bl	80002e8 <HAL_GetTick>
 80010f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010f6:	e00a      	b.n	800110e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010f8:	f7ff f8f6 	bl	80002e8 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	f241 3288 	movw	r2, #5000	; 0x1388
 8001106:	4293      	cmp	r3, r2
 8001108:	d901      	bls.n	800110e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e053      	b.n	80011b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800110e:	4b2d      	ldr	r3, [pc, #180]	; (80011c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f003 020c 	and.w	r2, r3, #12
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	429a      	cmp	r2, r3
 800111e:	d1eb      	bne.n	80010f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001120:	4b27      	ldr	r3, [pc, #156]	; (80011c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0307 	and.w	r3, r3, #7
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	429a      	cmp	r2, r3
 800112c:	d210      	bcs.n	8001150 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800112e:	4b24      	ldr	r3, [pc, #144]	; (80011c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f023 0207 	bic.w	r2, r3, #7
 8001136:	4922      	ldr	r1, [pc, #136]	; (80011c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	4313      	orrs	r3, r2
 800113c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800113e:	4b20      	ldr	r3, [pc, #128]	; (80011c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	683a      	ldr	r2, [r7, #0]
 8001148:	429a      	cmp	r2, r3
 800114a:	d001      	beq.n	8001150 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e032      	b.n	80011b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0304 	and.w	r3, r3, #4
 8001158:	2b00      	cmp	r3, #0
 800115a:	d008      	beq.n	800116e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800115c:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <HAL_RCC_ClockConfig+0x1c4>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	4916      	ldr	r1, [pc, #88]	; (80011c4 <HAL_RCC_ClockConfig+0x1c4>)
 800116a:	4313      	orrs	r3, r2
 800116c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0308 	and.w	r3, r3, #8
 8001176:	2b00      	cmp	r3, #0
 8001178:	d009      	beq.n	800118e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800117a:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <HAL_RCC_ClockConfig+0x1c4>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	691b      	ldr	r3, [r3, #16]
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	490e      	ldr	r1, [pc, #56]	; (80011c4 <HAL_RCC_ClockConfig+0x1c4>)
 800118a:	4313      	orrs	r3, r2
 800118c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800118e:	f000 f821 	bl	80011d4 <HAL_RCC_GetSysClockFreq>
 8001192:	4601      	mov	r1, r0
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	091b      	lsrs	r3, r3, #4
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <HAL_RCC_ClockConfig+0x1c8>)
 80011a0:	5cd3      	ldrb	r3, [r2, r3]
 80011a2:	fa21 f303 	lsr.w	r3, r1, r3
 80011a6:	4a09      	ldr	r2, [pc, #36]	; (80011cc <HAL_RCC_ClockConfig+0x1cc>)
 80011a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <HAL_RCC_ClockConfig+0x1d0>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff f858 	bl	8000264 <HAL_InitTick>

  return HAL_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40022000 	.word	0x40022000
 80011c4:	40021000 	.word	0x40021000
 80011c8:	08002bd0 	.word	0x08002bd0
 80011cc:	20000048 	.word	0x20000048
 80011d0:	20000000 	.word	0x20000000

080011d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011d4:	b490      	push	{r4, r7}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80011da:	4b2a      	ldr	r3, [pc, #168]	; (8001284 <HAL_RCC_GetSysClockFreq+0xb0>)
 80011dc:	1d3c      	adds	r4, r7, #4
 80011de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80011e4:	4b28      	ldr	r3, [pc, #160]	; (8001288 <HAL_RCC_GetSysClockFreq+0xb4>)
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
 80011ee:	2300      	movs	r3, #0
 80011f0:	61bb      	str	r3, [r7, #24]
 80011f2:	2300      	movs	r3, #0
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80011fa:	2300      	movs	r3, #0
 80011fc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80011fe:	4b23      	ldr	r3, [pc, #140]	; (800128c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	f003 030c 	and.w	r3, r3, #12
 800120a:	2b04      	cmp	r3, #4
 800120c:	d002      	beq.n	8001214 <HAL_RCC_GetSysClockFreq+0x40>
 800120e:	2b08      	cmp	r3, #8
 8001210:	d003      	beq.n	800121a <HAL_RCC_GetSysClockFreq+0x46>
 8001212:	e02d      	b.n	8001270 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001214:	4b1e      	ldr	r3, [pc, #120]	; (8001290 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001216:	623b      	str	r3, [r7, #32]
      break;
 8001218:	e02d      	b.n	8001276 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	0c9b      	lsrs	r3, r3, #18
 800121e:	f003 030f 	and.w	r3, r3, #15
 8001222:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001226:	4413      	add	r3, r2
 8001228:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800122c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d013      	beq.n	8001260 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001238:	4b14      	ldr	r3, [pc, #80]	; (800128c <HAL_RCC_GetSysClockFreq+0xb8>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	0c5b      	lsrs	r3, r3, #17
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001246:	4413      	add	r3, r2
 8001248:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800124c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	4a0f      	ldr	r2, [pc, #60]	; (8001290 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001252:	fb02 f203 	mul.w	r2, r2, r3
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	fbb2 f3f3 	udiv	r3, r2, r3
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
 800125e:	e004      	b.n	800126a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	4a0c      	ldr	r2, [pc, #48]	; (8001294 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001264:	fb02 f303 	mul.w	r3, r2, r3
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126c:	623b      	str	r3, [r7, #32]
      break;
 800126e:	e002      	b.n	8001276 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001270:	4b07      	ldr	r3, [pc, #28]	; (8001290 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001272:	623b      	str	r3, [r7, #32]
      break;
 8001274:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001276:	6a3b      	ldr	r3, [r7, #32]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3728      	adds	r7, #40	; 0x28
 800127c:	46bd      	mov	sp, r7
 800127e:	bc90      	pop	{r4, r7}
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	08002bbc 	.word	0x08002bbc
 8001288:	08002bcc 	.word	0x08002bcc
 800128c:	40021000 	.word	0x40021000
 8001290:	007a1200 	.word	0x007a1200
 8001294:	003d0900 	.word	0x003d0900

08001298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800129c:	4b02      	ldr	r3, [pc, #8]	; (80012a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800129e:	681b      	ldr	r3, [r3, #0]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr
 80012a8:	20000048 	.word	0x20000048

080012ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80012b0:	f7ff fff2 	bl	8001298 <HAL_RCC_GetHCLKFreq>
 80012b4:	4601      	mov	r1, r0
 80012b6:	4b05      	ldr	r3, [pc, #20]	; (80012cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	0a1b      	lsrs	r3, r3, #8
 80012bc:	f003 0307 	and.w	r3, r3, #7
 80012c0:	4a03      	ldr	r2, [pc, #12]	; (80012d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80012c2:	5cd3      	ldrb	r3, [r2, r3]
 80012c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40021000 	.word	0x40021000
 80012d0:	08002be0 	.word	0x08002be0

080012d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80012d8:	f7ff ffde 	bl	8001298 <HAL_RCC_GetHCLKFreq>
 80012dc:	4601      	mov	r1, r0
 80012de:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	0adb      	lsrs	r3, r3, #11
 80012e4:	f003 0307 	and.w	r3, r3, #7
 80012e8:	4a03      	ldr	r2, [pc, #12]	; (80012f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80012ea:	5cd3      	ldrb	r3, [r2, r3]
 80012ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40021000 	.word	0x40021000
 80012f8:	08002be0 	.word	0x08002be0

080012fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001304:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <RCC_Delay+0x34>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <RCC_Delay+0x38>)
 800130a:	fba2 2303 	umull	r2, r3, r2, r3
 800130e:	0a5b      	lsrs	r3, r3, #9
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	fb02 f303 	mul.w	r3, r2, r3
 8001316:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001318:	bf00      	nop
  }
  while (Delay --);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	1e5a      	subs	r2, r3, #1
 800131e:	60fa      	str	r2, [r7, #12]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1f9      	bne.n	8001318 <RCC_Delay+0x1c>
}
 8001324:	bf00      	nop
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	20000048 	.word	0x20000048
 8001334:	10624dd3 	.word	0x10624dd3

08001338 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e01d      	b.n	8001386 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d106      	bne.n	8001364 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f001 fb2a 	bl	80029b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2202      	movs	r2, #2
 8001368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3304      	adds	r3, #4
 8001374:	4619      	mov	r1, r3
 8001376:	4610      	mov	r0, r2
 8001378:	f000 fa10 	bl	800179c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2201      	movs	r2, #1
 8001380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800138e:	b480      	push	{r7}
 8001390:	b085      	sub	sp, #20
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68da      	ldr	r2, [r3, #12]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f042 0201 	orr.w	r2, r2, #1
 80013a4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f003 0307 	and.w	r3, r3, #7
 80013b0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2b06      	cmp	r3, #6
 80013b6:	d007      	beq.n	80013c8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f042 0201 	orr.w	r2, r2, #1
 80013c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr

080013d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d122      	bne.n	8001430 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d11b      	bne.n	8001430 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f06f 0202 	mvn.w	r2, #2
 8001400:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2201      	movs	r2, #1
 8001406:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	f003 0303 	and.w	r3, r3, #3
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f000 f9a4 	bl	8001764 <HAL_TIM_IC_CaptureCallback>
 800141c:	e005      	b.n	800142a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f000 f997 	bl	8001752 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f000 f9a6 	bl	8001776 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	f003 0304 	and.w	r3, r3, #4
 800143a:	2b04      	cmp	r3, #4
 800143c:	d122      	bne.n	8001484 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	f003 0304 	and.w	r3, r3, #4
 8001448:	2b04      	cmp	r3, #4
 800144a:	d11b      	bne.n	8001484 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f06f 0204 	mvn.w	r2, #4
 8001454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2202      	movs	r2, #2
 800145a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 f97a 	bl	8001764 <HAL_TIM_IC_CaptureCallback>
 8001470:	e005      	b.n	800147e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f000 f96d 	bl	8001752 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f000 f97c 	bl	8001776 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	2b08      	cmp	r3, #8
 8001490:	d122      	bne.n	80014d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	f003 0308 	and.w	r3, r3, #8
 800149c:	2b08      	cmp	r3, #8
 800149e:	d11b      	bne.n	80014d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f06f 0208 	mvn.w	r2, #8
 80014a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2204      	movs	r2, #4
 80014ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	f003 0303 	and.w	r3, r3, #3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f000 f950 	bl	8001764 <HAL_TIM_IC_CaptureCallback>
 80014c4:	e005      	b.n	80014d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f000 f943 	bl	8001752 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f000 f952 	bl	8001776 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	f003 0310 	and.w	r3, r3, #16
 80014e2:	2b10      	cmp	r3, #16
 80014e4:	d122      	bne.n	800152c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	f003 0310 	and.w	r3, r3, #16
 80014f0:	2b10      	cmp	r3, #16
 80014f2:	d11b      	bne.n	800152c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f06f 0210 	mvn.w	r2, #16
 80014fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2208      	movs	r2, #8
 8001502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f000 f926 	bl	8001764 <HAL_TIM_IC_CaptureCallback>
 8001518:	e005      	b.n	8001526 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f000 f919 	bl	8001752 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f000 f928 	bl	8001776 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b01      	cmp	r3, #1
 8001538:	d10e      	bne.n	8001558 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	2b01      	cmp	r3, #1
 8001546:	d107      	bne.n	8001558 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f06f 0201 	mvn.w	r2, #1
 8001550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f001 f87e 	bl	8002654 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001562:	2b80      	cmp	r3, #128	; 0x80
 8001564:	d10e      	bne.n	8001584 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001570:	2b80      	cmp	r3, #128	; 0x80
 8001572:	d107      	bne.n	8001584 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800157c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f000 fa69 	bl	8001a56 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800158e:	2b40      	cmp	r3, #64	; 0x40
 8001590:	d10e      	bne.n	80015b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800159c:	2b40      	cmp	r3, #64	; 0x40
 800159e:	d107      	bne.n	80015b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80015a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f000 f8ec 	bl	8001788 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	f003 0320 	and.w	r3, r3, #32
 80015ba:	2b20      	cmp	r3, #32
 80015bc:	d10e      	bne.n	80015dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	f003 0320 	and.w	r3, r3, #32
 80015c8:	2b20      	cmp	r3, #32
 80015ca:	d107      	bne.n	80015dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f06f 0220 	mvn.w	r2, #32
 80015d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 fa34 	bl	8001a44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80015dc:	bf00      	nop
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d101      	bne.n	80015fc <HAL_TIM_ConfigClockSource+0x18>
 80015f8:	2302      	movs	r3, #2
 80015fa:	e0a6      	b.n	800174a <HAL_TIM_ConfigClockSource+0x166>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2202      	movs	r2, #2
 8001608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800161a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001622:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	68fa      	ldr	r2, [r7, #12]
 800162a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b40      	cmp	r3, #64	; 0x40
 8001632:	d067      	beq.n	8001704 <HAL_TIM_ConfigClockSource+0x120>
 8001634:	2b40      	cmp	r3, #64	; 0x40
 8001636:	d80b      	bhi.n	8001650 <HAL_TIM_ConfigClockSource+0x6c>
 8001638:	2b10      	cmp	r3, #16
 800163a:	d073      	beq.n	8001724 <HAL_TIM_ConfigClockSource+0x140>
 800163c:	2b10      	cmp	r3, #16
 800163e:	d802      	bhi.n	8001646 <HAL_TIM_ConfigClockSource+0x62>
 8001640:	2b00      	cmp	r3, #0
 8001642:	d06f      	beq.n	8001724 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001644:	e078      	b.n	8001738 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001646:	2b20      	cmp	r3, #32
 8001648:	d06c      	beq.n	8001724 <HAL_TIM_ConfigClockSource+0x140>
 800164a:	2b30      	cmp	r3, #48	; 0x30
 800164c:	d06a      	beq.n	8001724 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800164e:	e073      	b.n	8001738 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001650:	2b70      	cmp	r3, #112	; 0x70
 8001652:	d00d      	beq.n	8001670 <HAL_TIM_ConfigClockSource+0x8c>
 8001654:	2b70      	cmp	r3, #112	; 0x70
 8001656:	d804      	bhi.n	8001662 <HAL_TIM_ConfigClockSource+0x7e>
 8001658:	2b50      	cmp	r3, #80	; 0x50
 800165a:	d033      	beq.n	80016c4 <HAL_TIM_ConfigClockSource+0xe0>
 800165c:	2b60      	cmp	r3, #96	; 0x60
 800165e:	d041      	beq.n	80016e4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001660:	e06a      	b.n	8001738 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001666:	d066      	beq.n	8001736 <HAL_TIM_ConfigClockSource+0x152>
 8001668:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800166c:	d017      	beq.n	800169e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800166e:	e063      	b.n	8001738 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6818      	ldr	r0, [r3, #0]
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	6899      	ldr	r1, [r3, #8]
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685a      	ldr	r2, [r3, #4]
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	f000 f97d 	bl	800197e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001692:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	68fa      	ldr	r2, [r7, #12]
 800169a:	609a      	str	r2, [r3, #8]
      break;
 800169c:	e04c      	b.n	8001738 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6818      	ldr	r0, [r3, #0]
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	6899      	ldr	r1, [r3, #8]
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	f000 f966 	bl	800197e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80016c0:	609a      	str	r2, [r3, #8]
      break;
 80016c2:	e039      	b.n	8001738 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6818      	ldr	r0, [r3, #0]
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	6859      	ldr	r1, [r3, #4]
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	461a      	mov	r2, r3
 80016d2:	f000 f8dd 	bl	8001890 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2150      	movs	r1, #80	; 0x50
 80016dc:	4618      	mov	r0, r3
 80016de:	f000 f934 	bl	800194a <TIM_ITRx_SetConfig>
      break;
 80016e2:	e029      	b.n	8001738 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6818      	ldr	r0, [r3, #0]
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	6859      	ldr	r1, [r3, #4]
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	461a      	mov	r2, r3
 80016f2:	f000 f8fb 	bl	80018ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2160      	movs	r1, #96	; 0x60
 80016fc:	4618      	mov	r0, r3
 80016fe:	f000 f924 	bl	800194a <TIM_ITRx_SetConfig>
      break;
 8001702:	e019      	b.n	8001738 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6818      	ldr	r0, [r3, #0]
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	6859      	ldr	r1, [r3, #4]
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	461a      	mov	r2, r3
 8001712:	f000 f8bd 	bl	8001890 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2140      	movs	r1, #64	; 0x40
 800171c:	4618      	mov	r0, r3
 800171e:	f000 f914 	bl	800194a <TIM_ITRx_SetConfig>
      break;
 8001722:	e009      	b.n	8001738 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4619      	mov	r1, r3
 800172e:	4610      	mov	r0, r2
 8001730:	f000 f90b 	bl	800194a <TIM_ITRx_SetConfig>
      break;
 8001734:	e000      	b.n	8001738 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001736:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr

08001764 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr

08001776 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr

08001788 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr
	...

0800179c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a33      	ldr	r2, [pc, #204]	; (800187c <TIM_Base_SetConfig+0xe0>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d013      	beq.n	80017dc <TIM_Base_SetConfig+0x40>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a32      	ldr	r2, [pc, #200]	; (8001880 <TIM_Base_SetConfig+0xe4>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d00f      	beq.n	80017dc <TIM_Base_SetConfig+0x40>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017c2:	d00b      	beq.n	80017dc <TIM_Base_SetConfig+0x40>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a2f      	ldr	r2, [pc, #188]	; (8001884 <TIM_Base_SetConfig+0xe8>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d007      	beq.n	80017dc <TIM_Base_SetConfig+0x40>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4a2e      	ldr	r2, [pc, #184]	; (8001888 <TIM_Base_SetConfig+0xec>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d003      	beq.n	80017dc <TIM_Base_SetConfig+0x40>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4a2d      	ldr	r2, [pc, #180]	; (800188c <TIM_Base_SetConfig+0xf0>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d108      	bne.n	80017ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	68fa      	ldr	r2, [r7, #12]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a22      	ldr	r2, [pc, #136]	; (800187c <TIM_Base_SetConfig+0xe0>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d013      	beq.n	800181e <TIM_Base_SetConfig+0x82>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a21      	ldr	r2, [pc, #132]	; (8001880 <TIM_Base_SetConfig+0xe4>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d00f      	beq.n	800181e <TIM_Base_SetConfig+0x82>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001804:	d00b      	beq.n	800181e <TIM_Base_SetConfig+0x82>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a1e      	ldr	r2, [pc, #120]	; (8001884 <TIM_Base_SetConfig+0xe8>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d007      	beq.n	800181e <TIM_Base_SetConfig+0x82>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a1d      	ldr	r2, [pc, #116]	; (8001888 <TIM_Base_SetConfig+0xec>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d003      	beq.n	800181e <TIM_Base_SetConfig+0x82>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a1c      	ldr	r2, [pc, #112]	; (800188c <TIM_Base_SetConfig+0xf0>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d108      	bne.n	8001830 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001824:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	4313      	orrs	r3, r2
 800182e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	4313      	orrs	r3, r2
 800183c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a09      	ldr	r2, [pc, #36]	; (800187c <TIM_Base_SetConfig+0xe0>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d003      	beq.n	8001864 <TIM_Base_SetConfig+0xc8>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a08      	ldr	r2, [pc, #32]	; (8001880 <TIM_Base_SetConfig+0xe4>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d103      	bne.n	800186c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	691a      	ldr	r2, [r3, #16]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	615a      	str	r2, [r3, #20]
}
 8001872:	bf00      	nop
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr
 800187c:	40012c00 	.word	0x40012c00
 8001880:	40013400 	.word	0x40013400
 8001884:	40000400 	.word	0x40000400
 8001888:	40000800 	.word	0x40000800
 800188c:	40000c00 	.word	0x40000c00

08001890 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001890:	b480      	push	{r7}
 8001892:	b087      	sub	sp, #28
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6a1b      	ldr	r3, [r3, #32]
 80018a6:	f023 0201 	bic.w	r2, r3, #1
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	011b      	lsls	r3, r3, #4
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	f023 030a 	bic.w	r3, r3, #10
 80018cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	621a      	str	r2, [r3, #32]
}
 80018e2:	bf00      	nop
 80018e4:	371c      	adds	r7, #28
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr

080018ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b087      	sub	sp, #28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	f023 0210 	bic.w	r2, r3, #16
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001916:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	031b      	lsls	r3, r3, #12
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	4313      	orrs	r3, r2
 8001920:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001928:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	011b      	lsls	r3, r3, #4
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	621a      	str	r2, [r3, #32]
}
 8001940:	bf00      	nop
 8001942:	371c      	adds	r7, #28
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr

0800194a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800194a:	b480      	push	{r7}
 800194c:	b085      	sub	sp, #20
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001960:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4313      	orrs	r3, r2
 8001968:	f043 0307 	orr.w	r3, r3, #7
 800196c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	609a      	str	r2, [r3, #8]
}
 8001974:	bf00      	nop
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr

0800197e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800197e:	b480      	push	{r7}
 8001980:	b087      	sub	sp, #28
 8001982:	af00      	add	r7, sp, #0
 8001984:	60f8      	str	r0, [r7, #12]
 8001986:	60b9      	str	r1, [r7, #8]
 8001988:	607a      	str	r2, [r7, #4]
 800198a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001998:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	021a      	lsls	r2, r3, #8
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	431a      	orrs	r2, r3
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	609a      	str	r2, [r3, #8]
}
 80019b2:	bf00      	nop
 80019b4:	371c      	adds	r7, #28
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr

080019bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d101      	bne.n	80019d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80019d0:	2302      	movs	r3, #2
 80019d2:	e032      	b.n	8001a3a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2202      	movs	r2, #2
 80019e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a0c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	68ba      	ldr	r2, [r7, #8]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68ba      	ldr	r2, [r7, #8]
 8001a26:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr

08001a56 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr

08001a68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e03f      	b.n	8001afa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d106      	bne.n	8001a94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 ffe2 	bl	8002a58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2224      	movs	r2, #36	; 0x24
 8001a98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001aaa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f000 fb8d 	bl	80021cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	691a      	ldr	r2, [r3, #16]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ac0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	695a      	ldr	r2, [r3, #20]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ad0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68da      	ldr	r2, [r3, #12]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ae0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2220      	movs	r2, #32
 8001aec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2220      	movs	r2, #32
 8001af4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b088      	sub	sp, #32
 8001b06:	af02      	add	r7, sp, #8
 8001b08:	60f8      	str	r0, [r7, #12]
 8001b0a:	60b9      	str	r1, [r7, #8]
 8001b0c:	603b      	str	r3, [r7, #0]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b20      	cmp	r3, #32
 8001b20:	f040 8083 	bne.w	8001c2a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d002      	beq.n	8001b30 <HAL_UART_Transmit+0x2e>
 8001b2a:	88fb      	ldrh	r3, [r7, #6]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d101      	bne.n	8001b34 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e07b      	b.n	8001c2c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d101      	bne.n	8001b42 <HAL_UART_Transmit+0x40>
 8001b3e:	2302      	movs	r3, #2
 8001b40:	e074      	b.n	8001c2c <HAL_UART_Transmit+0x12a>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2221      	movs	r2, #33	; 0x21
 8001b54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001b58:	f7fe fbc6 	bl	80002e8 <HAL_GetTick>
 8001b5c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	88fa      	ldrh	r2, [r7, #6]
 8001b62:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	88fa      	ldrh	r2, [r7, #6]
 8001b68:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b6a:	e042      	b.n	8001bf2 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	3b01      	subs	r3, #1
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b82:	d122      	bne.n	8001bca <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2180      	movs	r1, #128	; 0x80
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f000 f9b2 	bl	8001ef8 <UART_WaitOnFlagUntilTimeout>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e046      	b.n	8001c2c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bb0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d103      	bne.n	8001bc2 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	3302      	adds	r3, #2
 8001bbe:	60bb      	str	r3, [r7, #8]
 8001bc0:	e017      	b.n	8001bf2 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	e013      	b.n	8001bf2 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2180      	movs	r1, #128	; 0x80
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f000 f98f 	bl	8001ef8 <UART_WaitOnFlagUntilTimeout>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e023      	b.n	8001c2c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	60ba      	str	r2, [r7, #8]
 8001bea:	781a      	ldrb	r2, [r3, #0]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1b7      	bne.n	8001b6c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	2200      	movs	r2, #0
 8001c04:	2140      	movs	r1, #64	; 0x40
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f000 f976 	bl	8001ef8 <UART_WaitOnFlagUntilTimeout>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e00a      	b.n	8001c2c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2220      	movs	r2, #32
 8001c1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001c26:	2300      	movs	r3, #0
 8001c28:	e000      	b.n	8001c2c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001c2a:	2302      	movs	r3, #2
  }
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b20      	cmp	r3, #32
 8001c4c:	d140      	bne.n	8001cd0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d002      	beq.n	8001c5a <HAL_UART_Receive_IT+0x26>
 8001c54:	88fb      	ldrh	r3, [r7, #6]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e039      	b.n	8001cd2 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d101      	bne.n	8001c6c <HAL_UART_Receive_IT+0x38>
 8001c68:	2302      	movs	r3, #2
 8001c6a:	e032      	b.n	8001cd2 <HAL_UART_Receive_IT+0x9e>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	88fa      	ldrh	r2, [r7, #6]
 8001c7e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	88fa      	ldrh	r2, [r7, #6]
 8001c84:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2222      	movs	r2, #34	; 0x22
 8001c90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68da      	ldr	r2, [r3, #12]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001caa:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	695a      	ldr	r2, [r3, #20]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f042 0201 	orr.w	r2, r2, #1
 8001cba:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68da      	ldr	r2, [r3, #12]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 0220 	orr.w	r2, r2, #32
 8001cca:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	e000      	b.n	8001cd2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001cd0:	2302      	movs	r3, #2
  }
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr

08001cdc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b088      	sub	sp, #32
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001d00:	2300      	movs	r3, #0
 8001d02:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10d      	bne.n	8001d2e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	f003 0320 	and.w	r3, r3, #32
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d008      	beq.n	8001d2e <HAL_UART_IRQHandler+0x52>
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	f003 0320 	and.w	r3, r3, #32
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f9ce 	bl	80020c8 <UART_Receive_IT>
      return;
 8001d2c:	e0cc      	b.n	8001ec8 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 80ab 	beq.w	8001e8c <HAL_UART_IRQHandler+0x1b0>
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d105      	bne.n	8001d4c <HAL_UART_IRQHandler+0x70>
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f000 80a0 	beq.w	8001e8c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00a      	beq.n	8001d6c <HAL_UART_IRQHandler+0x90>
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d005      	beq.n	8001d6c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d64:	f043 0201 	orr.w	r2, r3, #1
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f003 0304 	and.w	r3, r3, #4
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00a      	beq.n	8001d8c <HAL_UART_IRQHandler+0xb0>
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d005      	beq.n	8001d8c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d84:	f043 0202 	orr.w	r2, r3, #2
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00a      	beq.n	8001dac <HAL_UART_IRQHandler+0xd0>
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d005      	beq.n	8001dac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da4:	f043 0204 	orr.w	r2, r3, #4
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00a      	beq.n	8001dcc <HAL_UART_IRQHandler+0xf0>
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d005      	beq.n	8001dcc <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dc4:	f043 0208 	orr.w	r2, r3, #8
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d078      	beq.n	8001ec6 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f003 0320 	and.w	r3, r3, #32
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d007      	beq.n	8001dee <HAL_UART_IRQHandler+0x112>
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	f003 0320 	and.w	r3, r3, #32
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d002      	beq.n	8001dee <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 f96d 	bl	80020c8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	695b      	ldr	r3, [r3, #20]
 8001df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	bf14      	ite	ne
 8001dfc:	2301      	movne	r3, #1
 8001dfe:	2300      	moveq	r3, #0
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e08:	f003 0308 	and.w	r3, r3, #8
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d102      	bne.n	8001e16 <HAL_UART_IRQHandler+0x13a>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d031      	beq.n	8001e7a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f8b8 	bl	8001f8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d023      	beq.n	8001e72 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	695a      	ldr	r2, [r3, #20]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e38:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d013      	beq.n	8001e6a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e46:	4a22      	ldr	r2, [pc, #136]	; (8001ed0 <HAL_UART_IRQHandler+0x1f4>)
 8001e48:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe fb84 	bl	800055c <HAL_DMA_Abort_IT>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d016      	beq.n	8001e88 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e64:	4610      	mov	r0, r2
 8001e66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e68:	e00e      	b.n	8001e88 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f83b 	bl	8001ee6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e70:	e00a      	b.n	8001e88 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f837 	bl	8001ee6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e78:	e006      	b.n	8001e88 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f833 	bl	8001ee6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001e86:	e01e      	b.n	8001ec6 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e88:	bf00      	nop
    return;
 8001e8a:	e01c      	b.n	8001ec6 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d008      	beq.n	8001ea8 <HAL_UART_IRQHandler+0x1cc>
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 f8a4 	bl	8001fee <UART_Transmit_IT>
    return;
 8001ea6:	e00f      	b.n	8001ec8 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00a      	beq.n	8001ec8 <HAL_UART_IRQHandler+0x1ec>
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d005      	beq.n	8001ec8 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 f8eb 	bl	8002098 <UART_EndTransmit_IT>
    return;
 8001ec2:	bf00      	nop
 8001ec4:	e000      	b.n	8001ec8 <HAL_UART_IRQHandler+0x1ec>
    return;
 8001ec6:	bf00      	nop
  }
}
 8001ec8:	3720      	adds	r7, #32
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	08001fc7 	.word	0x08001fc7

08001ed4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr

08001ee6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr

08001ef8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	603b      	str	r3, [r7, #0]
 8001f04:	4613      	mov	r3, r2
 8001f06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f08:	e02c      	b.n	8001f64 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f10:	d028      	beq.n	8001f64 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d007      	beq.n	8001f28 <UART_WaitOnFlagUntilTimeout+0x30>
 8001f18:	f7fe f9e6 	bl	80002e8 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d21d      	bcs.n	8001f64 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68da      	ldr	r2, [r3, #12]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001f36:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	695a      	ldr	r2, [r3, #20]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0201 	bic.w	r2, r2, #1
 8001f46:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2220      	movs	r2, #32
 8001f4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2220      	movs	r2, #32
 8001f54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e00f      	b.n	8001f84 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	bf0c      	ite	eq
 8001f74:	2301      	moveq	r3, #1
 8001f76:	2300      	movne	r3, #0
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d0c3      	beq.n	8001f0a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68da      	ldr	r2, [r3, #12]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001fa2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	695a      	ldr	r2, [r3, #20]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f022 0201 	bic.w	r2, r2, #1
 8001fb2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr

08001fc6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b084      	sub	sp, #16
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f7ff ff80 	bl	8001ee6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001fe6:	bf00      	nop
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b085      	sub	sp, #20
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b21      	cmp	r3, #33	; 0x21
 8002000:	d144      	bne.n	800208c <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800200a:	d11a      	bne.n	8002042 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	461a      	mov	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002020:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d105      	bne.n	8002036 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	1c9a      	adds	r2, r3, #2
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	621a      	str	r2, [r3, #32]
 8002034:	e00e      	b.n	8002054 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	1c5a      	adds	r2, r3, #1
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	621a      	str	r2, [r3, #32]
 8002040:	e008      	b.n	8002054 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	1c59      	adds	r1, r3, #1
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6211      	str	r1, [r2, #32]
 800204c:	781a      	ldrb	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002058:	b29b      	uxth	r3, r3
 800205a:	3b01      	subs	r3, #1
 800205c:	b29b      	uxth	r3, r3
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	4619      	mov	r1, r3
 8002062:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002064:	2b00      	cmp	r3, #0
 8002066:	d10f      	bne.n	8002088 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002076:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68da      	ldr	r2, [r3, #12]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002086:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002088:	2300      	movs	r3, #0
 800208a:	e000      	b.n	800208e <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800208c:	2302      	movs	r3, #2
  }
}
 800208e:	4618      	mov	r0, r3
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr

08002098 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020ae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2220      	movs	r2, #32
 80020b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7ff ff0b 	bl	8001ed4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b22      	cmp	r3, #34	; 0x22
 80020da:	d171      	bne.n	80021c0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020e4:	d123      	bne.n	800212e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ea:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10e      	bne.n	8002112 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002100:	b29a      	uxth	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210a:	1c9a      	adds	r2, r3, #2
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	629a      	str	r2, [r3, #40]	; 0x28
 8002110:	e029      	b.n	8002166 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	b29b      	uxth	r3, r3
 800211a:	b2db      	uxtb	r3, r3
 800211c:	b29a      	uxth	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002126:	1c5a      	adds	r2, r3, #1
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	629a      	str	r2, [r3, #40]	; 0x28
 800212c:	e01b      	b.n	8002166 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10a      	bne.n	800214c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6858      	ldr	r0, [r3, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002140:	1c59      	adds	r1, r3, #1
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	6291      	str	r1, [r2, #40]	; 0x28
 8002146:	b2c2      	uxtb	r2, r0
 8002148:	701a      	strb	r2, [r3, #0]
 800214a:	e00c      	b.n	8002166 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	b2da      	uxtb	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002158:	1c58      	adds	r0, r3, #1
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	6288      	str	r0, [r1, #40]	; 0x28
 800215e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002162:	b2d2      	uxtb	r2, r2
 8002164:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800216a:	b29b      	uxth	r3, r3
 800216c:	3b01      	subs	r3, #1
 800216e:	b29b      	uxth	r3, r3
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	4619      	mov	r1, r3
 8002174:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002176:	2b00      	cmp	r3, #0
 8002178:	d120      	bne.n	80021bc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68da      	ldr	r2, [r3, #12]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 0220 	bic.w	r2, r2, #32
 8002188:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68da      	ldr	r2, [r3, #12]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002198:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	695a      	ldr	r2, [r3, #20]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 0201 	bic.w	r2, r2, #1
 80021a8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2220      	movs	r2, #32
 80021ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 fa64 	bl	8002680 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80021b8:	2300      	movs	r3, #0
 80021ba:	e002      	b.n	80021c2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80021bc:	2300      	movs	r3, #0
 80021be:	e000      	b.n	80021c2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80021c0:	2302      	movs	r3, #2
  }
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
	...

080021cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002206:	f023 030c 	bic.w	r3, r3, #12
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6812      	ldr	r2, [r2, #0]
 800220e:	68f9      	ldr	r1, [r7, #12]
 8002210:	430b      	orrs	r3, r1
 8002212:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699a      	ldr	r2, [r3, #24]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a52      	ldr	r2, [pc, #328]	; (8002378 <UART_SetConfig+0x1ac>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d14e      	bne.n	80022d2 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002234:	f7ff f84e 	bl	80012d4 <HAL_RCC_GetPCLK2Freq>
 8002238:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	009a      	lsls	r2, r3, #2
 8002244:	441a      	add	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002250:	4a4a      	ldr	r2, [pc, #296]	; (800237c <UART_SetConfig+0x1b0>)
 8002252:	fba2 2303 	umull	r2, r3, r2, r3
 8002256:	095b      	lsrs	r3, r3, #5
 8002258:	0119      	lsls	r1, r3, #4
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	009a      	lsls	r2, r3, #2
 8002264:	441a      	add	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002270:	4b42      	ldr	r3, [pc, #264]	; (800237c <UART_SetConfig+0x1b0>)
 8002272:	fba3 0302 	umull	r0, r3, r3, r2
 8002276:	095b      	lsrs	r3, r3, #5
 8002278:	2064      	movs	r0, #100	; 0x64
 800227a:	fb00 f303 	mul.w	r3, r0, r3
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	3332      	adds	r3, #50	; 0x32
 8002284:	4a3d      	ldr	r2, [pc, #244]	; (800237c <UART_SetConfig+0x1b0>)
 8002286:	fba2 2303 	umull	r2, r3, r2, r3
 800228a:	095b      	lsrs	r3, r3, #5
 800228c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002290:	4419      	add	r1, r3
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	4613      	mov	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	009a      	lsls	r2, r3, #2
 800229c:	441a      	add	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80022a8:	4b34      	ldr	r3, [pc, #208]	; (800237c <UART_SetConfig+0x1b0>)
 80022aa:	fba3 0302 	umull	r0, r3, r3, r2
 80022ae:	095b      	lsrs	r3, r3, #5
 80022b0:	2064      	movs	r0, #100	; 0x64
 80022b2:	fb00 f303 	mul.w	r3, r0, r3
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	3332      	adds	r3, #50	; 0x32
 80022bc:	4a2f      	ldr	r2, [pc, #188]	; (800237c <UART_SetConfig+0x1b0>)
 80022be:	fba2 2303 	umull	r2, r3, r2, r3
 80022c2:	095b      	lsrs	r3, r3, #5
 80022c4:	f003 020f 	and.w	r2, r3, #15
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	440a      	add	r2, r1
 80022ce:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80022d0:	e04d      	b.n	800236e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80022d2:	f7fe ffeb 	bl	80012ac <HAL_RCC_GetPCLK1Freq>
 80022d6:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022d8:	68ba      	ldr	r2, [r7, #8]
 80022da:	4613      	mov	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	009a      	lsls	r2, r3, #2
 80022e2:	441a      	add	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ee:	4a23      	ldr	r2, [pc, #140]	; (800237c <UART_SetConfig+0x1b0>)
 80022f0:	fba2 2303 	umull	r2, r3, r2, r3
 80022f4:	095b      	lsrs	r3, r3, #5
 80022f6:	0119      	lsls	r1, r3, #4
 80022f8:	68ba      	ldr	r2, [r7, #8]
 80022fa:	4613      	mov	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	009a      	lsls	r2, r3, #2
 8002302:	441a      	add	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	fbb2 f2f3 	udiv	r2, r2, r3
 800230e:	4b1b      	ldr	r3, [pc, #108]	; (800237c <UART_SetConfig+0x1b0>)
 8002310:	fba3 0302 	umull	r0, r3, r3, r2
 8002314:	095b      	lsrs	r3, r3, #5
 8002316:	2064      	movs	r0, #100	; 0x64
 8002318:	fb00 f303 	mul.w	r3, r0, r3
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	011b      	lsls	r3, r3, #4
 8002320:	3332      	adds	r3, #50	; 0x32
 8002322:	4a16      	ldr	r2, [pc, #88]	; (800237c <UART_SetConfig+0x1b0>)
 8002324:	fba2 2303 	umull	r2, r3, r2, r3
 8002328:	095b      	lsrs	r3, r3, #5
 800232a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800232e:	4419      	add	r1, r3
 8002330:	68ba      	ldr	r2, [r7, #8]
 8002332:	4613      	mov	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	009a      	lsls	r2, r3, #2
 800233a:	441a      	add	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	fbb2 f2f3 	udiv	r2, r2, r3
 8002346:	4b0d      	ldr	r3, [pc, #52]	; (800237c <UART_SetConfig+0x1b0>)
 8002348:	fba3 0302 	umull	r0, r3, r3, r2
 800234c:	095b      	lsrs	r3, r3, #5
 800234e:	2064      	movs	r0, #100	; 0x64
 8002350:	fb00 f303 	mul.w	r3, r0, r3
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	011b      	lsls	r3, r3, #4
 8002358:	3332      	adds	r3, #50	; 0x32
 800235a:	4a08      	ldr	r2, [pc, #32]	; (800237c <UART_SetConfig+0x1b0>)
 800235c:	fba2 2303 	umull	r2, r3, r2, r3
 8002360:	095b      	lsrs	r3, r3, #5
 8002362:	f003 020f 	and.w	r2, r3, #15
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	440a      	add	r2, r1
 800236c:	609a      	str	r2, [r3, #8]
}
 800236e:	bf00      	nop
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40013800 	.word	0x40013800
 800237c:	51eb851f 	.word	0x51eb851f

08002380 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b088      	sub	sp, #32
 8002384:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002386:	f107 0310 	add.w	r3, r7, #16
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	605a      	str	r2, [r3, #4]
 8002390:	609a      	str	r2, [r3, #8]
 8002392:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002394:	4b46      	ldr	r3, [pc, #280]	; (80024b0 <MX_GPIO_Init+0x130>)
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	4a45      	ldr	r2, [pc, #276]	; (80024b0 <MX_GPIO_Init+0x130>)
 800239a:	f043 0320 	orr.w	r3, r3, #32
 800239e:	6193      	str	r3, [r2, #24]
 80023a0:	4b43      	ldr	r3, [pc, #268]	; (80024b0 <MX_GPIO_Init+0x130>)
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	f003 0320 	and.w	r3, r3, #32
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ac:	4b40      	ldr	r3, [pc, #256]	; (80024b0 <MX_GPIO_Init+0x130>)
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	4a3f      	ldr	r2, [pc, #252]	; (80024b0 <MX_GPIO_Init+0x130>)
 80023b2:	f043 0304 	orr.w	r3, r3, #4
 80023b6:	6193      	str	r3, [r2, #24]
 80023b8:	4b3d      	ldr	r3, [pc, #244]	; (80024b0 <MX_GPIO_Init+0x130>)
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	60bb      	str	r3, [r7, #8]
 80023c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023c4:	4b3a      	ldr	r3, [pc, #232]	; (80024b0 <MX_GPIO_Init+0x130>)
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	4a39      	ldr	r2, [pc, #228]	; (80024b0 <MX_GPIO_Init+0x130>)
 80023ca:	f043 0310 	orr.w	r3, r3, #16
 80023ce:	6193      	str	r3, [r2, #24]
 80023d0:	4b37      	ldr	r3, [pc, #220]	; (80024b0 <MX_GPIO_Init+0x130>)
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	f003 0310 	and.w	r3, r3, #16
 80023d8:	607b      	str	r3, [r7, #4]
 80023da:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 80023dc:	2200      	movs	r2, #0
 80023de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023e2:	4834      	ldr	r0, [pc, #208]	; (80024b4 <MX_GPIO_Init+0x134>)
 80023e4:	f7fe fb43 	bl	8000a6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80023e8:	2200      	movs	r2, #0
 80023ea:	2104      	movs	r1, #4
 80023ec:	4832      	ldr	r0, [pc, #200]	; (80024b8 <MX_GPIO_Init+0x138>)
 80023ee:	f7fe fb3e 	bl	8000a6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_WK_Pin;
 80023f2:	2301      	movs	r3, #1
 80023f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023f6:	4b31      	ldr	r3, [pc, #196]	; (80024bc <MX_GPIO_Init+0x13c>)
 80023f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80023fa:	2302      	movs	r3, #2
 80023fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_WK_GPIO_Port, &GPIO_InitStruct);
 80023fe:	f107 0310 	add.w	r3, r7, #16
 8002402:	4619      	mov	r1, r3
 8002404:	482b      	ldr	r0, [pc, #172]	; (80024b4 <MX_GPIO_Init+0x134>)
 8002406:	f7fe f9b1 	bl	800076c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 800240a:	2320      	movs	r3, #32
 800240c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800240e:	4b2c      	ldr	r3, [pc, #176]	; (80024c0 <MX_GPIO_Init+0x140>)
 8002410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002412:	2301      	movs	r3, #1
 8002414:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 8002416:	f107 0310 	add.w	r3, r7, #16
 800241a:	4619      	mov	r1, r3
 800241c:	4829      	ldr	r0, [pc, #164]	; (80024c4 <MX_GPIO_Init+0x144>)
 800241e:	f7fe f9a5 	bl	800076c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8002422:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002426:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002428:	2301      	movs	r3, #1
 800242a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242c:	2300      	movs	r3, #0
 800242e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002430:	2302      	movs	r3, #2
 8002432:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8002434:	f107 0310 	add.w	r3, r7, #16
 8002438:	4619      	mov	r1, r3
 800243a:	481e      	ldr	r0, [pc, #120]	; (80024b4 <MX_GPIO_Init+0x134>)
 800243c:	f7fe f996 	bl	800076c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 8002440:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002444:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002446:	4b1e      	ldr	r3, [pc, #120]	; (80024c0 <MX_GPIO_Init+0x140>)
 8002448:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800244a:	2301      	movs	r3, #1
 800244c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 800244e:	f107 0310 	add.w	r3, r7, #16
 8002452:	4619      	mov	r1, r3
 8002454:	4817      	ldr	r0, [pc, #92]	; (80024b4 <MX_GPIO_Init+0x134>)
 8002456:	f7fe f989 	bl	800076c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800245a:	2304      	movs	r3, #4
 800245c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800245e:	2301      	movs	r3, #1
 8002460:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002466:	2302      	movs	r3, #2
 8002468:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800246a:	f107 0310 	add.w	r3, r7, #16
 800246e:	4619      	mov	r1, r3
 8002470:	4811      	ldr	r0, [pc, #68]	; (80024b8 <MX_GPIO_Init+0x138>)
 8002472:	f7fe f97b 	bl	800076c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8002476:	2200      	movs	r2, #0
 8002478:	2101      	movs	r1, #1
 800247a:	2006      	movs	r0, #6
 800247c:	f7fe f837 	bl	80004ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002480:	2006      	movs	r0, #6
 8002482:	f7fe f850 	bl	8000526 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 1);
 8002486:	2201      	movs	r2, #1
 8002488:	2101      	movs	r1, #1
 800248a:	2017      	movs	r0, #23
 800248c:	f7fe f82f 	bl	80004ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002490:	2017      	movs	r0, #23
 8002492:	f7fe f848 	bl	8000526 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 2);
 8002496:	2202      	movs	r2, #2
 8002498:	2101      	movs	r1, #1
 800249a:	2028      	movs	r0, #40	; 0x28
 800249c:	f7fe f827 	bl	80004ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80024a0:	2028      	movs	r0, #40	; 0x28
 80024a2:	f7fe f840 	bl	8000526 <HAL_NVIC_EnableIRQ>

}
 80024a6:	bf00      	nop
 80024a8:	3720      	adds	r7, #32
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40021000 	.word	0x40021000
 80024b4:	40010800 	.word	0x40010800
 80024b8:	40011400 	.word	0x40011400
 80024bc:	10110000 	.word	0x10110000
 80024c0:	10210000 	.word	0x10210000
 80024c4:	40011000 	.word	0x40011000

080024c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024cc:	f7fd feb4 	bl	8000238 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024d0:	f000 f816 	bl	8002500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024d4:	f7ff ff54 	bl	8002380 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80024d8:	f000 fa94 	bl	8002a04 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80024dc:	f000 fa1e 	bl	800291c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, (uint8_t *)rxBuffer, 1);
 80024e0:	2201      	movs	r2, #1
 80024e2:	4904      	ldr	r1, [pc, #16]	; (80024f4 <main+0x2c>)
 80024e4:	4804      	ldr	r0, [pc, #16]	; (80024f8 <main+0x30>)
 80024e6:	f7ff fba5 	bl	8001c34 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80024ea:	4804      	ldr	r0, [pc, #16]	; (80024fc <main+0x34>)
 80024ec:	f7fe ff4f 	bl	800138e <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80024f0:	e7fe      	b.n	80024f0 <main+0x28>
 80024f2:	bf00      	nop
 80024f4:	20000470 	.word	0x20000470
 80024f8:	200004c4 	.word	0x200004c4
 80024fc:	20000484 	.word	0x20000484

08002500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b090      	sub	sp, #64	; 0x40
 8002504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002506:	f107 0318 	add.w	r3, r7, #24
 800250a:	2228      	movs	r2, #40	; 0x28
 800250c:	2100      	movs	r1, #0
 800250e:	4618      	mov	r0, r3
 8002510:	f000 fb40 	bl	8002b94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002514:	1d3b      	adds	r3, r7, #4
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	605a      	str	r2, [r3, #4]
 800251c:	609a      	str	r2, [r3, #8]
 800251e:	60da      	str	r2, [r3, #12]
 8002520:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002522:	2301      	movs	r3, #1
 8002524:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002526:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800252a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800252c:	2300      	movs	r3, #0
 800252e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002530:	2301      	movs	r3, #1
 8002532:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002534:	2302      	movs	r3, #2
 8002536:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002538:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800253c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800253e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002542:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002544:	f107 0318 	add.w	r3, r7, #24
 8002548:	4618      	mov	r0, r3
 800254a:	f7fe fad9 	bl	8000b00 <HAL_RCC_OscConfig>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002554:	f000 f91a 	bl	800278c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002558:	230f      	movs	r3, #15
 800255a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800255c:	2302      	movs	r3, #2
 800255e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002560:	2300      	movs	r3, #0
 8002562:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002564:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002568:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800256a:	2300      	movs	r3, #0
 800256c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800256e:	1d3b      	adds	r3, r7, #4
 8002570:	2102      	movs	r1, #2
 8002572:	4618      	mov	r0, r3
 8002574:	f7fe fd44 	bl	8001000 <HAL_RCC_ClockConfig>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800257e:	f000 f905 	bl	800278c <Error_Handler>
  }
}
 8002582:	bf00      	nop
 8002584:	3740      	adds	r7, #64	; 0x40
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
	...

0800258c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	80fb      	strh	r3, [r7, #6]
	 HAL_Delay(100);
 8002596:	2064      	movs	r0, #100	; 0x64
 8002598:	f7fd feb0 	bl	80002fc <HAL_Delay>
	 switch (GPIO_Pin) {
 800259c:	88fb      	ldrh	r3, [r7, #6]
 800259e:	2b20      	cmp	r3, #32
 80025a0:	d005      	beq.n	80025ae <HAL_GPIO_EXTI_Callback+0x22>
 80025a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025a6:	d016      	beq.n	80025d6 <HAL_GPIO_EXTI_Callback+0x4a>
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d029      	beq.n	8002600 <HAL_GPIO_EXTI_Callback+0x74>
			 HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
			 HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
		 }
		 break;
	 default:
		 break;
 80025ac:	e041      	b.n	8002632 <HAL_GPIO_EXTI_Callback+0xa6>
		 HAL_Delay(10);
 80025ae:	200a      	movs	r0, #10
 80025b0:	f7fd fea4 	bl	80002fc <HAL_Delay>
		 if (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_RESET) {
 80025b4:	2120      	movs	r1, #32
 80025b6:	4821      	ldr	r0, [pc, #132]	; (800263c <HAL_GPIO_EXTI_Callback+0xb0>)
 80025b8:	f7fe fa42 	bl	8000a40 <HAL_GPIO_ReadPin>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d132      	bne.n	8002628 <HAL_GPIO_EXTI_Callback+0x9c>
			 HAL_UART_Transmit(&huart1, key0Pressed, 16, 0xffff);
 80025c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025c6:	2210      	movs	r2, #16
 80025c8:	491d      	ldr	r1, [pc, #116]	; (8002640 <HAL_GPIO_EXTI_Callback+0xb4>)
 80025ca:	481e      	ldr	r0, [pc, #120]	; (8002644 <HAL_GPIO_EXTI_Callback+0xb8>)
 80025cc:	f7ff fa99 	bl	8001b02 <HAL_UART_Transmit>
			 BlinkLed0();
 80025d0:	f000 f89e 	bl	8002710 <BlinkLed0>
		 break;
 80025d4:	e028      	b.n	8002628 <HAL_GPIO_EXTI_Callback+0x9c>
		 HAL_Delay(10);
 80025d6:	200a      	movs	r0, #10
 80025d8:	f7fd fe90 	bl	80002fc <HAL_Delay>
		 if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET) {
 80025dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025e0:	4819      	ldr	r0, [pc, #100]	; (8002648 <HAL_GPIO_EXTI_Callback+0xbc>)
 80025e2:	f7fe fa2d 	bl	8000a40 <HAL_GPIO_ReadPin>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d11f      	bne.n	800262c <HAL_GPIO_EXTI_Callback+0xa0>
			 HAL_UART_Transmit(&huart1, key1Pressed, 16, 0xffff);
 80025ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025f0:	2210      	movs	r2, #16
 80025f2:	4916      	ldr	r1, [pc, #88]	; (800264c <HAL_GPIO_EXTI_Callback+0xc0>)
 80025f4:	4813      	ldr	r0, [pc, #76]	; (8002644 <HAL_GPIO_EXTI_Callback+0xb8>)
 80025f6:	f7ff fa84 	bl	8001b02 <HAL_UART_Transmit>
			 BlinkLed1();
 80025fa:	f000 f8a9 	bl	8002750 <BlinkLed1>
		 break;
 80025fe:	e015      	b.n	800262c <HAL_GPIO_EXTI_Callback+0xa0>
		 HAL_Delay(10);
 8002600:	200a      	movs	r0, #10
 8002602:	f7fd fe7b 	bl	80002fc <HAL_Delay>
		 if (HAL_GPIO_ReadPin(KEY_WK_GPIO_Port, KEY_WK_Pin) == GPIO_PIN_SET) {
 8002606:	2101      	movs	r1, #1
 8002608:	480f      	ldr	r0, [pc, #60]	; (8002648 <HAL_GPIO_EXTI_Callback+0xbc>)
 800260a:	f7fe fa19 	bl	8000a40 <HAL_GPIO_ReadPin>
 800260e:	4603      	mov	r3, r0
 8002610:	2b01      	cmp	r3, #1
 8002612:	d10d      	bne.n	8002630 <HAL_GPIO_EXTI_Callback+0xa4>
			 HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8002614:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002618:	480b      	ldr	r0, [pc, #44]	; (8002648 <HAL_GPIO_EXTI_Callback+0xbc>)
 800261a:	f7fe fa40 	bl	8000a9e <HAL_GPIO_TogglePin>
			 HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800261e:	2104      	movs	r1, #4
 8002620:	480b      	ldr	r0, [pc, #44]	; (8002650 <HAL_GPIO_EXTI_Callback+0xc4>)
 8002622:	f7fe fa3c 	bl	8000a9e <HAL_GPIO_TogglePin>
		 break;
 8002626:	e003      	b.n	8002630 <HAL_GPIO_EXTI_Callback+0xa4>
		 break;
 8002628:	bf00      	nop
 800262a:	e002      	b.n	8002632 <HAL_GPIO_EXTI_Callback+0xa6>
		 break;
 800262c:	bf00      	nop
 800262e:	e000      	b.n	8002632 <HAL_GPIO_EXTI_Callback+0xa6>
		 break;
 8002630:	bf00      	nop

	 }
}
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40011000 	.word	0x40011000
 8002640:	20000008 	.word	0x20000008
 8002644:	200004c4 	.word	0x200004c4
 8002648:	40010800 	.word	0x40010800
 800264c:	20000018 	.word	0x20000018
 8002650:	40011400 	.word	0x40011400

08002654 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM3)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a05      	ldr	r2, [pc, #20]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d103      	bne.n	800266e <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
//		HAL_UART_Transmit(&huart1, tim3Elapsed, 6, 0xffff);
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8002666:	2104      	movs	r1, #4
 8002668:	4804      	ldr	r0, [pc, #16]	; (800267c <HAL_TIM_PeriodElapsedCallback+0x28>)
 800266a:	f7fe fa18 	bl	8000a9e <HAL_GPIO_TogglePin>
	}
}
 800266e:	bf00      	nop
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40000400 	.word	0x40000400
 800267c:	40011400 	.word	0x40011400

08002680 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a19      	ldr	r2, [pc, #100]	; (80026f4 <HAL_UART_RxCpltCallback+0x74>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d12c      	bne.n	80026ec <HAL_UART_RxCpltCallback+0x6c>
	{
		static uint8_t respond[] = "Got 'interrupt'.\n";
		static char uRx_Data[1024] = {0};
		static unsigned char uLength = 0;
		if(rxBuffer[0] == '\n' || rxBuffer[0] == '\0')
 8002692:	4b19      	ldr	r3, [pc, #100]	; (80026f8 <HAL_UART_RxCpltCallback+0x78>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b0a      	cmp	r3, #10
 8002698:	d003      	beq.n	80026a2 <HAL_UART_RxCpltCallback+0x22>
 800269a:	4b17      	ldr	r3, [pc, #92]	; (80026f8 <HAL_UART_RxCpltCallback+0x78>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d117      	bne.n	80026d2 <HAL_UART_RxCpltCallback+0x52>
		{
			uRx_Data[uLength-1] = '\0';
 80026a2:	4b16      	ldr	r3, [pc, #88]	; (80026fc <HAL_UART_RxCpltCallback+0x7c>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	4a15      	ldr	r2, [pc, #84]	; (8002700 <HAL_UART_RxCpltCallback+0x80>)
 80026aa:	2100      	movs	r1, #0
 80026ac:	54d1      	strb	r1, [r2, r3]
			if(!strcmp(uRx_Data, textForIRQ)){
 80026ae:	4915      	ldr	r1, [pc, #84]	; (8002704 <HAL_UART_RxCpltCallback+0x84>)
 80026b0:	4813      	ldr	r0, [pc, #76]	; (8002700 <HAL_UART_RxCpltCallback+0x80>)
 80026b2:	f7fd fdb7 	bl	8000224 <strcmp>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d106      	bne.n	80026ca <HAL_UART_RxCpltCallback+0x4a>
				HAL_UART_Transmit(&huart1, respond, 17, 0xffff);
 80026bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026c0:	2211      	movs	r2, #17
 80026c2:	4911      	ldr	r1, [pc, #68]	; (8002708 <HAL_UART_RxCpltCallback+0x88>)
 80026c4:	4811      	ldr	r0, [pc, #68]	; (800270c <HAL_UART_RxCpltCallback+0x8c>)
 80026c6:	f7ff fa1c 	bl	8001b02 <HAL_UART_Transmit>
			}

			uLength = 0;
 80026ca:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <HAL_UART_RxCpltCallback+0x7c>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	701a      	strb	r2, [r3, #0]
		{
			uRx_Data[uLength] = rxBuffer[0];
			uLength++;
		}
	}
}
 80026d0:	e00c      	b.n	80026ec <HAL_UART_RxCpltCallback+0x6c>
			uRx_Data[uLength] = rxBuffer[0];
 80026d2:	4b0a      	ldr	r3, [pc, #40]	; (80026fc <HAL_UART_RxCpltCallback+0x7c>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	461a      	mov	r2, r3
 80026d8:	4b07      	ldr	r3, [pc, #28]	; (80026f8 <HAL_UART_RxCpltCallback+0x78>)
 80026da:	7819      	ldrb	r1, [r3, #0]
 80026dc:	4b08      	ldr	r3, [pc, #32]	; (8002700 <HAL_UART_RxCpltCallback+0x80>)
 80026de:	5499      	strb	r1, [r3, r2]
			uLength++;
 80026e0:	4b06      	ldr	r3, [pc, #24]	; (80026fc <HAL_UART_RxCpltCallback+0x7c>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	3301      	adds	r3, #1
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	4b04      	ldr	r3, [pc, #16]	; (80026fc <HAL_UART_RxCpltCallback+0x7c>)
 80026ea:	701a      	strb	r2, [r3, #0]
}
 80026ec:	bf00      	nop
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40013800 	.word	0x40013800
 80026f8:	20000470 	.word	0x20000470
 80026fc:	20000068 	.word	0x20000068
 8002700:	2000006c 	.word	0x2000006c
 8002704:	20000028 	.word	0x20000028
 8002708:	20000034 	.word	0x20000034
 800270c:	200004c4 	.word	0x200004c4

08002710 <BlinkLed0>:

void BlinkLed0(){
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8002716:	2200      	movs	r2, #0
 8002718:	f44f 7180 	mov.w	r1, #256	; 0x100
 800271c:	480b      	ldr	r0, [pc, #44]	; (800274c <BlinkLed0+0x3c>)
 800271e:	f7fe f9a6 	bl	8000a6e <HAL_GPIO_WritePin>
	for(int i=0;i<7;i++){
 8002722:	2300      	movs	r3, #0
 8002724:	607b      	str	r3, [r7, #4]
 8002726:	e00a      	b.n	800273e <BlinkLed0+0x2e>
		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8002728:	f44f 7180 	mov.w	r1, #256	; 0x100
 800272c:	4807      	ldr	r0, [pc, #28]	; (800274c <BlinkLed0+0x3c>)
 800272e:	f7fe f9b6 	bl	8000a9e <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8002732:	20c8      	movs	r0, #200	; 0xc8
 8002734:	f7fd fde2 	bl	80002fc <HAL_Delay>
	for(int i=0;i<7;i++){
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3301      	adds	r3, #1
 800273c:	607b      	str	r3, [r7, #4]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b06      	cmp	r3, #6
 8002742:	ddf1      	ble.n	8002728 <BlinkLed0+0x18>
	}
}
 8002744:	bf00      	nop
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40010800 	.word	0x40010800

08002750 <BlinkLed1>:
void BlinkLed1(){
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002756:	2200      	movs	r2, #0
 8002758:	2104      	movs	r1, #4
 800275a:	480b      	ldr	r0, [pc, #44]	; (8002788 <BlinkLed1+0x38>)
 800275c:	f7fe f987 	bl	8000a6e <HAL_GPIO_WritePin>
	for(int i=0;i<7;i++){
 8002760:	2300      	movs	r3, #0
 8002762:	607b      	str	r3, [r7, #4]
 8002764:	e009      	b.n	800277a <BlinkLed1+0x2a>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8002766:	2104      	movs	r1, #4
 8002768:	4807      	ldr	r0, [pc, #28]	; (8002788 <BlinkLed1+0x38>)
 800276a:	f7fe f998 	bl	8000a9e <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 800276e:	20c8      	movs	r0, #200	; 0xc8
 8002770:	f7fd fdc4 	bl	80002fc <HAL_Delay>
	for(int i=0;i<7;i++){
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3301      	adds	r3, #1
 8002778:	607b      	str	r3, [r7, #4]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b06      	cmp	r3, #6
 800277e:	ddf2      	ble.n	8002766 <BlinkLed1+0x16>
	}
}
 8002780:	bf00      	nop
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40011400 	.word	0x40011400

0800278c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr

08002798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800279e:	4b16      	ldr	r3, [pc, #88]	; (80027f8 <HAL_MspInit+0x60>)
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	4a15      	ldr	r2, [pc, #84]	; (80027f8 <HAL_MspInit+0x60>)
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	6193      	str	r3, [r2, #24]
 80027aa:	4b13      	ldr	r3, [pc, #76]	; (80027f8 <HAL_MspInit+0x60>)
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	60bb      	str	r3, [r7, #8]
 80027b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027b6:	4b10      	ldr	r3, [pc, #64]	; (80027f8 <HAL_MspInit+0x60>)
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	4a0f      	ldr	r2, [pc, #60]	; (80027f8 <HAL_MspInit+0x60>)
 80027bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c0:	61d3      	str	r3, [r2, #28]
 80027c2:	4b0d      	ldr	r3, [pc, #52]	; (80027f8 <HAL_MspInit+0x60>)
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ca:	607b      	str	r3, [r7, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80027ce:	2005      	movs	r0, #5
 80027d0:	f7fd fe82 	bl	80004d8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80027d4:	4b09      	ldr	r3, [pc, #36]	; (80027fc <HAL_MspInit+0x64>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	4a04      	ldr	r2, [pc, #16]	; (80027fc <HAL_MspInit+0x64>)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027f0:	bf00      	nop
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40021000 	.word	0x40021000
 80027fc:	40010000 	.word	0x40010000

08002800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002804:	bf00      	nop
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr

0800280c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002810:	e7fe      	b.n	8002810 <HardFault_Handler+0x4>

08002812 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002812:	b480      	push	{r7}
 8002814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002816:	e7fe      	b.n	8002816 <MemManage_Handler+0x4>

08002818 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800281c:	e7fe      	b.n	800281c <BusFault_Handler+0x4>

0800281e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800281e:	b480      	push	{r7}
 8002820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002822:	e7fe      	b.n	8002822 <UsageFault_Handler+0x4>

08002824 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002828:	bf00      	nop
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr

08002830 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002834:	bf00      	nop
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr

0800283c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002840:	bf00      	nop
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr

08002848 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800284c:	f7fd fd3a 	bl	80002c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002850:	bf00      	nop
 8002852:	bd80      	pop	{r7, pc}

08002854 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002858:	2001      	movs	r0, #1
 800285a:	f7fe f939 	bl	8000ad0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800285e:	bf00      	nop
 8002860:	bd80      	pop	{r7, pc}

08002862 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002866:	2020      	movs	r0, #32
 8002868:	f7fe f932 	bl	8000ad0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800286c:	bf00      	nop
 800286e:	bd80      	pop	{r7, pc}

08002870 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002874:	4802      	ldr	r0, [pc, #8]	; (8002880 <TIM3_IRQHandler+0x10>)
 8002876:	f7fe fdad 	bl	80013d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20000484 	.word	0x20000484

08002884 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002888:	4804      	ldr	r0, [pc, #16]	; (800289c <USART1_IRQHandler+0x18>)
 800288a:	f7ff fa27 	bl	8001cdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  HAL_UART_Receive_IT(&huart1, (uint8_t *)rxBuffer, 1);
 800288e:	2201      	movs	r2, #1
 8002890:	4903      	ldr	r1, [pc, #12]	; (80028a0 <USART1_IRQHandler+0x1c>)
 8002892:	4802      	ldr	r0, [pc, #8]	; (800289c <USART1_IRQHandler+0x18>)
 8002894:	f7ff f9ce 	bl	8001c34 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_IRQn 1 */
}
 8002898:	bf00      	nop
 800289a:	bd80      	pop	{r7, pc}
 800289c:	200004c4 	.word	0x200004c4
 80028a0:	20000470 	.word	0x20000470

080028a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80028a8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80028ac:	f7fe f910 	bl	8000ad0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80028b0:	bf00      	nop
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80028b8:	4b15      	ldr	r3, [pc, #84]	; (8002910 <SystemInit+0x5c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a14      	ldr	r2, [pc, #80]	; (8002910 <SystemInit+0x5c>)
 80028be:	f043 0301 	orr.w	r3, r3, #1
 80028c2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80028c4:	4b12      	ldr	r3, [pc, #72]	; (8002910 <SystemInit+0x5c>)
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	4911      	ldr	r1, [pc, #68]	; (8002910 <SystemInit+0x5c>)
 80028ca:	4b12      	ldr	r3, [pc, #72]	; (8002914 <SystemInit+0x60>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80028d0:	4b0f      	ldr	r3, [pc, #60]	; (8002910 <SystemInit+0x5c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a0e      	ldr	r2, [pc, #56]	; (8002910 <SystemInit+0x5c>)
 80028d6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80028da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028de:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80028e0:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <SystemInit+0x5c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a0a      	ldr	r2, [pc, #40]	; (8002910 <SystemInit+0x5c>)
 80028e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ea:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80028ec:	4b08      	ldr	r3, [pc, #32]	; (8002910 <SystemInit+0x5c>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	4a07      	ldr	r2, [pc, #28]	; (8002910 <SystemInit+0x5c>)
 80028f2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80028f6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80028f8:	4b05      	ldr	r3, [pc, #20]	; (8002910 <SystemInit+0x5c>)
 80028fa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80028fe:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002900:	4b05      	ldr	r3, [pc, #20]	; (8002918 <SystemInit+0x64>)
 8002902:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002906:	609a      	str	r2, [r3, #8]
#endif 
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr
 8002910:	40021000 	.word	0x40021000
 8002914:	f8ff0000 	.word	0xf8ff0000
 8002918:	e000ed00 	.word	0xe000ed00

0800291c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002922:	f107 0308 	add.w	r3, r7, #8
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	605a      	str	r2, [r3, #4]
 800292c:	609a      	str	r2, [r3, #8]
 800292e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002930:	463b      	mov	r3, r7
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8002938:	4b1d      	ldr	r3, [pc, #116]	; (80029b0 <MX_TIM3_Init+0x94>)
 800293a:	4a1e      	ldr	r2, [pc, #120]	; (80029b4 <MX_TIM3_Init+0x98>)
 800293c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 800293e:	4b1c      	ldr	r3, [pc, #112]	; (80029b0 <MX_TIM3_Init+0x94>)
 8002940:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002944:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002946:	4b1a      	ldr	r3, [pc, #104]	; (80029b0 <MX_TIM3_Init+0x94>)
 8002948:	2200      	movs	r2, #0
 800294a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800294c:	4b18      	ldr	r3, [pc, #96]	; (80029b0 <MX_TIM3_Init+0x94>)
 800294e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002952:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002954:	4b16      	ldr	r3, [pc, #88]	; (80029b0 <MX_TIM3_Init+0x94>)
 8002956:	2200      	movs	r2, #0
 8002958:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800295a:	4b15      	ldr	r3, [pc, #84]	; (80029b0 <MX_TIM3_Init+0x94>)
 800295c:	2200      	movs	r2, #0
 800295e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002960:	4813      	ldr	r0, [pc, #76]	; (80029b0 <MX_TIM3_Init+0x94>)
 8002962:	f7fe fce9 	bl	8001338 <HAL_TIM_Base_Init>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800296c:	f7ff ff0e 	bl	800278c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002974:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002976:	f107 0308 	add.w	r3, r7, #8
 800297a:	4619      	mov	r1, r3
 800297c:	480c      	ldr	r0, [pc, #48]	; (80029b0 <MX_TIM3_Init+0x94>)
 800297e:	f7fe fe31 	bl	80015e4 <HAL_TIM_ConfigClockSource>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002988:	f7ff ff00 	bl	800278c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800298c:	2300      	movs	r3, #0
 800298e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002990:	2300      	movs	r3, #0
 8002992:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002994:	463b      	mov	r3, r7
 8002996:	4619      	mov	r1, r3
 8002998:	4805      	ldr	r0, [pc, #20]	; (80029b0 <MX_TIM3_Init+0x94>)
 800299a:	f7ff f80f 	bl	80019bc <HAL_TIMEx_MasterConfigSynchronization>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80029a4:	f7ff fef2 	bl	800278c <Error_Handler>
  }

}
 80029a8:	bf00      	nop
 80029aa:	3718      	adds	r7, #24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	20000484 	.word	0x20000484
 80029b4:	40000400 	.word	0x40000400

080029b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a0d      	ldr	r2, [pc, #52]	; (80029fc <HAL_TIM_Base_MspInit+0x44>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d113      	bne.n	80029f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029ca:	4b0d      	ldr	r3, [pc, #52]	; (8002a00 <HAL_TIM_Base_MspInit+0x48>)
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	4a0c      	ldr	r2, [pc, #48]	; (8002a00 <HAL_TIM_Base_MspInit+0x48>)
 80029d0:	f043 0302 	orr.w	r3, r3, #2
 80029d4:	61d3      	str	r3, [r2, #28]
 80029d6:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <HAL_TIM_Base_MspInit+0x48>)
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80029e2:	2200      	movs	r2, #0
 80029e4:	2100      	movs	r1, #0
 80029e6:	201d      	movs	r0, #29
 80029e8:	f7fd fd81 	bl	80004ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80029ec:	201d      	movs	r0, #29
 80029ee:	f7fd fd9a 	bl	8000526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80029f2:	bf00      	nop
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40000400 	.word	0x40000400
 8002a00:	40021000 	.word	0x40021000

08002a04 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002a08:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <MX_USART1_UART_Init+0x4c>)
 8002a0a:	4a12      	ldr	r2, [pc, #72]	; (8002a54 <MX_USART1_UART_Init+0x50>)
 8002a0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a0e:	4b10      	ldr	r3, [pc, #64]	; (8002a50 <MX_USART1_UART_Init+0x4c>)
 8002a10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a16:	4b0e      	ldr	r3, [pc, #56]	; (8002a50 <MX_USART1_UART_Init+0x4c>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a1c:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <MX_USART1_UART_Init+0x4c>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a22:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <MX_USART1_UART_Init+0x4c>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a28:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <MX_USART1_UART_Init+0x4c>)
 8002a2a:	220c      	movs	r2, #12
 8002a2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a2e:	4b08      	ldr	r3, [pc, #32]	; (8002a50 <MX_USART1_UART_Init+0x4c>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a34:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <MX_USART1_UART_Init+0x4c>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a3a:	4805      	ldr	r0, [pc, #20]	; (8002a50 <MX_USART1_UART_Init+0x4c>)
 8002a3c:	f7ff f814 	bl	8001a68 <HAL_UART_Init>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002a46:	f7ff fea1 	bl	800278c <Error_Handler>
  }

}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	200004c4 	.word	0x200004c4
 8002a54:	40013800 	.word	0x40013800

08002a58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b088      	sub	sp, #32
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a60:	f107 0310 	add.w	r3, r7, #16
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	605a      	str	r2, [r3, #4]
 8002a6a:	609a      	str	r2, [r3, #8]
 8002a6c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a20      	ldr	r2, [pc, #128]	; (8002af4 <HAL_UART_MspInit+0x9c>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d139      	bne.n	8002aec <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a78:	4b1f      	ldr	r3, [pc, #124]	; (8002af8 <HAL_UART_MspInit+0xa0>)
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	4a1e      	ldr	r2, [pc, #120]	; (8002af8 <HAL_UART_MspInit+0xa0>)
 8002a7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a82:	6193      	str	r3, [r2, #24]
 8002a84:	4b1c      	ldr	r3, [pc, #112]	; (8002af8 <HAL_UART_MspInit+0xa0>)
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a90:	4b19      	ldr	r3, [pc, #100]	; (8002af8 <HAL_UART_MspInit+0xa0>)
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	4a18      	ldr	r2, [pc, #96]	; (8002af8 <HAL_UART_MspInit+0xa0>)
 8002a96:	f043 0304 	orr.w	r3, r3, #4
 8002a9a:	6193      	str	r3, [r2, #24]
 8002a9c:	4b16      	ldr	r3, [pc, #88]	; (8002af8 <HAL_UART_MspInit+0xa0>)
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002aa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002aac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab6:	f107 0310 	add.w	r3, r7, #16
 8002aba:	4619      	mov	r1, r3
 8002abc:	480f      	ldr	r0, [pc, #60]	; (8002afc <HAL_UART_MspInit+0xa4>)
 8002abe:	f7fd fe55 	bl	800076c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ac6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ad0:	f107 0310 	add.w	r3, r7, #16
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4809      	ldr	r0, [pc, #36]	; (8002afc <HAL_UART_MspInit+0xa4>)
 8002ad8:	f7fd fe48 	bl	800076c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 1);
 8002adc:	2201      	movs	r2, #1
 8002ade:	2100      	movs	r1, #0
 8002ae0:	2025      	movs	r0, #37	; 0x25
 8002ae2:	f7fd fd04 	bl	80004ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ae6:	2025      	movs	r0, #37	; 0x25
 8002ae8:	f7fd fd1d 	bl	8000526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002aec:	bf00      	nop
 8002aee:	3720      	adds	r7, #32
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40013800 	.word	0x40013800
 8002af8:	40021000 	.word	0x40021000
 8002afc:	40010800 	.word	0x40010800

08002b00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002b00:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002b02:	e003      	b.n	8002b0c <LoopCopyDataInit>

08002b04 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002b04:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002b06:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002b08:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002b0a:	3104      	adds	r1, #4

08002b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002b0c:	480a      	ldr	r0, [pc, #40]	; (8002b38 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002b0e:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002b10:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002b12:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002b14:	d3f6      	bcc.n	8002b04 <CopyDataInit>
  ldr r2, =_sbss
 8002b16:	4a0a      	ldr	r2, [pc, #40]	; (8002b40 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002b18:	e002      	b.n	8002b20 <LoopFillZerobss>

08002b1a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002b1a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002b1c:	f842 3b04 	str.w	r3, [r2], #4

08002b20 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002b20:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002b22:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002b24:	d3f9      	bcc.n	8002b1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b26:	f7ff fec5 	bl	80028b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b2a:	f000 f80f 	bl	8002b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b2e:	f7ff fccb 	bl	80024c8 <main>
  bx lr
 8002b32:	4770      	bx	lr
  ldr r3, =_sidata
 8002b34:	08002bf0 	.word	0x08002bf0
  ldr r0, =_sdata
 8002b38:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002b3c:	2000004c 	.word	0x2000004c
  ldr r2, =_sbss
 8002b40:	2000004c 	.word	0x2000004c
  ldr r3, = _ebss
 8002b44:	20000504 	.word	0x20000504

08002b48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b48:	e7fe      	b.n	8002b48 <ADC1_2_IRQHandler>
	...

08002b4c <__libc_init_array>:
 8002b4c:	b570      	push	{r4, r5, r6, lr}
 8002b4e:	2500      	movs	r5, #0
 8002b50:	4e0c      	ldr	r6, [pc, #48]	; (8002b84 <__libc_init_array+0x38>)
 8002b52:	4c0d      	ldr	r4, [pc, #52]	; (8002b88 <__libc_init_array+0x3c>)
 8002b54:	1ba4      	subs	r4, r4, r6
 8002b56:	10a4      	asrs	r4, r4, #2
 8002b58:	42a5      	cmp	r5, r4
 8002b5a:	d109      	bne.n	8002b70 <__libc_init_array+0x24>
 8002b5c:	f000 f822 	bl	8002ba4 <_init>
 8002b60:	2500      	movs	r5, #0
 8002b62:	4e0a      	ldr	r6, [pc, #40]	; (8002b8c <__libc_init_array+0x40>)
 8002b64:	4c0a      	ldr	r4, [pc, #40]	; (8002b90 <__libc_init_array+0x44>)
 8002b66:	1ba4      	subs	r4, r4, r6
 8002b68:	10a4      	asrs	r4, r4, #2
 8002b6a:	42a5      	cmp	r5, r4
 8002b6c:	d105      	bne.n	8002b7a <__libc_init_array+0x2e>
 8002b6e:	bd70      	pop	{r4, r5, r6, pc}
 8002b70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b74:	4798      	blx	r3
 8002b76:	3501      	adds	r5, #1
 8002b78:	e7ee      	b.n	8002b58 <__libc_init_array+0xc>
 8002b7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b7e:	4798      	blx	r3
 8002b80:	3501      	adds	r5, #1
 8002b82:	e7f2      	b.n	8002b6a <__libc_init_array+0x1e>
 8002b84:	08002be8 	.word	0x08002be8
 8002b88:	08002be8 	.word	0x08002be8
 8002b8c:	08002be8 	.word	0x08002be8
 8002b90:	08002bec 	.word	0x08002bec

08002b94 <memset>:
 8002b94:	4603      	mov	r3, r0
 8002b96:	4402      	add	r2, r0
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d100      	bne.n	8002b9e <memset+0xa>
 8002b9c:	4770      	bx	lr
 8002b9e:	f803 1b01 	strb.w	r1, [r3], #1
 8002ba2:	e7f9      	b.n	8002b98 <memset+0x4>

08002ba4 <_init>:
 8002ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ba6:	bf00      	nop
 8002ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002baa:	bc08      	pop	{r3}
 8002bac:	469e      	mov	lr, r3
 8002bae:	4770      	bx	lr

08002bb0 <_fini>:
 8002bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bb2:	bf00      	nop
 8002bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bb6:	bc08      	pop	{r3}
 8002bb8:	469e      	mov	lr, r3
 8002bba:	4770      	bx	lr
